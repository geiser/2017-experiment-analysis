1566816372090:wants <- c('coin', 'reshape', 'dplyr', 'r2excel', 'readr', 'rcompanion', 'FSA')
1566816372091:has   <- wants %in% rownames(installed.packages())
1566816372167:if(any(!has)) install.packages(wants[!has])
1566816372167:library(coin)
1566816373351:library(dplyr)
1566816373800:library(readr)
1566816373879:library(reshape)
1566816373895:library(r2excel)
1566816374485:library(rcomp)
1566816374749:library(rcompanion)
1566816374855:library(FSA)
1566816374869:## plot function of wilcox_analysiss
1566816374870:plot_wilcox.test <- function(
1566816374870:wt, title="", sub = NULL, ylab = NULL, notch = T
1566816374870:, inv.col = F, draw.conf.int = T, ylim = NULL, levels = NULL) {
1566816374871:x <- factor(wt$data$x)
1566816374871:y <- wt$data$y
1566816374872:pch1=16; pch2=17
1566816374872:pcol1=10; pcol2=4
1566816374872:pcol = c("white", "lightgrey")
1566816374873:if (inv.col) {
1566816374873:pch1 = 17; pch2 = 16
1566816374873:pcol1 = 4; pcol2 = 10
1566816374874:pcol = c("lightgrey", "white")
1566816374874:}
1566816374874:if (is.null(levels)) {
1566816374875:x <- factor(x)
1566816374875:} else x <- factor(x, levels = levels)
1566816374876:par(cex.main=1.5, cex.lab=1.25, cex.sub=1.25, cex.axis=1.25)
1566816374876:bp <- boxplot(y ~ x, boxwex=0.2, notch=notch, col=pcol, ylab=ylab, ylim = ylim)
1566816374877:title(title, sub = sub)
1566816374877:# drawing data as points
1566816374877:stripchart(y[x==levels(x)[1]], col=8, pch=pch1, add=T, at=0.7, cex=.7, method="jitter", vertical=T)
1566816374878:stripchart(y[x==levels(x)[2]], col=8, pch=pch2, add=T, at=1.7, cex=.7, method="jitter", vertical=T)
1566816374878:# drawing line wilcox conf.interval
1566816374879:if (draw.conf.int) {
1566816374879:wt <- tryCatch(wilcox.test(y[x==levels(x)[1]], conf.int=T), error = function(e) NULL)
1566816374879:if (!is.null(wt)) {
1566816374880:points(c(0.7,0.7,0.7), c(wt$conf.int, wt$estimate), pch="-", col=pcol1, cex=c(.9,.9,1.5))
1566816374880:lines(c(0.7,0.7), wt$conf.int, col=pcol1)
1566816374881:}
1566816374881:wt <- tryCatch(wilcox.test(y[x==levels(x)[2]], conf.int=T), error = function(e) NULL)
1566816374882:if (!is.null(wt)) {
1566816374882:points(c(1.7,1.7,1.7), c(wt$conf.int, wt$estimate), pch="-", col=pcol2, cex=c(.9,.9,1.5))
1566816374882:lines(c(1.7,1.7), wt$conf.int, col=pcol2)
1566816374883:}
1566816374883:}
1566816374884:}
1566816374885:## Function to get wilcox_module
1566816374900:get_wilcox_mod <- function(x, y,  alternative = "two.sided") {
1566816374901:library(coin)
1566816374902:x <- factor(x)
1566816374902:sdata <- data.frame(x=x, y=y, r=rank(y))
1566816374903:# wilcoxon values
1566816374903:wt <- wilcox.test(y ~ x, alternative = alternative, conf.int = FALSE)
1566816374903:U <- wt$statistic
1566816374904:wt <- wilcox_test(y ~ x, distribution="exact", conf.int = FALSE, alternative = alternative)
1566816374904:Z <- as.numeric(statistic(wt))
1566816374904:pvalue <- pvalue(wt)
1566816374904:r <- abs(Z/sqrt(length(x)))
1566816374905:magnitude <- 'none'
1566816374905:if (r >= 0.1 && r < 0.3) magnitude <- 'small'
1566816374906:if (r >= 0.3 && r < 0.5) magnitude <- 'medium'
1566816374906:if (r >= 0.5) magnitude <- 'large'
1566816374907:result <- data.frame(
1566816374907:"Group" = c(levels(x)[1], levels(x)[2])
1566816374908:, "N" = c(length(x[x==levels(x)[1]]), length(x[x==levels(x)[2]]))
1566816374908:, "Median" = c(median(sdata$y[sdata$x == levels(x)[1]]), median(sdata$y[sdata$x == levels(x)[2]]))
1566816374908:, "Mean Ranks" = c(mean(sdata$r[sdata$x == levels(x)[1]]), mean(sdata$r[sdata$x == levels(x)[2]]))
1566816374909:, "Sum Ranks" = c(sum(sdata$r[sdata$x == levels(x)[1]]), sum(sdata$r[sdata$x == levels(x)[2]]))
1566816374909:, "U" = c(U, U)
1566816374909:, "Z" = c(Z, Z)
1566816374910:, "p-value" = c(pvalue, pvalue)
1566816374910:, "r" = c(r, r)
1566816374910:, "magnitude" = c(magnitude, magnitude)
1566816374911:)
1566816374912:return(list(data = sdata, result = result))
1566816374912:}
1566816374913:## Function to get wilcox test modules
1566816374913:get_wilcox_mods <- function(dat, dv, iv, between) {
1566816374913:dat <- dat[complete.cases(dat[dv]),]
1566816374914:result <- list()
1566816374914:columns <- unique(c(iv, between[!between %in% iv]))
1566816374915:for (m in 1:length(columns)) {
1566816374915:comb_columns <- combn(columns, m, simplify = T)
1566816374915:for (i in 1:ncol(comb_columns)) {
1566816374915:selected_columns  <- comb_columns[,i]
1566816374916:if (selected_columns[[1]] != iv) next
1566816374916:cname <- paste0(selected_columns, collapse = ':')
1566816374916:factors <- factor(apply(dat[selected_columns], 1, paste, collapse='.'))
1566816374916:level_pairs <- combn(levels(factors), 2)
1566816374917:mods <- list()
1566816374917:for (j in 1:ncol(level_pairs)) {
1566816374918:level_pair <- level_pairs[,j]
1566816374918:rdat <- dat[factors %in% level_pair,]
1566816374919:y <- rdat[[dv]]
1566816374919:x <- factors[factors %in% level_pair]
1566816374919:wt_1 <- get_wilcox_mod(x, y, alternative = 'less')
1566816374920:wt_2 <- get_wilcox_mod(x, y, alternative = 'greater')
1566816374920:wt_3 <- get_wilcox_mod(x, y, alternative = 'two.sided')
1566816374921:mods[[paste0(level_pair, collapse = ':')]] <- list(dat = rdat, less = wt_1, greater = wt_2, two.sided = wt_3)
1566816374921:}
1566816374921:result[[cname]] <- mods
1566816374922:}
1566816374922:}
1566816374922:return(result)
1566816374923:}
1566816374924:## Function to perform the parametric test
1566816374924:# TODO: non-parametric test
1566816374924:do_nonparametric_test <- function(dat, wid, dv, iv, between, observed = NULL
1566816374924:, within = NULL, p_limit = 0.05, completed = F) {
1566816374925:library(rcompanion)
1566816374925:wdat <- dat
1566816374925:columns <- base::unique(c(iv, between, observed))
1566816374926:for (cname in columns) wdat[[cname]] <- factor(wdat[[cname]])
1566816374926:dv_tmp <- gsub('\\W', '', dv) # temporal name for dependent variable
1566816374926:wdat[[dv_tmp]] <- wdat[[dv]]
1566816374927:mod <- NULL
1566816374927:post_hoc <- NULL
1566816374927:formula_str <- paste(dv_tmp, "~", paste(columns, collapse = "+"))
1566816374928:if (length(columns) == 1) {
1566816374928:# get_Scheirer Kruskal
1566816374928:mod <- kruskal.test(as.formula(formula_str), data = wdat)
1566816374929:mod_df <- as.data.frame(list(`chi-square` = mod$statistic
1566816374929:, df = mod$parameter
1566816374929:, `p.value` = mod$p.value))
1566816374929:} else if (length(columns) == 2) {
1566816374930:# get_Scheirer Ray Hare test module
1566816374930:mod <- scheirerRayHare(formula = as.formula(formula_str), data = wdat)
1566816374930:mod_df <- as.data.frame(mod)
1566816374931:}
1566816374931:# Post.hoc Dunn test
1566816374931:dunn_mods <- list()
1566816374932:columns <- unique(c(iv, columns[!columns %in% iv]))
1566816374932:for (m in 1:length(columns)) {
1566816374932:comb_columns <- combn(columns, m, simplify = T)
1566816374933:for (i in 1:ncol(comb_columns)) {
1566816374933:selected_columns  <- comb_columns[,i]
1566816374934:#if (selected_columns[[1]] != iv) next
1566816374934:cname <- paste0(selected_columns, collapse = ':')
1566816374935:factors <- factor(apply(wdat[selected_columns], 1, paste, collapse='.'))
1566816374935:dunn_mods[[cname]] <- dunnTest(x = wdat[[dv_tmp]], g = factors, method = "bonferroni")
1566816374935:}
1566816374936:}
1566816374936:post_hoc <- list(mods = dunn_mods)
1566816374937:if (dv_tmp != dv) {
1566816374937:wdat <- wdat[ , !(names(wdat) %in% c(dv_tmp))]
1566816374937:}
1566816374938:set_wt_mods <- get_wilcox_mods(dat, dv = dv, iv = iv, between = between)
1566816374938:return(list(data = wdat, mod = mod, mod.df = mod_df, formula.str = formula_str
1566816374939:, post.hoc = post_hoc, wilcox.pairs = set_wt_mods))
1566816374939:}
1566816374940:##############################################################
1566816374940:## function to write wilcoxon test in sheet
1566816374941:write_wts_in_wb <- function(wt_mods, wb, iv, i, title = "", ylab = "Score", ylim = NULL, levels = NULL) {
1566816374941:library(r2excel)
1566816374941:wt_mod <- wt_mods[[i]]
1566816374941:sheet <- xlsx::createSheet(wb, sheetName = paste0(sub(':', '_', iv),"_", i))
1566816374942:xlsx.addHeader(wb, sheet, paste0("Wilcoxon Analysis for ", title, " in ", iv, " between ", names(wt_mods)[[i]], collapse = ''), startCol = 1)
1566816374942:xlsx.addLineBreak(sheet, 2)
1566816374942:xlsx.addHeader(wb, sheet, "Wilcoxon test results", level = 2, startCol = 1)
1566816374942:xlsx.addHeader(wb, sheet, "Alternative hypothesis: less", level = 3, startCol = 1)
1566816374943:xlsx.addTable(wb, sheet, wt_mod$less$result, startCol = 1, row.names = F)
1566816374943:xlsx.addHeader(wb, sheet, "Alternative hypothesis: greater", level = 3, startCol = 1)
1566816374943:xlsx.addTable(wb, sheet, wt_mod$greater$result, startCol = 1, row.names = F)
1566816374944:xlsx.addHeader(wb, sheet, "Alternative hypothesis: two.sided", level = 3, startCol = 1)
1566816374944:xlsx.addTable(wb, sheet, wt_mod$two.sided$result, startCol = 1, row.names = F)
1566816374944:xlsx.addLineBreak(sheet, 2)
1566816374945:xlsx.addHeader(wb, sheet, "Box plots for wilcoxon tests", level = 2, startCol = 1)
1566816374945:plotWT <- function() {
1566816374945:##
1566816374945:pair_names <- strsplit(names(wt_mods)[[i]], ':')[[1]]
1566816374946:## sorting levels
1566816374946:pair_levels <- NULL
1566816374946:if (!is.null(levels)) {
1566816374947:pair_levels <- c()
1566816374947:for (lvl in levels) {
1566816374947:pair_levels <- c(pair_levels, pair_names[grepl(lvl, pair_names)])
1566816374948:}
1566816374948:}
1566816374949:plot_wilcox.test(wt_mod$two.sided, title = title, ylab = ylab, ylim = ylim, levels = pair_levels)
1566816374949:}
1566816374949:xlsx.addPlot(wb, sheet, plotWT, width = 640, height = 640, startCol = 1)
1566816374950:xlsx.addLineBreak(sheet, 2)
1566816374950:xlsx.addHeader(wb, sheet, "Wilcoxon data", level = 2, startCol = 1)
1566816374951:xlsx.addTable(wb, sheet, as.data.frame(wt_mod$dat), startCol = 1, row.names = F)
1566816374951:}
1566816374952:## Function to write summary of set wt mods
1566816374952:write_wts_summary_in_wb <- function(set_wt_mods, wb, title = "") {
1566816374952:library(r2excel)
1566816374952:sheet <- xlsx::createSheet(wb, sheetName = "Summary")
1566816374953:xlsx.addHeader(wb, sheet, paste0("Summary of Wilcoxon Analysis for ", title, collapse = ''), startCol = 1)
1566816374953:for (iv in names(set_wt_mods)) {
1566816374953:wt_mods <- set_wt_mods[[iv]]
1566816374953:for (i in 1:length(wt_mods)) {
1566816374954:wt_mod <- wt_mods[[i]]
1566816374954:if (max(wt_mod$less$result$p.value) <= 0.05) {
1566816374954:xlsx.addLineBreak(sheet, 2)
1566816374954:xlsx.addHeader(wb, sheet, paste0("Wilcoxon test results for ", iv, " - Alternative hypothesis: less"), level = 2, startCol = 1)
1566816374955:xlsx.addTable(wb, sheet, wt_mod$less$result, startCol = 1, row.names = F)
1566816374955:}
1566816374955:if (max(wt_mod$greater$result$p.value) <= 0.05) {
1566816374955:xlsx.addLineBreak(sheet, 2)
1566816374956:xlsx.addHeader(wb, sheet, paste0("Wilcoxon test results for ", iv, " - Alternative hypothesis: greater"), level = 2, startCol = 1)
1566816374956:xlsx.addTable(wb, sheet, wt_mod$greater$result, startCol = 1, row.names = F)
1566816374956:}
1566816374956:}
1566816374957:}
1566816374957:}
1566816374958:## Function to write plots of wilcoxon test
1566816374958:write_wilcoxon_plots <- function(
1566816374958:set_wt_mods, ylab, title, path, override = T, ylim = NULL, levels = NULL) {
1566816374958:for (iv in names(set_wt_mods)) {
1566816374958:wt_mods <- set_wt_mods[[iv]]
1566816374958:for (i in 1:length(wt_mods)) {
1566816374959:wt_mod <- wt_mods[[i]]
1566816374959:filename <- paste0(iv, '_', names(wt_mods)[[i]], ".png")
1566816374959:filename <- gsub(':', '.', gsub('/', '', filename))
1566816374959:filename <- paste0(path, filename)
1566816374960:##
1566816374960:pair_names <- strsplit(names(wt_mods)[[i]], ':')[[1]]
1566816374960:## sorting levels
1566816374961:pair_levels <- NULL
1566816374961:if (!is.null(levels)) {
1566816374961:pair_levels <- c()
1566816374962:for (lvl in levels) {
1566816374962:pair_levels <- c(pair_levels, pair_names[grepl(lvl, pair_names)])
1566816374962:}
1566816374963:}
1566816374963:if (!file.exists(filename) || override) {
1566816374963:png(filename = filename, width = 640, height = 640)
1566816374964:plot_wilcox.test(wt_mod$two.sided, title = title, ylab = ylab, ylim = ylim, levels = pair_levels)
1566816374964:dev.off()
1566816374964:}
1566816374965:}
1566816374965:}
1566816374965:}
1566816374966:# Function to write
1566816374966:write_plots_for_nonparametric_test <- function(
1566816374966:n_result, ylab, title, path, override = T, ylim = NULL, levels = NULL) {
1566816374966:write_wilcoxon_plots(
1566816374967:n_result$wilcox.pairs, ylab = ylab, title = title, path = path
1566816374967:, override = override, ylim = ylim, levels = levels)
1566816374967:}
1566816374967:write_sch_summary_in_wb <- function(n_result, wb, title = "") {
1566816374968:library(r2excel)
1566816374968:sheet <- xlsx::createSheet(wb, sheetName = "NonParametricTest")
1566816374968:xlsx.addHeader(wb, sheet, paste0("Summary of ", n_result$mod$method, " for ", title), startCol = 1)
1566816374969:xlsx.addLineBreak(sheet, 2)
1566816374969:xlsx.addHeader(wb, sheet, paste0(n_result$mod$method," Table: ", n_result$formula.str), level = 2, startCol = 1)
1566816374969:xlsx.addTable(wb, sheet, as.data.frame(n_result$mod.df), startCol = 1, row.names = T)
1566816374969:xlsx.addLineBreak(sheet, 2)
1566816374970:xlsx.addHeader(wb, sheet, "Post-hoc Multiple test", level = 2, startCol = 1)
1566816374970:for (cname in names(n_result$post.hoc$mods)) {
1566816374970:mod <- n_result$post.hoc$mods[[cname]]
1566816374970:xlsx.addLineBreak(sheet, 1)
1566816374971:xlsx.addHeader(wb, sheet, paste0("Dunn's Kruskal-Wallis  (", mod$method, ") for ", cname), level = 3, startCol = 1)
1566816374971:xlsx.addTable(wb, sheet, as.data.frame(mod$res), startCol = 1, row.names = F)
1566816374971:}
1566816374971:}
1566816374972:## Function to write anova analysis report
1566816374972:write_nonparametric_test_report <- function(n_result, filename, title = "", ylab = "Score", override = T, data = NULL, ylim = NULL, levels = NULL) {
1566816374972:library(r2excel)
1566816374973:if (!file.exists(filename) || override) {
1566816374973:wb <- createWorkbook(type="xlsx")
1566816374973:write_sch_summary_in_wb(n_result, wb, title)
1566816374973:# write pair_wilcoxon
1566816374974:write_wts_summary_in_wb(n_result$wilcox.pairs, wb, title = title)
1566816374974:for (iv in names(n_result$wilcox.pairs)) {
1566816374974:wt_mods <- n_result$wilcox.pairs[[iv]]
1566816374974:for (i in 1:length(wt_mods)) {
1566816374974:write_wts_in_wb(wt_mods, wb, iv, i, title = title, ylab = ylab, ylim = ylim, levels = levels)
1566816374975:}
1566816374975:}
1566816374975:if (is.null(data)) data <- n_result$data
1566816374976:sheet <- xlsx::createSheet(wb, sheetName = "data")
1566816374976:xlsx.addTable(wb, sheet, as.data.frame(data), startCol = 1, row.names = F)
1566816374976:##
1566816374977:saveWorkbook(wb, filename)
1566816374977:}
1566816374977:}
1566816396451:install.packages('rcomp')
1566816408788:wants <- c('coin', 'reshape', 'dplyr', 'r2excel', 'readr', 'rcompanion', 'FSA')
1566816408788:has   <- wants %in% rownames(installed.packages())
1566816408794:if(any(!has)) install.packages(wants[!has])
1566816408794:library(coin)
1566816408795:library(dplyr)
1566816408795:library(readr)
1566816408796:library(reshape)
1566816408796:library(r2excel)
1566816408797:library(rcomp)
1566816408833:library(rcompanion)
1566816408834:library(FSA)
1566816408835:## plot function of wilcox_analysiss
1566816408835:plot_wilcox.test <- function(
1566816408836:wt, title="", sub = NULL, ylab = NULL, notch = T
1566816408836:, inv.col = F, draw.conf.int = T, ylim = NULL, levels = NULL) {
1566816408837:x <- factor(wt$data$x)
1566816408837:y <- wt$data$y
1566816408837:pch1=16; pch2=17
1566816408838:pcol1=10; pcol2=4
1566816408838:pcol = c("white", "lightgrey")
1566816408839:if (inv.col) {
1566816408839:pch1 = 17; pch2 = 16
1566816408840:pcol1 = 4; pcol2 = 10
1566816408840:pcol = c("lightgrey", "white")
1566816408840:}
1566816408841:if (is.null(levels)) {
1566816408841:x <- factor(x)
1566816408841:} else x <- factor(x, levels = levels)
1566816408842:par(cex.main=1.5, cex.lab=1.25, cex.sub=1.25, cex.axis=1.25)
1566816408842:bp <- boxplot(y ~ x, boxwex=0.2, notch=notch, col=pcol, ylab=ylab, ylim = ylim)
1566816408843:title(title, sub = sub)
1566816408843:# drawing data as points
1566816408844:stripchart(y[x==levels(x)[1]], col=8, pch=pch1, add=T, at=0.7, cex=.7, method="jitter", vertical=T)
1566816408844:stripchart(y[x==levels(x)[2]], col=8, pch=pch2, add=T, at=1.7, cex=.7, method="jitter", vertical=T)
1566816408845:# drawing line wilcox conf.interval
1566816408845:if (draw.conf.int) {
1566816408845:wt <- tryCatch(wilcox.test(y[x==levels(x)[1]], conf.int=T), error = function(e) NULL)
1566816408846:if (!is.null(wt)) {
1566816408846:points(c(0.7,0.7,0.7), c(wt$conf.int, wt$estimate), pch="-", col=pcol1, cex=c(.9,.9,1.5))
1566816408847:lines(c(0.7,0.7), wt$conf.int, col=pcol1)
1566816408848:}
1566816408849:wt <- tryCatch(wilcox.test(y[x==levels(x)[2]], conf.int=T), error = function(e) NULL)
1566816408850:if (!is.null(wt)) {
1566816408850:points(c(1.7,1.7,1.7), c(wt$conf.int, wt$estimate), pch="-", col=pcol2, cex=c(.9,.9,1.5))
1566816408851:lines(c(1.7,1.7), wt$conf.int, col=pcol2)
1566816408851:}
1566816408852:}
1566816408852:}
1566816408854:## Function to get wilcox_module
1566816408854:get_wilcox_mod <- function(x, y,  alternative = "two.sided") {
1566816408854:library(coin)
1566816408855:x <- factor(x)
1566816408855:sdata <- data.frame(x=x, y=y, r=rank(y))
1566816408856:# wilcoxon values
1566816408856:wt <- wilcox.test(y ~ x, alternative = alternative, conf.int = FALSE)
1566816408856:U <- wt$statistic
1566816408856:wt <- wilcox_test(y ~ x, distribution="exact", conf.int = FALSE, alternative = alternative)
1566816408857:Z <- as.numeric(statistic(wt))
1566816408857:pvalue <- pvalue(wt)
1566816408857:r <- abs(Z/sqrt(length(x)))
1566816408858:magnitude <- 'none'
1566816408858:if (r >= 0.1 && r < 0.3) magnitude <- 'small'
1566816408858:if (r >= 0.3 && r < 0.5) magnitude <- 'medium'
1566816408859:if (r >= 0.5) magnitude <- 'large'
1566816408859:result <- data.frame(
1566816408860:"Group" = c(levels(x)[1], levels(x)[2])
1566816408860:, "N" = c(length(x[x==levels(x)[1]]), length(x[x==levels(x)[2]]))
1566816408861:, "Median" = c(median(sdata$y[sdata$x == levels(x)[1]]), median(sdata$y[sdata$x == levels(x)[2]]))
1566816408861:, "Mean Ranks" = c(mean(sdata$r[sdata$x == levels(x)[1]]), mean(sdata$r[sdata$x == levels(x)[2]]))
1566816408861:, "Sum Ranks" = c(sum(sdata$r[sdata$x == levels(x)[1]]), sum(sdata$r[sdata$x == levels(x)[2]]))
1566816408862:, "U" = c(U, U)
1566816408862:, "Z" = c(Z, Z)
1566816408863:, "p-value" = c(pvalue, pvalue)
1566816408863:, "r" = c(r, r)
1566816408863:, "magnitude" = c(magnitude, magnitude)
1566816408864:)
1566816408864:return(list(data = sdata, result = result))
1566816408865:}
1566816408866:## Function to get wilcox test modules
1566816408866:get_wilcox_mods <- function(dat, dv, iv, between) {
1566816408866:dat <- dat[complete.cases(dat[dv]),]
1566816408867:result <- list()
1566816408867:columns <- unique(c(iv, between[!between %in% iv]))
1566816408868:for (m in 1:length(columns)) {
1566816408868:comb_columns <- combn(columns, m, simplify = T)
1566816408868:for (i in 1:ncol(comb_columns)) {
1566816408868:selected_columns  <- comb_columns[,i]
1566816408869:if (selected_columns[[1]] != iv) next
1566816408869:cname <- paste0(selected_columns, collapse = ':')
1566816408869:factors <- factor(apply(dat[selected_columns], 1, paste, collapse='.'))
1566816408870:level_pairs <- combn(levels(factors), 2)
1566816408870:mods <- list()
1566816408870:for (j in 1:ncol(level_pairs)) {
1566816408871:level_pair <- level_pairs[,j]
1566816408871:rdat <- dat[factors %in% level_pair,]
1566816408872:y <- rdat[[dv]]
1566816408872:x <- factors[factors %in% level_pair]
1566816408873:wt_1 <- get_wilcox_mod(x, y, alternative = 'less')
1566816408873:wt_2 <- get_wilcox_mod(x, y, alternative = 'greater')
1566816408873:wt_3 <- get_wilcox_mod(x, y, alternative = 'two.sided')
1566816408874:mods[[paste0(level_pair, collapse = ':')]] <- list(dat = rdat, less = wt_1, greater = wt_2, two.sided = wt_3)
1566816408874:}
1566816408875:result[[cname]] <- mods
1566816408875:}
1566816408875:}
1566816408876:return(result)
1566816408876:}
1566816408877:## Function to perform the parametric test
1566816408877:# TODO: non-parametric test
1566816408878:do_nonparametric_test <- function(dat, wid, dv, iv, between, observed = NULL
1566816408878:, within = NULL, p_limit = 0.05, completed = F) {
1566816408878:library(rcompanion)
1566816408879:wdat <- dat
1566816408879:columns <- base::unique(c(iv, between, observed))
1566816408879:for (cname in columns) wdat[[cname]] <- factor(wdat[[cname]])
1566816408879:dv_tmp <- gsub('\\W', '', dv) # temporal name for dependent variable
1566816408880:wdat[[dv_tmp]] <- wdat[[dv]]
1566816408880:mod <- NULL
1566816408880:post_hoc <- NULL
1566816408881:formula_str <- paste(dv_tmp, "~", paste(columns, collapse = "+"))
1566816408881:if (length(columns) == 1) {
1566816408881:# get_Scheirer Kruskal
1566816408881:mod <- kruskal.test(as.formula(formula_str), data = wdat)
1566816408882:mod_df <- as.data.frame(list(`chi-square` = mod$statistic
1566816408882:, df = mod$parameter
1566816408882:, `p.value` = mod$p.value))
1566816408883:} else if (length(columns) == 2) {
1566816408883:# get_Scheirer Ray Hare test module
1566816408883:mod <- scheirerRayHare(formula = as.formula(formula_str), data = wdat)
1566816408884:mod_df <- as.data.frame(mod)
1566816408884:}
1566816408884:# Post.hoc Dunn test
1566816408885:dunn_mods <- list()
1566816408885:columns <- unique(c(iv, columns[!columns %in% iv]))
1566816408885:for (m in 1:length(columns)) {
1566816408886:comb_columns <- combn(columns, m, simplify = T)
1566816408887:for (i in 1:ncol(comb_columns)) {
1566816408887:selected_columns  <- comb_columns[,i]
1566816408888:#if (selected_columns[[1]] != iv) next
1566816408888:cname <- paste0(selected_columns, collapse = ':')
1566816408889:factors <- factor(apply(wdat[selected_columns], 1, paste, collapse='.'))
1566816408889:dunn_mods[[cname]] <- dunnTest(x = wdat[[dv_tmp]], g = factors, method = "bonferroni")
1566816408890:}
1566816408890:}
1566816408891:post_hoc <- list(mods = dunn_mods)
1566816408891:if (dv_tmp != dv) {
1566816408892:wdat <- wdat[ , !(names(wdat) %in% c(dv_tmp))]
1566816408892:}
1566816408893:set_wt_mods <- get_wilcox_mods(dat, dv = dv, iv = iv, between = between)
1566816408894:return(list(data = wdat, mod = mod, mod.df = mod_df, formula.str = formula_str
1566816408894:, post.hoc = post_hoc, wilcox.pairs = set_wt_mods))
1566816408894:}
1566816408895:##############################################################
1566816408896:## function to write wilcoxon test in sheet
1566816408896:write_wts_in_wb <- function(wt_mods, wb, iv, i, title = "", ylab = "Score", ylim = NULL, levels = NULL) {
1566816408896:library(r2excel)
1566816408897:wt_mod <- wt_mods[[i]]
1566816408897:sheet <- xlsx::createSheet(wb, sheetName = paste0(sub(':', '_', iv),"_", i))
1566816408897:xlsx.addHeader(wb, sheet, paste0("Wilcoxon Analysis for ", title, " in ", iv, " between ", names(wt_mods)[[i]], collapse = ''), startCol = 1)
1566816408898:xlsx.addLineBreak(sheet, 2)
1566816408898:xlsx.addHeader(wb, sheet, "Wilcoxon test results", level = 2, startCol = 1)
1566816408898:xlsx.addHeader(wb, sheet, "Alternative hypothesis: less", level = 3, startCol = 1)
1566816408899:xlsx.addTable(wb, sheet, wt_mod$less$result, startCol = 1, row.names = F)
1566816408901:xlsx.addHeader(wb, sheet, "Alternative hypothesis: greater", level = 3, startCol = 1)
1566816408902:xlsx.addTable(wb, sheet, wt_mod$greater$result, startCol = 1, row.names = F)
1566816408902:xlsx.addHeader(wb, sheet, "Alternative hypothesis: two.sided", level = 3, startCol = 1)
1566816408902:xlsx.addTable(wb, sheet, wt_mod$two.sided$result, startCol = 1, row.names = F)
1566816408903:xlsx.addLineBreak(sheet, 2)
1566816408903:xlsx.addHeader(wb, sheet, "Box plots for wilcoxon tests", level = 2, startCol = 1)
1566816408904:plotWT <- function() {
1566816408904:##
1566816408905:pair_names <- strsplit(names(wt_mods)[[i]], ':')[[1]]
1566816408905:## sorting levels
1566816408906:pair_levels <- NULL
1566816408906:if (!is.null(levels)) {
1566816408906:pair_levels <- c()
1566816408907:for (lvl in levels) {
1566816408907:pair_levels <- c(pair_levels, pair_names[grepl(lvl, pair_names)])
1566816408908:}
1566816408908:}
1566816408909:plot_wilcox.test(wt_mod$two.sided, title = title, ylab = ylab, ylim = ylim, levels = pair_levels)
1566816408909:}
1566816408910:xlsx.addPlot(wb, sheet, plotWT, width = 640, height = 640, startCol = 1)
1566816408911:xlsx.addLineBreak(sheet, 2)
1566816408912:xlsx.addHeader(wb, sheet, "Wilcoxon data", level = 2, startCol = 1)
1566816408912:xlsx.addTable(wb, sheet, as.data.frame(wt_mod$dat), startCol = 1, row.names = F)
1566816408912:}
1566816408913:## Function to write summary of set wt mods
1566816408914:write_wts_summary_in_wb <- function(set_wt_mods, wb, title = "") {
1566816408914:library(r2excel)
1566816408914:sheet <- xlsx::createSheet(wb, sheetName = "Summary")
1566816408915:xlsx.addHeader(wb, sheet, paste0("Summary of Wilcoxon Analysis for ", title, collapse = ''), startCol = 1)
1566816408915:for (iv in names(set_wt_mods)) {
1566816408915:wt_mods <- set_wt_mods[[iv]]
1566816408916:for (i in 1:length(wt_mods)) {
1566816408916:wt_mod <- wt_mods[[i]]
1566816408916:if (max(wt_mod$less$result$p.value) <= 0.05) {
1566816408916:xlsx.addLineBreak(sheet, 2)
1566816408917:xlsx.addHeader(wb, sheet, paste0("Wilcoxon test results for ", iv, " - Alternative hypothesis: less"), level = 2, startCol = 1)
1566816408917:xlsx.addTable(wb, sheet, wt_mod$less$result, startCol = 1, row.names = F)
1566816408917:}
1566816408918:if (max(wt_mod$greater$result$p.value) <= 0.05) {
1566816408918:xlsx.addLineBreak(sheet, 2)
1566816408918:xlsx.addHeader(wb, sheet, paste0("Wilcoxon test results for ", iv, " - Alternative hypothesis: greater"), level = 2, startCol = 1)
1566816408918:xlsx.addTable(wb, sheet, wt_mod$greater$result, startCol = 1, row.names = F)
1566816408919:}
1566816408919:}
1566816408919:}
1566816408920:}
1566816408920:## Function to write plots of wilcoxon test
1566816408921:write_wilcoxon_plots <- function(
1566816408921:set_wt_mods, ylab, title, path, override = T, ylim = NULL, levels = NULL) {
1566816408921:for (iv in names(set_wt_mods)) {
1566816408921:wt_mods <- set_wt_mods[[iv]]
1566816408921:for (i in 1:length(wt_mods)) {
1566816408922:wt_mod <- wt_mods[[i]]
1566816408922:filename <- paste0(iv, '_', names(wt_mods)[[i]], ".png")
1566816408922:filename <- gsub(':', '.', gsub('/', '', filename))
1566816408923:filename <- paste0(path, filename)
1566816408923:##
1566816408923:pair_names <- strsplit(names(wt_mods)[[i]], ':')[[1]]
1566816408924:## sorting levels
1566816408924:pair_levels <- NULL
1566816408924:if (!is.null(levels)) {
1566816408924:pair_levels <- c()
1566816408925:for (lvl in levels) {
1566816408925:pair_levels <- c(pair_levels, pair_names[grepl(lvl, pair_names)])
1566816408925:}
1566816408925:}
1566816408926:if (!file.exists(filename) || override) {
1566816408926:png(filename = filename, width = 640, height = 640)
1566816408926:plot_wilcox.test(wt_mod$two.sided, title = title, ylab = ylab, ylim = ylim, levels = pair_levels)
1566816408927:dev.off()
1566816408927:}
1566816408928:}
1566816408928:}
1566816408928:}
1566816408929:# Function to write
1566816408929:write_plots_for_nonparametric_test <- function(
1566816408929:n_result, ylab, title, path, override = T, ylim = NULL, levels = NULL) {
1566816408929:write_wilcoxon_plots(
1566816408930:n_result$wilcox.pairs, ylab = ylab, title = title, path = path
1566816408930:, override = override, ylim = ylim, levels = levels)
1566816408930:}
1566816408930:write_sch_summary_in_wb <- function(n_result, wb, title = "") {
1566816408931:library(r2excel)
1566816408931:sheet <- xlsx::createSheet(wb, sheetName = "NonParametricTest")
1566816408931:xlsx.addHeader(wb, sheet, paste0("Summary of ", n_result$mod$method, " for ", title), startCol = 1)
1566816408932:xlsx.addLineBreak(sheet, 2)
1566816408932:xlsx.addHeader(wb, sheet, paste0(n_result$mod$method," Table: ", n_result$formula.str), level = 2, startCol = 1)
1566816408932:xlsx.addTable(wb, sheet, as.data.frame(n_result$mod.df), startCol = 1, row.names = T)
1566816408933:xlsx.addLineBreak(sheet, 2)
1566816408933:xlsx.addHeader(wb, sheet, "Post-hoc Multiple test", level = 2, startCol = 1)
1566816408933:for (cname in names(n_result$post.hoc$mods)) {
1566816408933:mod <- n_result$post.hoc$mods[[cname]]
1566816408934:xlsx.addLineBreak(sheet, 1)
1566816408934:xlsx.addHeader(wb, sheet, paste0("Dunn's Kruskal-Wallis  (", mod$method, ") for ", cname), level = 3, startCol = 1)
1566816408934:xlsx.addTable(wb, sheet, as.data.frame(mod$res), startCol = 1, row.names = F)
1566816408934:}
1566816408935:}
1566816408935:## Function to write anova analysis report
1566816408935:write_nonparametric_test_report <- function(n_result, filename, title = "", ylab = "Score", override = T, data = NULL, ylim = NULL, levels = NULL) {
1566816408936:library(r2excel)
1566816408936:if (!file.exists(filename) || override) {
1566816408936:wb <- createWorkbook(type="xlsx")
1566816408936:write_sch_summary_in_wb(n_result, wb, title)
1566816408937:# write pair_wilcoxon
1566816408937:write_wts_summary_in_wb(n_result$wilcox.pairs, wb, title = title)
1566816408937:for (iv in names(n_result$wilcox.pairs)) {
1566816408937:wt_mods <- n_result$wilcox.pairs[[iv]]
1566816408938:for (i in 1:length(wt_mods)) {
1566816408938:write_wts_in_wb(wt_mods, wb, iv, i, title = title, ylab = ylab, ylim = ylim, levels = levels)
1566816408938:}
1566816408938:}
1566816408939:if (is.null(data)) data <- n_result$data
1566816408939:sheet <- xlsx::createSheet(wb, sheetName = "data")
1566816408939:xlsx.addTable(wb, sheet, as.data.frame(data), startCol = 1, row.names = F)
1566816408940:##
1566816408940:saveWorkbook(wb, filename)
1566816408940:}
1566816408941:}
1566816411102:wants <- c('coin', 'reshape', 'dplyr', 'r2excel', 'readr', 'rcompanion', 'FSA')
1566816411103:has   <- wants %in% rownames(installed.packages())
1566816411107:if(any(!has)) install.packages(wants[!has])
1566816411108:library(coin)
1566816411109:library(dplyr)
1566816411109:library(readr)
1566816411110:library(reshape)
1566816411110:library(r2excel)
1566816411111:library(rcomp)
1566816411112:library(rcompanion)
1566816411112:library(FSA)
1566816411113:## plot function of wilcox_analysiss
1566816411114:plot_wilcox.test <- function(
1566816411114:wt, title="", sub = NULL, ylab = NULL, notch = T
1566816411114:, inv.col = F, draw.conf.int = T, ylim = NULL, levels = NULL) {
1566816411115:x <- factor(wt$data$x)
1566816411116:y <- wt$data$y
1566816411116:pch1=16; pch2=17
1566816411117:pcol1=10; pcol2=4
1566816411117:pcol = c("white", "lightgrey")
1566816411117:if (inv.col) {
1566816411118:pch1 = 17; pch2 = 16
1566816411118:pcol1 = 4; pcol2 = 10
1566816411118:pcol = c("lightgrey", "white")
1566816411119:}
1566816411119:if (is.null(levels)) {
1566816411119:x <- factor(x)
1566816411120:} else x <- factor(x, levels = levels)
1566816411120:par(cex.main=1.5, cex.lab=1.25, cex.sub=1.25, cex.axis=1.25)
1566816411121:bp <- boxplot(y ~ x, boxwex=0.2, notch=notch, col=pcol, ylab=ylab, ylim = ylim)
1566816411121:title(title, sub = sub)
1566816411122:# drawing data as points
1566816411122:stripchart(y[x==levels(x)[1]], col=8, pch=pch1, add=T, at=0.7, cex=.7, method="jitter", vertical=T)
1566816411122:stripchart(y[x==levels(x)[2]], col=8, pch=pch2, add=T, at=1.7, cex=.7, method="jitter", vertical=T)
1566816411123:# drawing line wilcox conf.interval
1566816411124:if (draw.conf.int) {
1566816411124:wt <- tryCatch(wilcox.test(y[x==levels(x)[1]], conf.int=T), error = function(e) NULL)
1566816411124:if (!is.null(wt)) {
1566816411125:points(c(0.7,0.7,0.7), c(wt$conf.int, wt$estimate), pch="-", col=pcol1, cex=c(.9,.9,1.5))
1566816411125:lines(c(0.7,0.7), wt$conf.int, col=pcol1)
1566816411126:}
1566816411127:wt <- tryCatch(wilcox.test(y[x==levels(x)[2]], conf.int=T), error = function(e) NULL)
1566816411127:if (!is.null(wt)) {
1566816411128:points(c(1.7,1.7,1.7), c(wt$conf.int, wt$estimate), pch="-", col=pcol2, cex=c(.9,.9,1.5))
1566816411128:lines(c(1.7,1.7), wt$conf.int, col=pcol2)
1566816411129:}
1566816411129:}
1566816411130:}
1566816411131:## Function to get wilcox_module
1566816411132:get_wilcox_mod <- function(x, y,  alternative = "two.sided") {
1566816411132:library(coin)
1566816411133:x <- factor(x)
1566816411133:sdata <- data.frame(x=x, y=y, r=rank(y))
1566816411134:# wilcoxon values
1566816411134:wt <- wilcox.test(y ~ x, alternative = alternative, conf.int = FALSE)
1566816411134:U <- wt$statistic
1566816411135:wt <- wilcox_test(y ~ x, distribution="exact", conf.int = FALSE, alternative = alternative)
1566816411135:Z <- as.numeric(statistic(wt))
1566816411135:pvalue <- pvalue(wt)
1566816411136:r <- abs(Z/sqrt(length(x)))
1566816411136:magnitude <- 'none'
1566816411136:if (r >= 0.1 && r < 0.3) magnitude <- 'small'
1566816411137:if (r >= 0.3 && r < 0.5) magnitude <- 'medium'
1566816411137:if (r >= 0.5) magnitude <- 'large'
1566816411138:result <- data.frame(
1566816411138:"Group" = c(levels(x)[1], levels(x)[2])
1566816411138:, "N" = c(length(x[x==levels(x)[1]]), length(x[x==levels(x)[2]]))
1566816411139:, "Median" = c(median(sdata$y[sdata$x == levels(x)[1]]), median(sdata$y[sdata$x == levels(x)[2]]))
1566816411139:, "Mean Ranks" = c(mean(sdata$r[sdata$x == levels(x)[1]]), mean(sdata$r[sdata$x == levels(x)[2]]))
1566816411140:, "Sum Ranks" = c(sum(sdata$r[sdata$x == levels(x)[1]]), sum(sdata$r[sdata$x == levels(x)[2]]))
1566816411140:, "U" = c(U, U)
1566816411140:, "Z" = c(Z, Z)
1566816411141:, "p-value" = c(pvalue, pvalue)
1566816411141:, "r" = c(r, r)
1566816411142:, "magnitude" = c(magnitude, magnitude)
1566816411142:)
1566816411143:return(list(data = sdata, result = result))
1566816411143:}
1566816411144:## Function to get wilcox test modules
1566816411144:get_wilcox_mods <- function(dat, dv, iv, between) {
1566816411145:dat <- dat[complete.cases(dat[dv]),]
1566816411145:result <- list()
1566816411145:columns <- unique(c(iv, between[!between %in% iv]))
1566816411146:for (m in 1:length(columns)) {
1566816411146:comb_columns <- combn(columns, m, simplify = T)
1566816411146:for (i in 1:ncol(comb_columns)) {
1566816411147:selected_columns  <- comb_columns[,i]
1566816411147:if (selected_columns[[1]] != iv) next
1566816411147:cname <- paste0(selected_columns, collapse = ':')
1566816411147:factors <- factor(apply(dat[selected_columns], 1, paste, collapse='.'))
1566816411148:level_pairs <- combn(levels(factors), 2)
1566816411148:mods <- list()
1566816411149:for (j in 1:ncol(level_pairs)) {
1566816411149:level_pair <- level_pairs[,j]
1566816411150:rdat <- dat[factors %in% level_pair,]
1566816411165:y <- rdat[[dv]]
1566816411166:x <- factors[factors %in% level_pair]
1566816411168:wt_1 <- get_wilcox_mod(x, y, alternative = 'less')
1566816411169:wt_2 <- get_wilcox_mod(x, y, alternative = 'greater')
1566816411170:wt_3 <- get_wilcox_mod(x, y, alternative = 'two.sided')
1566816411171:mods[[paste0(level_pair, collapse = ':')]] <- list(dat = rdat, less = wt_1, greater = wt_2, two.sided = wt_3)
1566816411172:}
1566816411173:result[[cname]] <- mods
1566816411174:}
1566816411175:}
1566816411176:return(result)
1566816411177:}
1566816411180:## Function to perform the parametric test
1566816411180:# TODO: non-parametric test
1566816411180:do_nonparametric_test <- function(dat, wid, dv, iv, between, observed = NULL
1566816411181:, within = NULL, p_limit = 0.05, completed = F) {
1566816411182:library(rcompanion)
1566816411183:wdat <- dat
1566816411183:columns <- base::unique(c(iv, between, observed))
1566816411183:for (cname in columns) wdat[[cname]] <- factor(wdat[[cname]])
1566816411184:dv_tmp <- gsub('\\W', '', dv) # temporal name for dependent variable
1566816411184:wdat[[dv_tmp]] <- wdat[[dv]]
1566816411185:mod <- NULL
1566816411185:post_hoc <- NULL
1566816411185:formula_str <- paste(dv_tmp, "~", paste(columns, collapse = "+"))
1566816411186:if (length(columns) == 1) {
1566816411186:# get_Scheirer Kruskal
1566816411186:mod <- kruskal.test(as.formula(formula_str), data = wdat)
1566816411187:mod_df <- as.data.frame(list(`chi-square` = mod$statistic
1566816411187:, df = mod$parameter
1566816411187:, `p.value` = mod$p.value))
1566816411188:} else if (length(columns) == 2) {
1566816411188:# get_Scheirer Ray Hare test module
1566816411188:mod <- scheirerRayHare(formula = as.formula(formula_str), data = wdat)
1566816411189:mod_df <- as.data.frame(mod)
1566816411189:}
1566816411189:# Post.hoc Dunn test
1566816411190:dunn_mods <- list()
1566816411190:columns <- unique(c(iv, columns[!columns %in% iv]))
1566816411190:for (m in 1:length(columns)) {
1566816411191:comb_columns <- combn(columns, m, simplify = T)
1566816411192:for (i in 1:ncol(comb_columns)) {
1566816411192:selected_columns  <- comb_columns[,i]
1566816411192:#if (selected_columns[[1]] != iv) next
1566816411193:cname <- paste0(selected_columns, collapse = ':')
1566816411193:factors <- factor(apply(wdat[selected_columns], 1, paste, collapse='.'))
1566816411194:dunn_mods[[cname]] <- dunnTest(x = wdat[[dv_tmp]], g = factors, method = "bonferroni")
1566816411194:}
1566816411194:}
1566816411195:post_hoc <- list(mods = dunn_mods)
1566816411196:if (dv_tmp != dv) {
1566816411196:wdat <- wdat[ , !(names(wdat) %in% c(dv_tmp))]
1566816411196:}
1566816411197:set_wt_mods <- get_wilcox_mods(dat, dv = dv, iv = iv, between = between)
1566816411198:return(list(data = wdat, mod = mod, mod.df = mod_df, formula.str = formula_str
1566816411198:, post.hoc = post_hoc, wilcox.pairs = set_wt_mods))
1566816411198:}
1566816411199:##############################################################
1566816411200:## function to write wilcoxon test in sheet
1566816411200:write_wts_in_wb <- function(wt_mods, wb, iv, i, title = "", ylab = "Score", ylim = NULL, levels = NULL) {
1566816411200:library(r2excel)
1566816411201:wt_mod <- wt_mods[[i]]
1566816411201:sheet <- xlsx::createSheet(wb, sheetName = paste0(sub(':', '_', iv),"_", i))
1566816411201:xlsx.addHeader(wb, sheet, paste0("Wilcoxon Analysis for ", title, " in ", iv, " between ", names(wt_mods)[[i]], collapse = ''), startCol = 1)
1566816411202:xlsx.addLineBreak(sheet, 2)
1566816411202:xlsx.addHeader(wb, sheet, "Wilcoxon test results", level = 2, startCol = 1)
1566816411202:xlsx.addHeader(wb, sheet, "Alternative hypothesis: less", level = 3, startCol = 1)
1566816411202:xlsx.addTable(wb, sheet, wt_mod$less$result, startCol = 1, row.names = F)
1566816411203:xlsx.addHeader(wb, sheet, "Alternative hypothesis: greater", level = 3, startCol = 1)
1566816411203:xlsx.addTable(wb, sheet, wt_mod$greater$result, startCol = 1, row.names = F)
1566816411203:xlsx.addHeader(wb, sheet, "Alternative hypothesis: two.sided", level = 3, startCol = 1)
1566816411204:xlsx.addTable(wb, sheet, wt_mod$two.sided$result, startCol = 1, row.names = F)
1566816411204:xlsx.addLineBreak(sheet, 2)
1566816411205:xlsx.addHeader(wb, sheet, "Box plots for wilcoxon tests", level = 2, startCol = 1)
1566816411205:plotWT <- function() {
1566816411205:##
1566816411206:pair_names <- strsplit(names(wt_mods)[[i]], ':')[[1]]
1566816411206:## sorting levels
1566816411206:pair_levels <- NULL
1566816411207:if (!is.null(levels)) {
1566816411207:pair_levels <- c()
1566816411207:for (lvl in levels) {
1566816411208:pair_levels <- c(pair_levels, pair_names[grepl(lvl, pair_names)])
1566816411208:}
1566816411208:}
1566816411209:plot_wilcox.test(wt_mod$two.sided, title = title, ylab = ylab, ylim = ylim, levels = pair_levels)
1566816411209:}
1566816411210:xlsx.addPlot(wb, sheet, plotWT, width = 640, height = 640, startCol = 1)
1566816411211:xlsx.addLineBreak(sheet, 2)
1566816411211:xlsx.addHeader(wb, sheet, "Wilcoxon data", level = 2, startCol = 1)
1566816411211:xlsx.addTable(wb, sheet, as.data.frame(wt_mod$dat), startCol = 1, row.names = F)
1566816411212:}
1566816411213:## Function to write summary of set wt mods
1566816411213:write_wts_summary_in_wb <- function(set_wt_mods, wb, title = "") {
1566816411213:library(r2excel)
1566816411214:sheet <- xlsx::createSheet(wb, sheetName = "Summary")
1566816411214:xlsx.addHeader(wb, sheet, paste0("Summary of Wilcoxon Analysis for ", title, collapse = ''), startCol = 1)
1566816411214:for (iv in names(set_wt_mods)) {
1566816411214:wt_mods <- set_wt_mods[[iv]]
1566816411215:for (i in 1:length(wt_mods)) {
1566816411215:wt_mod <- wt_mods[[i]]
1566816411215:if (max(wt_mod$less$result$p.value) <= 0.05) {
1566816411216:xlsx.addLineBreak(sheet, 2)
1566816411216:xlsx.addHeader(wb, sheet, paste0("Wilcoxon test results for ", iv, " - Alternative hypothesis: less"), level = 2, startCol = 1)
1566816411216:xlsx.addTable(wb, sheet, wt_mod$less$result, startCol = 1, row.names = F)
1566816411216:}
1566816411217:if (max(wt_mod$greater$result$p.value) <= 0.05) {
1566816411217:xlsx.addLineBreak(sheet, 2)
1566816411217:xlsx.addHeader(wb, sheet, paste0("Wilcoxon test results for ", iv, " - Alternative hypothesis: greater"), level = 2, startCol = 1)
1566816411217:xlsx.addTable(wb, sheet, wt_mod$greater$result, startCol = 1, row.names = F)
1566816411218:}
1566816411218:}
1566816411218:}
1566816411219:}
1566816411219:## Function to write plots of wilcoxon test
1566816411219:write_wilcoxon_plots <- function(
1566816411220:set_wt_mods, ylab, title, path, override = T, ylim = NULL, levels = NULL) {
1566816411220:for (iv in names(set_wt_mods)) {
1566816411220:wt_mods <- set_wt_mods[[iv]]
1566816411220:for (i in 1:length(wt_mods)) {
1566816411221:wt_mod <- wt_mods[[i]]
1566816411221:filename <- paste0(iv, '_', names(wt_mods)[[i]], ".png")
1566816411221:filename <- gsub(':', '.', gsub('/', '', filename))
1566816411221:filename <- paste0(path, filename)
1566816411222:##
1566816411222:pair_names <- strsplit(names(wt_mods)[[i]], ':')[[1]]
1566816411222:## sorting levels
1566816411223:pair_levels <- NULL
1566816411223:if (!is.null(levels)) {
1566816411223:pair_levels <- c()
1566816411223:for (lvl in levels) {
1566816411224:pair_levels <- c(pair_levels, pair_names[grepl(lvl, pair_names)])
1566816411224:}
1566816411224:}
1566816411225:if (!file.exists(filename) || override) {
1566816411225:png(filename = filename, width = 640, height = 640)
1566816411225:plot_wilcox.test(wt_mod$two.sided, title = title, ylab = ylab, ylim = ylim, levels = pair_levels)
1566816411225:dev.off()
1566816411226:}
1566816411226:}
1566816411227:}
1566816411227:}
1566816411228:# Function to write
1566816411228:write_plots_for_nonparametric_test <- function(
1566816411228:n_result, ylab, title, path, override = T, ylim = NULL, levels = NULL) {
1566816411228:write_wilcoxon_plots(
1566816411228:n_result$wilcox.pairs, ylab = ylab, title = title, path = path
1566816411229:, override = override, ylim = ylim, levels = levels)
1566816411229:}
1566816411229:write_sch_summary_in_wb <- function(n_result, wb, title = "") {
1566816411229:library(r2excel)
1566816411230:sheet <- xlsx::createSheet(wb, sheetName = "NonParametricTest")
1566816411230:xlsx.addHeader(wb, sheet, paste0("Summary of ", n_result$mod$method, " for ", title), startCol = 1)
1566816411230:xlsx.addLineBreak(sheet, 2)
1566816411231:xlsx.addHeader(wb, sheet, paste0(n_result$mod$method," Table: ", n_result$formula.str), level = 2, startCol = 1)
1566816411231:xlsx.addTable(wb, sheet, as.data.frame(n_result$mod.df), startCol = 1, row.names = T)
1566816411231:xlsx.addLineBreak(sheet, 2)
1566816411232:xlsx.addHeader(wb, sheet, "Post-hoc Multiple test", level = 2, startCol = 1)
1566816411232:for (cname in names(n_result$post.hoc$mods)) {
1566816411232:mod <- n_result$post.hoc$mods[[cname]]
1566816411232:xlsx.addLineBreak(sheet, 1)
1566816411233:xlsx.addHeader(wb, sheet, paste0("Dunn's Kruskal-Wallis  (", mod$method, ") for ", cname), level = 3, startCol = 1)
1566816411233:xlsx.addTable(wb, sheet, as.data.frame(mod$res), startCol = 1, row.names = F)
1566816411233:}
1566816411233:}
1566816411234:## Function to write anova analysis report
1566816411234:write_nonparametric_test_report <- function(n_result, filename, title = "", ylab = "Score", override = T, data = NULL, ylim = NULL, levels = NULL) {
1566816411234:library(r2excel)
1566816411234:if (!file.exists(filename) || override) {
1566816411235:wb <- createWorkbook(type="xlsx")
1566816411235:write_sch_summary_in_wb(n_result, wb, title)
1566816411235:# write pair_wilcoxon
1566816411235:write_wts_summary_in_wb(n_result$wilcox.pairs, wb, title = title)
1566816411236:for (iv in names(n_result$wilcox.pairs)) {
1566816411236:wt_mods <- n_result$wilcox.pairs[[iv]]
1566816411236:for (i in 1:length(wt_mods)) {
1566816411236:write_wts_in_wb(wt_mods, wb, iv, i, title = title, ylab = ylab, ylim = ylim, levels = levels)
1566816411237:}
1566816411237:}
1566816411237:if (is.null(data)) data <- n_result$data
1566816411237:sheet <- xlsx::createSheet(wb, sheetName = "data")
1566816411238:xlsx.addTable(wb, sheet, as.data.frame(data), startCol = 1, row.names = F)
1566816411238:##
1566816411238:saveWorkbook(wb, filename)
1566816411239:}
1566816411239:}
1566816421384:wants <- c('coin', 'reshape', 'dplyr', 'r2excel', 'readr', 'rcompanion', 'FSA')
1566816421385:has   <- wants %in% rownames(installed.packages())
1566816421389:if(any(!has)) install.packages(wants[!has])
1566816421390:library(coin)
1566816421390:library(dplyr)
1566816421390:library(readr)
1566816421391:library(reshape)
1566816421392:library(r2excel)
1566816421392:library(rcomp)
1566816421393:library(rcompanion)
1566816421394:library(FSA)
1566816421394:## plot function of wilcox_analysiss
1566816421395:plot_wilcox.test <- function(
1566816421395:wt, title="", sub = NULL, ylab = NULL, notch = T
1566816421396:, inv.col = F, draw.conf.int = T, ylim = NULL, levels = NULL) {
1566816421397:x <- factor(wt$data$x)
1566816421397:y <- wt$data$y
1566816421398:pch1=16; pch2=17
1566816421398:pcol1=10; pcol2=4
1566816421399:pcol = c("white", "lightgrey")
1566816421399:if (inv.col) {
1566816421399:pch1 = 17; pch2 = 16
1566816421400:pcol1 = 4; pcol2 = 10
1566816421400:pcol = c("lightgrey", "white")
1566816421400:}
1566816421401:if (is.null(levels)) {
1566816421401:x <- factor(x)
1566816421401:} else x <- factor(x, levels = levels)
1566816421402:par(cex.main=1.5, cex.lab=1.25, cex.sub=1.25, cex.axis=1.25)
1566816421402:bp <- boxplot(y ~ x, boxwex=0.2, notch=notch, col=pcol, ylab=ylab, ylim = ylim)
1566816421403:title(title, sub = sub)
1566816421403:# drawing data as points
1566816421404:stripchart(y[x==levels(x)[1]], col=8, pch=pch1, add=T, at=0.7, cex=.7, method="jitter", vertical=T)
1566816421404:stripchart(y[x==levels(x)[2]], col=8, pch=pch2, add=T, at=1.7, cex=.7, method="jitter", vertical=T)
1566816421405:# drawing line wilcox conf.interval
1566816421405:if (draw.conf.int) {
1566816421406:wt <- tryCatch(wilcox.test(y[x==levels(x)[1]], conf.int=T), error = function(e) NULL)
1566816421406:if (!is.null(wt)) {
1566816421407:points(c(0.7,0.7,0.7), c(wt$conf.int, wt$estimate), pch="-", col=pcol1, cex=c(.9,.9,1.5))
1566816421407:lines(c(0.7,0.7), wt$conf.int, col=pcol1)
1566816421408:}
1566816421409:wt <- tryCatch(wilcox.test(y[x==levels(x)[2]], conf.int=T), error = function(e) NULL)
1566816421409:if (!is.null(wt)) {
1566816421410:points(c(1.7,1.7,1.7), c(wt$conf.int, wt$estimate), pch="-", col=pcol2, cex=c(.9,.9,1.5))
1566816421410:lines(c(1.7,1.7), wt$conf.int, col=pcol2)
1566816421411:}
1566816421411:}
1566816421412:}
1566816421413:## Function to get wilcox_module
1566816421413:get_wilcox_mod <- function(x, y,  alternative = "two.sided") {
1566816421413:library(coin)
1566816421414:x <- factor(x)
1566816421414:sdata <- data.frame(x=x, y=y, r=rank(y))
1566816421415:# wilcoxon values
1566816421415:wt <- wilcox.test(y ~ x, alternative = alternative, conf.int = FALSE)
1566816421415:U <- wt$statistic
1566816421416:wt <- wilcox_test(y ~ x, distribution="exact", conf.int = FALSE, alternative = alternative)
1566816421416:Z <- as.numeric(statistic(wt))
1566816421416:pvalue <- pvalue(wt)
1566816421416:r <- abs(Z/sqrt(length(x)))
1566816421417:magnitude <- 'none'
1566816421417:if (r >= 0.1 && r < 0.3) magnitude <- 'small'
1566816421417:if (r >= 0.3 && r < 0.5) magnitude <- 'medium'
1566816421418:if (r >= 0.5) magnitude <- 'large'
1566816421418:result <- data.frame(
1566816421419:"Group" = c(levels(x)[1], levels(x)[2])
1566816421419:, "N" = c(length(x[x==levels(x)[1]]), length(x[x==levels(x)[2]]))
1566816421419:, "Median" = c(median(sdata$y[sdata$x == levels(x)[1]]), median(sdata$y[sdata$x == levels(x)[2]]))
1566816421420:, "Mean Ranks" = c(mean(sdata$r[sdata$x == levels(x)[1]]), mean(sdata$r[sdata$x == levels(x)[2]]))
1566816421420:, "Sum Ranks" = c(sum(sdata$r[sdata$x == levels(x)[1]]), sum(sdata$r[sdata$x == levels(x)[2]]))
1566816421421:, "U" = c(U, U)
1566816421421:, "Z" = c(Z, Z)
1566816421421:, "p-value" = c(pvalue, pvalue)
1566816421422:, "r" = c(r, r)
1566816421422:, "magnitude" = c(magnitude, magnitude)
1566816421423:)
1566816421423:return(list(data = sdata, result = result))
1566816421424:}
1566816421425:## Function to get wilcox test modules
1566816421425:get_wilcox_mods <- function(dat, dv, iv, between) {
1566816421425:dat <- dat[complete.cases(dat[dv]),]
1566816421426:result <- list()
1566816421426:columns <- unique(c(iv, between[!between %in% iv]))
1566816421427:for (m in 1:length(columns)) {
1566816421427:comb_columns <- combn(columns, m, simplify = T)
1566816421427:for (i in 1:ncol(comb_columns)) {
1566816421427:selected_columns  <- comb_columns[,i]
1566816421428:if (selected_columns[[1]] != iv) next
1566816421428:cname <- paste0(selected_columns, collapse = ':')
1566816421430:factors <- factor(apply(dat[selected_columns], 1, paste, collapse='.'))
1566816421430:level_pairs <- combn(levels(factors), 2)
1566816421455:mods <- list()
1566816421456:for (j in 1:ncol(level_pairs)) {
1566816421458:level_pair <- level_pairs[,j]
1566816421460:rdat <- dat[factors %in% level_pair,]
1566816421461:y <- rdat[[dv]]
1566816421462:x <- factors[factors %in% level_pair]
1566816421464:wt_1 <- get_wilcox_mod(x, y, alternative = 'less')
1566816421466:wt_2 <- get_wilcox_mod(x, y, alternative = 'greater')
1566816421467:wt_3 <- get_wilcox_mod(x, y, alternative = 'two.sided')
1566816421469:mods[[paste0(level_pair, collapse = ':')]] <- list(dat = rdat, less = wt_1, greater = wt_2, two.sided = wt_3)
1566816421471:}
1566816421473:result[[cname]] <- mods
1566816421475:}
1566816421476:}
1566816421476:return(result)
1566816421477:}
1566816421480:## Function to perform the parametric test
1566816421480:# TODO: non-parametric test
1566816421480:do_nonparametric_test <- function(dat, wid, dv, iv, between, observed = NULL
1566816421481:, within = NULL, p_limit = 0.05, completed = F) {
1566816421482:library(rcompanion)
1566816421482:wdat <- dat
1566816421483:columns <- base::unique(c(iv, between, observed))
1566816421483:for (cname in columns) wdat[[cname]] <- factor(wdat[[cname]])
1566816421484:dv_tmp <- gsub('\\W', '', dv) # temporal name for dependent variable
1566816421484:wdat[[dv_tmp]] <- wdat[[dv]]
1566816421485:mod <- NULL
1566816421485:post_hoc <- NULL
1566816421486:formula_str <- paste(dv_tmp, "~", paste(columns, collapse = "+"))
1566816421486:if (length(columns) == 1) {
1566816421486:# get_Scheirer Kruskal
1566816421487:mod <- kruskal.test(as.formula(formula_str), data = wdat)
1566816421487:mod_df <- as.data.frame(list(`chi-square` = mod$statistic
1566816421488:, df = mod$parameter
1566816421488:, `p.value` = mod$p.value))
1566816421489:} else if (length(columns) == 2) {
1566816421489:# get_Scheirer Ray Hare test module
1566816421489:mod <- scheirerRayHare(formula = as.formula(formula_str), data = wdat)
1566816421490:mod_df <- as.data.frame(mod)
1566816421490:}
1566816421491:# Post.hoc Dunn test
1566816421491:dunn_mods <- list()
1566816421492:columns <- unique(c(iv, columns[!columns %in% iv]))
1566816421492:for (m in 1:length(columns)) {
1566816421493:comb_columns <- combn(columns, m, simplify = T)
1566816421493:for (i in 1:ncol(comb_columns)) {
1566816421494:selected_columns  <- comb_columns[,i]
1566816421494:#if (selected_columns[[1]] != iv) next
1566816421495:cname <- paste0(selected_columns, collapse = ':')
1566816421495:factors <- factor(apply(wdat[selected_columns], 1, paste, collapse='.'))
1566816421496:dunn_mods[[cname]] <- dunnTest(x = wdat[[dv_tmp]], g = factors, method = "bonferroni")
1566816421496:}
1566816421497:}
1566816421497:post_hoc <- list(mods = dunn_mods)
1566816421498:if (dv_tmp != dv) {
1566816421498:wdat <- wdat[ , !(names(wdat) %in% c(dv_tmp))]
1566816421499:}
1566816421499:set_wt_mods <- get_wilcox_mods(dat, dv = dv, iv = iv, between = between)
1566816421500:return(list(data = wdat, mod = mod, mod.df = mod_df, formula.str = formula_str
1566816421500:, post.hoc = post_hoc, wilcox.pairs = set_wt_mods))
1566816421501:}
1566816421502:##############################################################
1566816421502:## function to write wilcoxon test in sheet
1566816421502:write_wts_in_wb <- function(wt_mods, wb, iv, i, title = "", ylab = "Score", ylim = NULL, levels = NULL) {
1566816421503:library(r2excel)
1566816421503:wt_mod <- wt_mods[[i]]
1566816421503:sheet <- xlsx::createSheet(wb, sheetName = paste0(sub(':', '_', iv),"_", i))
1566816421504:xlsx.addHeader(wb, sheet, paste0("Wilcoxon Analysis for ", title, " in ", iv, " between ", names(wt_mods)[[i]], collapse = ''), startCol = 1)
1566816421504:xlsx.addLineBreak(sheet, 2)
1566816421504:xlsx.addHeader(wb, sheet, "Wilcoxon test results", level = 2, startCol = 1)
1566816421505:xlsx.addHeader(wb, sheet, "Alternative hypothesis: less", level = 3, startCol = 1)
1566816421505:xlsx.addTable(wb, sheet, wt_mod$less$result, startCol = 1, row.names = F)
1566816421505:xlsx.addHeader(wb, sheet, "Alternative hypothesis: greater", level = 3, startCol = 1)
1566816421506:xlsx.addTable(wb, sheet, wt_mod$greater$result, startCol = 1, row.names = F)
1566816421506:xlsx.addHeader(wb, sheet, "Alternative hypothesis: two.sided", level = 3, startCol = 1)
1566816421506:xlsx.addTable(wb, sheet, wt_mod$two.sided$result, startCol = 1, row.names = F)
1566816421507:xlsx.addLineBreak(sheet, 2)
1566816421507:xlsx.addHeader(wb, sheet, "Box plots for wilcoxon tests", level = 2, startCol = 1)
1566816421508:plotWT <- function() {
1566816421508:##
1566816421508:pair_names <- strsplit(names(wt_mods)[[i]], ':')[[1]]
1566816421509:## sorting levels
1566816421509:pair_levels <- NULL
1566816421509:if (!is.null(levels)) {
1566816421510:pair_levels <- c()
1566816421510:for (lvl in levels) {
1566816421510:pair_levels <- c(pair_levels, pair_names[grepl(lvl, pair_names)])
1566816421511:}
1566816421511:}
1566816421512:plot_wilcox.test(wt_mod$two.sided, title = title, ylab = ylab, ylim = ylim, levels = pair_levels)
1566816421512:}
1566816421513:xlsx.addPlot(wb, sheet, plotWT, width = 640, height = 640, startCol = 1)
1566816421513:xlsx.addLineBreak(sheet, 2)
1566816421514:xlsx.addHeader(wb, sheet, "Wilcoxon data", level = 2, startCol = 1)
1566816421514:xlsx.addTable(wb, sheet, as.data.frame(wt_mod$dat), startCol = 1, row.names = F)
1566816421515:}
1566816421516:## Function to write summary of set wt mods
1566816421516:write_wts_summary_in_wb <- function(set_wt_mods, wb, title = "") {
1566816421516:library(r2excel)
1566816421517:sheet <- xlsx::createSheet(wb, sheetName = "Summary")
1566816421517:xlsx.addHeader(wb, sheet, paste0("Summary of Wilcoxon Analysis for ", title, collapse = ''), startCol = 1)
1566816421517:for (iv in names(set_wt_mods)) {
1566816421518:wt_mods <- set_wt_mods[[iv]]
1566816421518:for (i in 1:length(wt_mods)) {
1566816421518:wt_mod <- wt_mods[[i]]
1566816421518:if (max(wt_mod$less$result$p.value) <= 0.05) {
1566816421519:xlsx.addLineBreak(sheet, 2)
1566816421519:xlsx.addHeader(wb, sheet, paste0("Wilcoxon test results for ", iv, " - Alternative hypothesis: less"), level = 2, startCol = 1)
1566816421519:xlsx.addTable(wb, sheet, wt_mod$less$result, startCol = 1, row.names = F)
1566816421520:}
1566816421520:if (max(wt_mod$greater$result$p.value) <= 0.05) {
1566816421520:xlsx.addLineBreak(sheet, 2)
1566816421520:xlsx.addHeader(wb, sheet, paste0("Wilcoxon test results for ", iv, " - Alternative hypothesis: greater"), level = 2, startCol = 1)
1566816421521:xlsx.addTable(wb, sheet, wt_mod$greater$result, startCol = 1, row.names = F)
1566816421521:}
1566816421521:}
1566816421522:}
1566816421522:}
1566816421523:## Function to write plots of wilcoxon test
1566816421523:write_wilcoxon_plots <- function(
1566816421523:set_wt_mods, ylab, title, path, override = T, ylim = NULL, levels = NULL) {
1566816421523:for (iv in names(set_wt_mods)) {
1566816421524:wt_mods <- set_wt_mods[[iv]]
1566816421524:for (i in 1:length(wt_mods)) {
1566816421524:wt_mod <- wt_mods[[i]]
1566816421524:filename <- paste0(iv, '_', names(wt_mods)[[i]], ".png")
1566816421525:filename <- gsub(':', '.', gsub('/', '', filename))
1566816421525:filename <- paste0(path, filename)
1566816421526:##
1566816421526:pair_names <- strsplit(names(wt_mods)[[i]], ':')[[1]]
1566816421526:## sorting levels
1566816421526:pair_levels <- NULL
1566816421527:if (!is.null(levels)) {
1566816421527:pair_levels <- c()
1566816421527:for (lvl in levels) {
1566816421527:pair_levels <- c(pair_levels, pair_names[grepl(lvl, pair_names)])
1566816421528:}
1566816421528:}
1566816421528:if (!file.exists(filename) || override) {
1566816421529:png(filename = filename, width = 640, height = 640)
1566816421529:plot_wilcox.test(wt_mod$two.sided, title = title, ylab = ylab, ylim = ylim, levels = pair_levels)
1566816421529:dev.off()
1566816421530:}
1566816421530:}
1566816421530:}
1566816421531:}
1566816421531:# Function to write
1566816421532:write_plots_for_nonparametric_test <- function(
1566816421532:n_result, ylab, title, path, override = T, ylim = NULL, levels = NULL) {
1566816421532:write_wilcoxon_plots(
1566816421532:n_result$wilcox.pairs, ylab = ylab, title = title, path = path
1566816421532:, override = override, ylim = ylim, levels = levels)
1566816421533:}
1566816421533:write_sch_summary_in_wb <- function(n_result, wb, title = "") {
1566816421533:library(r2excel)
1566816421534:sheet <- xlsx::createSheet(wb, sheetName = "NonParametricTest")
1566816421534:xlsx.addHeader(wb, sheet, paste0("Summary of ", n_result$mod$method, " for ", title), startCol = 1)
1566816421534:xlsx.addLineBreak(sheet, 2)
1566816421535:xlsx.addHeader(wb, sheet, paste0(n_result$mod$method," Table: ", n_result$formula.str), level = 2, startCol = 1)
1566816421535:xlsx.addTable(wb, sheet, as.data.frame(n_result$mod.df), startCol = 1, row.names = T)
1566816421535:xlsx.addLineBreak(sheet, 2)
1566816421536:xlsx.addHeader(wb, sheet, "Post-hoc Multiple test", level = 2, startCol = 1)
1566816421536:for (cname in names(n_result$post.hoc$mods)) {
1566816421536:mod <- n_result$post.hoc$mods[[cname]]
1566816421536:xlsx.addLineBreak(sheet, 1)
1566816421537:xlsx.addHeader(wb, sheet, paste0("Dunn's Kruskal-Wallis  (", mod$method, ") for ", cname), level = 3, startCol = 1)
1566816421537:xlsx.addTable(wb, sheet, as.data.frame(mod$res), startCol = 1, row.names = F)
1566816421537:}
1566816421538:}
1566816421538:## Function to write anova analysis report
1566816421538:write_nonparametric_test_report <- function(n_result, filename, title = "", ylab = "Score", override = T, data = NULL, ylim = NULL, levels = NULL) {
1566816421539:library(r2excel)
1566816421539:if (!file.exists(filename) || override) {
1566816421539:wb <- createWorkbook(type="xlsx")
1566816421539:write_sch_summary_in_wb(n_result, wb, title)
1566816421540:# write pair_wilcoxon
1566816421540:write_wts_summary_in_wb(n_result$wilcox.pairs, wb, title = title)
1566816421540:for (iv in names(n_result$wilcox.pairs)) {
1566816421540:wt_mods <- n_result$wilcox.pairs[[iv]]
1566816421541:for (i in 1:length(wt_mods)) {
1566816421541:write_wts_in_wb(wt_mods, wb, iv, i, title = title, ylab = ylab, ylim = ylim, levels = levels)
1566816421541:}
1566816421541:}
1566816421542:if (is.null(data)) data <- n_result$data
1566816421542:sheet <- xlsx::createSheet(wb, sheetName = "data")
1566816421542:xlsx.addTable(wb, sheet, as.data.frame(data), startCol = 1, row.names = F)
1566816421543:##
1566816421543:saveWorkbook(wb, filename)
1566816421543:}
1566816421544:}
1566816430107:wants <- c('libcoin')
1566816430390:has   <- wants %in% rownames(installed.packages())
1566816430515:if(any(!has)) install.packages(wants[!has])
1566816430517:wants <- c('usethis', 'httr', 'coin', 'sirt', 'lavaan', 'psych', 'nloptr', 'reshape', 'dplyr'
1566816430518:, 'readr', 'effsize','pwr', 'afex', 'lme4', 'ez', 'r2excel')
1566816430519:has   <- wants %in% rownames(installed.packages())
1566816430526:if(any(!has)) install.packages(wants[!has])
1566816430526:#devtools::install_github("singmann/afex@master")
1566816430527:library(afex)
1566816431113:#############################################################################
1566816431114:## Functions to carried out normality test                                 ##
1566816431114:#############################################################################
1566816431115:## get aov_assumption
1566816431115:get_aov_assumption <- function(name, dat, wid, dv, iv, between, observed = NULL
1566816431115:, within = NULL, p_limit = 0.05) {
1566816431116:library(car)
1566816431116:library(afex)
1566816431116:library(dplyr)
1566816431117:library(stats)
1566816431117:library(ez)
1566816431118:## get wide data
1566816431118:row_positions <- as.numeric(strsplit(name,"[+]")[[1]])
1566816431118:wdat <- dat[c(row_positions),]
1566816431119:columns <- base::unique(c(iv, between, observed))
1566816431119:for (cname in columns) {
1566816431119:if (class(wdat[[cname]]) != "numeric") {
1566816431120:wdat[[cname]] <- factor(wdat[[cname]])
1566816431120:}
1566816431121:}
1566816431122:rownames(wdat) <- wdat[[wid]]
1566816431122:# get module of test mimimun size
1566816431123:tms_mod <- test_min_size_mod(wdat, iv, between, observed, type = 'parametric')
1566816431123:if (tms_mod$balanced) type <- 2 else type <- 3
1566816431123:# validate normality
1566816431124:ezAov <- aov_ez(data = wdat, id = wid, dv = dv, between = between, within = within
1566816431124:, observed = observed, type = type, print.formula = F, factorize = F)
1566816431124:normality.fail <- F
1566816431125:shapiro_mod <- shapiro.test(ezAov$aov$residuals) # normality
1566816431125:shapiro_pvalue <- shapiro_mod$p.value
1566816431126:if (shapiro_pvalue <= p_limit) {
1566816431126:normality.fail <- T
1566816431126:}
1566816431127:## get aov and formula
1566816431127:formula_str <- paste(paste0('`',dv,'`'), "~", paste(c(between, within), collapse = "*"),
1566816431128:if (length(within) > 0) paste0("+Error(", wid, "/(", paste(within, collapse = "*"), "))") else NULL)
1566816431128:formula_aov <- as.formula(formula_str)
1566816431129:## homogeneity test
1566816431129:homogeneity.fail <- F
1566816431130:levene_mod <- leveneTest(formula_aov, data = wdat) # homogeneity
1566816431130:levene_pvalue <- levene_mod$`Pr(>F)`[[1]]
1566816431131:if (levene_pvalue <= p_limit) {
1566816431131:homogeneity.fail <- T
1566816431131:}
1566816431132:df.homogeneity.fail <- sapply(base::unique(c(iv, between, observed)), function(x) {
1566816431133:levene_mod <- leveneTest(as.formula(paste0('`',dv,'`', " ~ ", x)), data = wdat)
1566816431133:levene_pvalue <- levene_mod$`Pr(>F)`[[1]]
1566816431134:return(levene_pvalue <= p_limit)
1566816431134:})
1566816431134:names(df.homogeneity.fail) <- paste0("homogeneity.fail.",names(df.homogeneity.fail))
1566816431135:return (data.frame(name = name, normality.fail = normality.fail, homogeneity.fail = homogeneity.fail, as.list(df.homogeneity.fail)))
1566816431136:}
1566816431137:generate_file_aov_assumptions <- function(
1566816431137:i, dat
1566816431137:, wid="UserID", dv, iv, between = c()
1566816431138:, path
1566816431138:, pos_file_aov_assumptions_str = "aov_assumptions.RData"
1566816431138:, mc.cores = 0) {
1566816431139:if (!file.exists(paste0(path,"/","f_",i,"_",pos_file_aov_assumptions_str))) {
1566816431139:low <- 1
1566816431139:limit <- RcppAlgos::comboCount(nrow(dat), i)
1566816431140:repeat {
1566816431140:upp <- low + 1999
1566816431140:if (upp > limit) { upp <- limit }
1566816431141:#
1566816431141:cat("\n", "Generating: ", i, " from ", low, " to ", upp, " until to ", limit,"\n")
1566816431141:file_aov_assumptions_str <- paste0(path,"/",'f_',i,'_',low,'_',upp,'_',pos_file_aov_assumptions_str)
1566816431142:if (file.exists(file_aov_assumptions_str)) {
1566816431142:low <- low + 2000
1566816431142:if (low >= limit) {
1566816431143:df_assumptions <- do.call(
1566816431143:rbind
1566816431143:, lapply(Sys.glob(paste0(path,"/","f_",i,"_*_",pos_file_aov_assumptions_str))
1566816431143:, function(file_name) {
1566816431144:return(get(load(file_name)))
1566816431144:}))
1566816431144:save(df_assumptions, file = paste0(path,"/","f_",i,"_",pos_file_aov_assumptions_str))
1566816431145:file.remove(Sys.glob(paste0(path,"/","f_",i,"_*_",pos_file_aov_assumptions_str)))
1566816431145:break;
1566816431146:}
1566816431146:next;
1566816431146:}
1566816431147:#
1566816431147:generated_names <- list()
1566816431148:tindex <- RcppAlgos::comboGeneral(nrow(dat), i, lower = low, upper = upp)
1566816431148:for (j in 1:nrow(tindex)) {
1566816431148:nindex <- paste0(c(tindex[j,]), collapse = "+")
1566816431149:generated_names[[nindex]] <- nindex
1566816431149:}
1566816431150:if (!is.null(mc.cores) && mc.cores > 1) {
1566816431150:library(parallel)
1566816431150:options(mc.cores=mc.cores)
1566816431151:result <- do.call(rbind, mclapply(generated_names, get_aov_assumption, dat=dat
1566816431151:, wid=wid, dv=dv, iv=iv, between = between))
1566816431151:} else {
1566816431152:result <- do.call(rbind, lapply(generated_names, get_aov_assumption, dat=dat
1566816431152:, wid=wid, dv=dv, iv=iv, between = between))
1566816431153:}
1566816431153:save(result, file = file_aov_assumptions_str)
1566816431154:#
1566816431154:if (upp >= limit) {
1566816431155:df_assumptions <- do.call(
1566816431155:rbind
1566816431155:, lapply(Sys.glob(paste0(path,"/","f_",i,"_*_",pos_file_aov_assumptions_str))
1566816431156:, function(file_name) {
1566816431156:return(get(load(file_name)))
1566816431157:}))
1566816431157:save(df_assumptions, file = paste0(path,"/","f_",i,"_",pos_file_aov_assumptions_str))
1566816431158:file.remove(Sys.glob(paste0(path,"/","f_",i,"_*_",pos_file_aov_assumptions_str)))
1566816431158:break;
1566816431159:}
1566816431159:low <- low + 2000
1566816431160:}
1566816431160:}
1566816431160:}
1566816431161:get_dataframe_assumptions <- function(dat, dv, iv, between, path, from=nrow(dat)-5, to = nrow(dat), wid="UserID", generate = T, mc.cores = 0) {
1566816431162:pos_file_aov_assumptions_str = "aov_assumptions.RData"
1566816431162:dir.create(path, showWarnings = F)
1566816431162:ilist <- as.list(c(to:from))
1566816431163:names(ilist) <- c(from:from)
1566816431163:if (generate) {
1566816431163:if (!is.null(mc.cores) && mc.cores > 1) {
1566816431164:library(parallel)
1566816431164:options(mc.cores=mc.cores)
1566816431164:mclapply(ilist, generate_file_aov_assumptions, dat
1566816431164:, wid=wid, dv=dv, iv=iv, between = between, path = path
1566816431165:, pos_file_aov_assumptions_str = pos_file_aov_assumptions_str, mc.cores = mc.cores)
1566816431165:} else {
1566816431165:lapply(ilist, generate_file_aov_assumptions, dat
1566816431165:, wid=wid, dv=dv, iv=iv, between = between, path = path
1566816431166:, pos_file_aov_assumptions_str = pos_file_aov_assumptions_str)
1566816431166:}
1566816431166:}
1566816431167:file_list <- c()
1566816431167:for (k in names(ilist)) {
1566816431167:file_list <- c(file_list,Sys.glob(paste0(path,"/","f_",k,"_",pos_file_aov_assumptions_str)))
1566816431168:file_list <- c(file_list,Sys.glob(paste0(path,"/","f_",k,"_*_",pos_file_aov_assumptions_str)))
1566816431168:}
1566816431168:df_assumptions <- do.call(
1566816431168:rbind
1566816431169:, lapply(file_list, function(file_name) { return(get(load(file_name))) }))
1566816431169:return(df_assumptions)
1566816431169:}
1566816431170:#############################################################################
1566816431170:## Functions to performs ANOVA and t-test                                  ##
1566816431170:#############################################################################
1566816431171:## Function to get ids for anova
1566816431171:get_winsorized_values <- function(
1566816431171:dat, wid, dv, iv, between, observed = NULL, only.first.level = T) {
1566816431172:## wide data and factorize
1566816431172:wdat <- dat
1566816431172:columns <- base::unique(c(iv, between, observed))
1566816431172:for (cname in columns) {
1566816431172:if (class(wdat[[cname]]) != "numeric") {
1566816431173:wdat[[cname]] <- factor(wdat[[cname]])
1566816431173:}
1566816431173:}
1566816431173:rownames(wdat) <- wdat[[wid]]
1566816431174:columns <- unique(c(iv, columns[!columns %in% iv]))
1566816431174:for (m in 1:length(columns)) {
1566816431174:comb_columns <- combn(columns, m, simplify = T)
1566816431175:for (i in 1:ncol(comb_columns)) {
1566816431175:selected_columns  <- comb_columns[,i]
1566816431175:if (selected_columns[[1]] != iv) next
1566816431176:cname <- paste0(selected_columns, collapse = ':')
1566816431176:factors <- factor(apply(wdat[selected_columns], 1, paste, collapse='.'))
1566816431176:level_pairs <- combn(levels(factors), 2)
1566816431177:for (j in 1:ncol(level_pairs)) {
1566816431177:level_pair <- level_pairs[,j]
1566816431177:rdat2 <- wdat[factors %in% level_pair,]
1566816431178:repeat {
1566816431178:y <- rdat2[[dv]]
1566816431178:x <- factors[factors %in% level_pair]
1566816431179:out_x1 <- x[x == level_pair[[1]]]
1566816431179:out_x2 <- x[x == level_pair[[2]]]
1566816431180:if (length(out_x1) < 3 || length(out_x2) < 3) break
1566816431180:out_yA <- y[x == level_pair[[1]]]
1566816431180:out_yB <- y[x == level_pair[[2]]]
1566816431181:out_y1 <- robustHD::winsorize(y[x == level_pair[[1]]])
1566816431181:out_y2 <- robustHD::winsorize(y[x == level_pair[[2]]])
1566816431182:if (any(is.na(out_y1)) || any(is.na(out_y2))) break
1566816431183:idx1 <- round(out_yA,3) != round(out_y1,3)
1566816431183:idx2 <- round(out_yB,3) != round(out_y2,3)
1566816431184:#
1566816431184:wids1 <- attributes(out_x1[idx1])$names
1566816431184:wids2 <- attributes(out_x2[idx2])$names
1566816431185:if (length(wids1) > 0) {
1566816431185:for (k in 1:length(wids1)) {
1566816431185:wid1 <- wids1[[k]]
1566816431186:wdat[wid1,dv] <- out_y1[idx1][[k]]
1566816431186:}
1566816431186:}
1566816431187:if (length(wids2) > 0) {
1566816431187:for (k in 1:length(wids2)) {
1566816431187:wid2 <- wids2[[k]]
1566816431188:wdat[wid2,dv] <- out_y2[idx2][[k]]
1566816431188:}
1566816431189:}
1566816431189:if (only.first.level) break
1566816431190:}
1566816431190:}
1566816431190:}
1566816431191:}
1566816431191:return(wdat)
1566816431192:}
1566816431193:## Function to get ids for anova
1566816431193:get_ids_outliers <- function(
1566816431193:dat, wid, dv, iv, between, observed = NULL, only.first.level = T) {
1566816431194:## wide data and factorize
1566816431194:wdat <- dat
1566816431194:columns <- base::unique(c(iv, between, observed))
1566816431194:for (cname in columns) {
1566816431194:if (class(wdat[[cname]]) != "numeric") {
1566816431195:wdat[[cname]] <- factor(wdat[[cname]])
1566816431195:}
1566816431195:}
1566816431195:rownames(wdat) <- wdat[[wid]]
1566816431196:set_rm_ids <- c()
1566816431196:columns <- unique(c(iv, columns[!columns %in% iv]))
1566816431196:for (m in 1:length(columns)) {
1566816431196:comb_columns <- combn(columns, m, simplify = T)
1566816431197:for (i in 1:ncol(comb_columns)) {
1566816431197:selected_columns  <- comb_columns[,i]
1566816431197:if (selected_columns[[1]] != iv) next
1566816431198:cname <- paste0(selected_columns, collapse = ':')
1566816431198:factors <- factor(apply(wdat[selected_columns], 1, paste, collapse='.'))
1566816431198:level_pairs <- combn(levels(factors), 2)
1566816431199:for (j in 1:ncol(level_pairs)) {
1566816431199:rm_ids <- c()
1566816431199:level_pair <- level_pairs[,j]
1566816431200:rdat2 <- wdat[factors %in% level_pair,]
1566816431200:repeat {
1566816431201:y <- rdat2[[dv]][!rdat2[[wid]] %in% rm_ids]
1566816431201:x <- factors[factors %in% level_pair][!rdat2[[wid]] %in% rm_ids]
1566816431201:out_y1 <- boxplot(y[x == level_pair[[1]]], plot = F)$out
1566816431202:out_y2 <- boxplot(y[x == level_pair[[2]]], plot = F)$out
1566816431202:out_y <- unique(c(out_y1, out_y2))
1566816431202:if (length(out_y) == 0) break
1566816431203:rm_ids <- unique(c(rm_ids, rdat2[[wid]][rdat2[[dv]] %in% c(out_y)]))
1566816431203:if (only.first.level) break
1566816431204:}
1566816431204:set_rm_ids <- c(set_rm_ids, rm_ids)
1566816431205:}
1566816431205:}
1566816431205:}
1566816431206:return(unique(set_rm_ids))
1566816431206:}
1566816431207:## Function to get t.test module
1566816431207:get_t.test_mod <- function(x, y, alternative = "two.sided") {
1566816431208:library(stats)
1566816431208:library(effsize)
1566816431208:x <- factor(x)
1566816431208:sdata <- data.frame(x=x, y=y)
1566816431209:# t.test values
1566816431209:t_mod <- t.test(y ~ x, alternative = alternative, data = sdata)
1566816431209:df <- as.numeric(t_mod$parameter)
1566816431209:t_value <- as.numeric(t_mod$statistic)
1566816431210:pvalue <- t_mod$p.value
1566816431210:numbers <- c(length(x[x==levels(x)[1]]), length(x[x==levels(x)[2]]))
1566816431210:means <- c(mean(sdata$y[sdata$x == levels(x)[1]]), mean(sdata$y[sdata$x == levels(x)[2]]))
1566816431211:means_diff <- c(means[1]-means[2], means[2]-means[1])
1566816431211:std_deviation <- c(sd(sdata$y[sdata$x == levels(x)[1]]), sd(sdata$y[sdata$x == levels(x)[2]]))
1566816431211:sems <- std_deviation/sqrt(numbers)
1566816431212:effectsize_mod <- effsize::cohen.d(sdata$y[sdata$x == levels(x)[1]], sdata$y[sdata$x == levels(x)[2]], hedges.correction = T)
1566816431212:magnitudes <- c(as.character(effectsize_mod$magnitude), as.character(effectsize_mod$magnitude))
1566816431212:result <- data.frame(
1566816431213:"Group" = c(levels(x)[1], levels(x)[2])
1566816431213:, "N" = numbers
1566816431213:, "Mean" = means
1566816431214:, "Mean Difference" = means_diff
1566816431214:, "Std.deviation" = std_deviation
1566816431214:, "Std.error" = sems
1566816431214:, "CI.lower" = c(means-2*sems)
1566816431215:, "CI.upper" = c(means+2*sems)
1566816431215:, "df" = c(df, df)
1566816431215:, "t-value" = c(t_value, t_value)
1566816431216:, "p-value" = c(pvalue, pvalue)
1566816431216:, "g" = c(effectsize_mod$estimate, effectsize_mod$estimate)
1566816431216:, "magnitude" = magnitudes
1566816431217:)
1566816431217:return(list(data = sdata, result = result))
1566816431218:}
1566816431218:## Funtion to perform test of sample size
1566816431219:test_min_size_mod <- function(data, iv, between, observed, type = 'parametric') {
1566816431219:library(dplyr)
1566816431219:library(stats)
1566816431219:columns <- base::unique(c(iv, between, observed))
1566816431220:if (length(columns) <= 1) return(NULL)
1566816431220:tb_size <- xtabs(as.formula(paste0('~', paste0(columns, collapse = '+'))), data = data)
1566816431220:n_groups <- prod(dim(tb_size))
1566816431221:fail <- FALSE
1566816431221:balanced <- FALSE
1566816431221:codes <- c()
1566816431221:descriptions <- c()
1566816431222:error_warning_list <- c()
1566816431222:minimal_size <- 5
1566816431222:recomended_size <- ifelse(n_groups > 10, 20, 15)
1566816431223:tf_size <- as.data.frame(ftable(tb_size))
1566816431223:if (max(tf_size$Freq) == min(tf_size$Freq)) {
1566816431223:balanced <- TRUE
1566816431223:}
1566816431224:for (i in 1:nrow(tf_size)) {
1566816431224:csize <- tf_size$Freq[i]
1566816431225:name_group <- apply(as.vector(within(tf_size, rm('Freq'))[i,]), 1, paste, collapse =':')
1566816431225:name_group <- as.character(name_group)
1566816431225:if (csize < minimal_size) {
1566816431226:fail <- TRUE
1566816431226:descriptions <- c(descriptions, paste0(
1566816431226:"current size is ", csize, " but the minimal recomended size is ", minimal_size
1566816431227:, " for the group: '", name_group, "'."))
1566816431227:codes <- c(codes, "FAIL: min.size")
1566816431227:error_warning_list <- c(error_warning_list, paste0(
1566816431227:"For the group: '", name_group, "', ", "we recommend the use of non-parametric test."))
1566816431228:} else if (csize < recomended_size) {
1566816431228:descriptions <- c(descriptions, paste0(
1566816431228:"current size is ", csize, " and recommended size is ", recomended_size
1566816431229:, " for the group: '", name_group, "'."))
1566816431229:codes <- c(codes, "WARN: sample.size")
1566816431229:error_warning_list <- c(error_warning_list, paste0(
1566816431230:"For the group: '", name_group, "', "
1566816431230:, "we recommend the use of non-parametric test."))
1566816431230:} else {
1566816431231:error_warning_list <- c(error_warning_list, paste0(
1566816431231:"For the group: '", name_group, "', "
1566816431231:, "you can perform a parametric test without having a normal distribution"))
1566816431232:}
1566816431232:}
1566816431233:return(list(
1566816431233:table.frequency = tf_size , fail = fail, balanced = balanced
1566816431233:, fails.warnings = data.frame("code" = codes, "description" = descriptions)
1566816431234:, error.warning.list = error_warning_list))
1566816431234:}
1566816431235:## Function to perform the parametric test
1566816431235:do_parametric_test <- function(dat, wid, dv, iv, between, observed = NULL
1566816431235:, within = NULL, p_limit = 0.05, completed = F
1566816431235:, cstratify = NULL) {
1566816431236:library(car)
1566816431236:library(afex)
1566816431236:library(dplyr)
1566816431236:library(stats)
1566816431237:library(ez)
1566816431237:codes <- c()
1566816431237:descriptions <- c()
1566816431237:error_warning_list <- c()
1566816431238:## get wide data
1566816431238:wdat <- dat
1566816431238:columns <- base::unique(c(iv, between, observed))
1566816431238:for (cname in columns) {
1566816431239:if (class(wdat[[cname]]) != "numeric") {
1566816431239:wdat[[cname]] <- factor(wdat[[cname]])
1566816431239:}
1566816431239:}
1566816431240:rownames(wdat) <- wdat[[wid]]
1566816431240:# get module of test mimimun size
1566816431240:tms_mod <- test_min_size_mod(wdat, iv, between, observed, type = 'parametric')
1566816431241:if (tms_mod$balanced) type <- 2 else type <- 3
1566816431241:## get aov and formula
1566816431241:formula_str <- paste(paste0('`',dv,'`'), "~", paste(c(between, within), collapse = "*"),
1566816431242:if (length(within) > 0) paste0("+Error(", wid, "/(", paste(within, collapse = "*"), "))") else NULL)
1566816431242:formula_aov <- as.formula(formula_str)
1566816431242:plotAov <- aov(formula_aov, data = wdat)
1566816431243:## get aov and ezAov modules
1566816431243:ezAov <- aov_ez(data = wdat, id = wid, dv = dv, between = between, within = within
1566816431243:, observed = observed, type = type, print.formula = T, factorize = F)
1566816431244:## get assumptions modules
1566816431244:normality.fail <- FALSE
1566816431244:shapiro_mod <- shapiro.test(ezAov$aov$residuals) # normality
1566816431245:shapiro_pvalue <- shapiro_mod$p.value
1566816431245:if (shapiro_pvalue <= p_limit) {
1566816431245:normality.fail <- TRUE
1566816431246:descriptions <- c(descriptions, 'Null hypothesis of Shapiro test rejected')
1566816431246:error_warning_list <- c(error_warning_list, 'The null hypothesis "H0: sample is normality distributed" has been rejected - The sample is not normal')
1566816431246:codes <- c(codes, "FAIL: Shapiro")
1566816431247:## stratify not necessary if we are using residuals
1566816431247:# if (!is.null(cstratify) && length(cstratify) > 0) {
1566816431248:#  normality.fail <- FALSE
1566816431248:#  normality.fail <- any(sapply(cstratify, FUN = function(sname) {
1566816431248:#    norm.fails <- sapply(levels(wdat[[sname]]), FUN = function(svalue) {
1566816431249:#      tdat <- wdat[wdat[[sname]] == svalue,]
1566816431249:#      tezAov <- aov_ez(data = tdat, id = wid, dv = dv
1566816431249:#                       , between = between[!between %in% sname]
1566816431250:#                       , within = within[!within %in% sname]
1566816431250:#                       , observed = observed[!observed %in% sname]
1566816431250:#                       , type = type, print.formula = T, factorize = F)
1566816431251:#      return(shapiro.test(tezAov$aov$residuals)$p.value <= p_limit)
1566816431251:#    })
1566816431251:#    return(any(norm.fails))
1566816431252:#  }))
1566816431252:#  if (normality.fail) {
1566816431252:#    descriptions <- c(descriptions, '(Stratify) Null hypothesis of Shapiro test rejected')
1566816431253:#    error_warning_list <- c(error_warning_list, '(Stratify) The null hypothesis "H0: sample is normality distributed" has been rejected - The sample is not normal')
1566816431253:#    codes <- c(codes, "(Stratify) FAIL: Shapiro")
1566816431254:#  }
1566816431254:#}
1566816431254:}
1566816431255:homogeneity.fail <- FALSE
1566816431255:levene_mod <- leveneTest(formula_aov, data = wdat) # homogeneity
1566816431256:levene_pvalue <- levene_mod$`Pr(>F)`[[1]]
1566816431256:if (levene_pvalue <= p_limit) {
1566816431256:homogeneity.fail <- TRUE
1566816431257:descriptions <- c(descriptions, "Null hypothesis of Levene's Test rejected")
1566816431257:error_warning_list <- c(error_warning_list, 'The null hypothesis "H0: homogeneity of variance" has been rejected - There is a difference between the variances of sample')
1566816431258:codes <- c(codes, "FAIL: Levene's")
1566816431258:## stratify
1566816431259:#if (!is.null(cstratify) && length(cstratify) > 0) {
1566816431259:#  homogeneity.fail <- FALSE
1566816431259:#  homogeneity.fail <- any(sapply(cstratify, FUN = function(sname) {
1566816431260:#    homo.fails <- sapply(levels(wdat[[sname]]), FUN = function(svalue) {
1566816431260:#      tdat <- wdat[wdat[[sname]] == svalue,]
1566816431261:#      tformula_aov <- as.formula(
1566816431261:#        paste(paste0('`',dv,'`'), "~", paste(c(between[!between %in% sname], within[!within %in% sname]), collapse = "*"),
1566816431261:#              if (length(within) > 0) paste0("+Error(", wid, "/(", paste(within[!within %in% sname], collapse = "*"), "))") else NULL))
1566816431262:#      return(leveneTest(tformula_aov, data = tdat)$`Pr(>F)`[[1]] <= p_limit)
1566816431262:#    })
1566816431263:#    return(any(homo.fails))
1566816431263:#  }))
1566816431263:#  if (homogeneity.fail) {
1566816431264:#    descriptions <- c(descriptions, "(Stratify) Null hypothesis of Levene's Test rejected")
1566816431264:#    error_warning_list <- c(error_warning_list, '(Stratify) The null hypothesis "H0: homogeneity of variance" has been rejected - There is a difference between the variances of sample')
1566816431265:#    codes <- c(codes, "(Stratify) FAIL: Levene's")
1566816431265:#  }
1566816431265:#}
1566816431266:}
1566816431267:## post-hoc test
1566816431267:tukey_mod <- TukeyHSD(ezAov$aov, ordered = T)
1566816431268:df_lsmeans <- list()
1566816431268:df_contrasts <- list()
1566816431269:for (k in 1:length(columns)) {
1566816431269:str_m1 <- paste0(columns[1:k], collapse = ':')
1566816431270:str_m2 <- paste0(columns[1:k], collapse = '|')
1566816431271:means_mod <- lsmeans::lsmeans(ezAov$aov, as.formula(paste0('~', str_m2)))
1566816431271:contrast_mod <- lsmeans::contrast(means_mod, method = 'pairwise')
1566816431272:df_lsmean = as.data.frame(summary(means_mod))
1566816431272:df_lsmean["Pairs"] = factor(apply(df_lsmean[columns[1:k]], 1, paste, collapse='.'))
1566816431272:df_contrast = as.data.frame(summary(contrast_mod))
1566816431273:df_lsmeans[[str_m1]] <- df_lsmean
1566816431274:df_contrasts[[str_m1]] <- df_contrast
1566816431274:}
1566816431275:## pair using t-test
1566816431276:t.test_pairs <- list()
1566816431276:columns <- unique(c(iv, columns[!columns %in% iv]))
1566816431278:for (m in 1:length(columns)) {
1566816431279:comb_columns <- combn(columns, m, simplify = T)
1566816431279:for (i in 1:ncol(comb_columns)) {
1566816431280:selected_columns  <- comb_columns[,i]
1566816431280:if (!completed && selected_columns[[1]] != iv) next
1566816431281:cname <- paste0(selected_columns, collapse = ':')
1566816431281:factors <- factor(apply(wdat[selected_columns], 1, paste, collapse='.'))
1566816431282:level_pairs <- combn(levels(factors), 2)
1566816431283:mods <- list()
1566816431283:for (j in 1:ncol(level_pairs)) {
1566816431284:level_pair <- level_pairs[,j]
1566816431285:rdat2 <- wdat[factors %in% level_pair,]
1566816431285:y <- rdat2[[dv]]
1566816431286:x <- factors[factors %in% level_pair]
1566816431287:tt_1 <- get_t.test_mod(x, y, alternative = 'less')
1566816431288:tt_2 <- get_t.test_mod(x, y, alternative = 'greater')
1566816431288:tt_3 <- get_t.test_mod(x, y, alternative = 'two.sided')
1566816431289:mods[[paste0(level_pair, collapse = ':')]] <- list(dat = rdat2, less = tt_1, greater = tt_2, two.sided = tt_3)
1566816431290:}
1566816431290:t.test_pairs[[cname]] <- mods
1566816431291:}
1566816431292:}
1566816431293:return(list(
1566816431293:fails.warnings = data.frame("code" = codes, "description" = descriptions)
1566816431294:, data = wdat , min.sample.size.fail = tms_mod$fail, anova.type = type
1566816431294:, post.hoc = list(tukey = tukey_mod, lsmeans = df_lsmeans, contrasts = df_contrasts)
1566816431295:, t.test.pairs = t.test_pairs
1566816431296:, assumptions.fail = (homogeneity.fail || normality.fail)
1566816431296:, homogeneity.fail = homogeneity.fail, normality.fail = normality.fail
1566816431297:, test.min.size = tms_mod, plotAov = plotAov, formula.str = formula_str
1566816431298:, ezAov = ezAov, shapiro = shapiro_mod, levene = levene_mod
1566816431298:, error.warning.list = error_warning_list))
1566816431299:}
1566816431300:#############################################################################
1566816431301:## Functions to draw plots                                                 ##
1566816431301:#############################################################################
1566816431301:pnormPlot <- function(presult){
1566816431301:adat = data.frame("ID" = names(presult$plotAov$residuals)
1566816431301:, "res" = as.vector(presult$plotAov$residuals))
1566816431302:normPlot(adat, "res", "ID")
1566816431302:}
1566816431302:## plot normality points
1566816431302:normPlot <- function(rdat, dv, wid="UserID") {
1566816431303:library(ggplot2)
1566816431303:library(ggrepel)
1566816431303:df <- data.frame(name = factor(rdat[[wid]]), x = rdat[[dv]])
1566816431304:y <- quantile(rdat[[dv]], c(0.25,0.75))
1566816431304:x <- qnorm(c(0.25,0.75))
1566816431304:name <- rdat[[wid]]
1566816431304:slope <- diff(y)/diff(x)
1566816431305:int <- y[1] - slope*x[1]
1566816431305:g<-ggplot(df, aes(sample = x)) + stat_qq()
1566816431305:df.new<-ggplot_build(g)$data[[1]]
1566816431306:df.new$name<-df$name[order(df$x)]
1566816431306:print(ggplot(df.new,aes(theoretical,sample,label=name))+geom_point(color = 'black')+#geom_text()+
1566816431306:geom_abline(intercept=int, slope=slope,linetype = "dotted") + theme_bw() +
1566816431306:geom_text_repel(aes(label = name)
1566816431307:, segment.color = '#888888'
1566816431307:, segment.size = 0.25
1566816431307:, arrow = arrow(length = unit(0.005, 'npc'))
1566816431308:, point.padding = unit(0.4, 'lines') # extra padding
1566816431308:, box.padding = unit(0.15, 'lines')
1566816431308:, force = 1 # Strength of the repulsion force.
1566816431308:, size = 3))
1566816431309:}
1566816431309:## Function to plot assumptions based on the result of anova
1566816431309:plot_assumptions_for_parametric_test <- function(result, dv) {
1566816431310:mod <- result$plotAov
1566816431310:sub <- result$formula.str
1566816431310:plot(mod, 2, sub = sub, main = paste0('Normality for ', dv))
1566816431310:plot(mod, 1, sub = sub, main = paste0('Homogeneity for ', dv))
1566816431311:plot(mod, 3, sub = sub, main = paste0('Homogeneity for ', dv))
1566816431311:plot(mod, 5, sub = sub, main = paste0('Homogeneity for ', dv))
1566816431311:plot(mod, 4, sub = sub, main = paste0('Homogeneity for ', dv))
1566816431311:plot(mod, 6, sub = sub, main = paste0('Homogeneity for ', dv))
1566816431312:}
1566816431312:## Plot function of t.test
1566816431312:plot_t.test <- function(
1566816431313:tt, title="", sub = NULL, ylab = NULL, notch = F, inv.col = F
1566816431313:, draw.conf.int = T, lsmean = NULL, ylim = NULL, levels = NULL) {
1566816431313:pch <- c(16,17)
1566816431313:pcol <- c("white","lightgrey")
1566816431314:vcols <- c('blue', 'red')
1566816431314:if (inv.col) {
1566816431314:pch <- c(17,16)
1566816431314:pcol <- c("lightgrey","white")
1566816431314:vcols <- c('red', 'blue')
1566816431315:}
1566816431315:if (is.null(levels)) {
1566816431315:tt$data$x <- factor(tt$data$x)
1566816431315:} else tt$data$x <- factor(tt$data$x, levels = levels)
1566816431316:par(cex.main=2, cex.lab=1.25, cex.sub=1.75, cex.axis=1.75)
1566816431316:bx <- boxplot(y ~ x, data=tt$data, boxwex=0.2, col=pcol, notch = notch, ylab=ylab, ylim = ylim)
1566816431316:title(title, sub = sub)
1566816431317:stripchart(y ~ x, data=tt$data, cex=0.75, pch=pch, col=8, add=T, at = seq(from=0.7, by=1, length.out = length(bx$names)), method = 'jitter', vertical=T)
1566816431317:if (draw.conf.int) {
1566816431317:j <- 1
1566816431318:for (bx_name in bx$names) {
1566816431318:ci_lower <- tt$result$CI.lower[tt$result$Group == bx_name]
1566816431318:ci_upper <- tt$result$CI.upper[tt$result$Group == bx_name]
1566816431319:if (!is.null(lsmean)) {
1566816431319:ci_lower <- lsmean$lower.CL[lsmean$Pairs == bx_name]
1566816431319:ci_upper <- lsmean$upper.CL[lsmean$Pairs == bx_name]
1566816431319:}
1566816431320:points(c(j-0.3, j-0.3, j-0.3), c(ci_lower, (ci_lower+ci_upper)/2, ci_upper), pch="-", col=vcols[[j%%2 + 1]], cex=c(.9,.9,1.5))
1566816431320:lines(c(j-0.3, j-0.3), c(ci_lower, ci_upper), col=vcols[j%%2 + 1])
1566816431321:j <- j + 1
1566816431321:}
1566816431321:}
1566816431322:}
1566816431322:## Function to write plots of parametric test
1566816431323:write_plots_for_parametric_test <- function(
1566816431323:p_result, ylab, title, path, override = T, ylim = NULL, levels = NULL, inv.col = F) {
1566816431323:mod <- p_result$plotAov
1566816431323:sub <- p_result$formula.str
1566816431324:## plot assumptions for anova
1566816431324:filename <- paste0(path, '00-normality1.png')
1566816431324:if (!file.exists(filename) || override) {
1566816431324:png(filename = filename, width = 640, height = 640)
1566816431325:plot(mod, 2, sub = sub, main = paste0('Normality for ', title))
1566816431325:dev.off()
1566816431325:}
1566816431326:filename <- paste0(path, '00-homogeneity1.png')
1566816431326:if (!file.exists(filename) || override) {
1566816431326:png(filename = filename, width = 640, height = 640)
1566816431326:plot(mod, 1, sub = sub, main = paste0('Homogeneity for ', title))
1566816431326:dev.off()
1566816431327:}
1566816431327:filename <- paste0(path, '00-homogeneity2.png')
1566816431327:if (!file.exists(filename) || override) {
1566816431328:png(filename = filename, width = 640, height = 640)
1566816431328:plot(mod, 3, sub = sub, main = paste0('Homogeneity for ', title))
1566816431328:dev.off()
1566816431329:}
1566816431329:filename <- paste0(path, '00-homogeneity3.png')
1566816431329:if (!file.exists(filename) || override) {
1566816431330:png(filename = filename, width = 640, height = 640)
1566816431330:plot(mod, 5, sub = sub, main = paste0('Homogeneity for ', title))
1566816431330:dev.off()
1566816431330:}
1566816431331:filename <- paste0(path, '00-homogeneity4.png')
1566816431331:if (!file.exists(filename) || override) {
1566816431332:png(filename = filename, width = 640, height = 640)
1566816431332:plot(mod, 4, sub = sub, main = paste0('Homogeneity for ', title))
1566816431332:dev.off()
1566816431333:}
1566816431333:filename <- paste0(path, '00-homogeneity5.png')
1566816431334:if (!file.exists(filename) || override) {
1566816431334:png(filename = filename, width = 640, height = 640)
1566816431334:plot(mod, 6, sub = sub, main = paste0('Homogeneity for ', title))
1566816431335:dev.off()
1566816431335:}
1566816431336:## box plots for the pairs using lsmeans
1566816431336:set_tt_mods <- p_result$t.test.pairs
1566816431337:for (iv in names(set_tt_mods)) {
1566816431337:tt_mods <- set_tt_mods[[iv]]
1566816431338:for (i in 1:length(tt_mods)) {
1566816431338:tt_mod <- tt_mods[[i]]
1566816431339:##
1566816431339:pair_names <- strsplit(names(tt_mods)[[i]], ':')[[1]]
1566816431340:lsmean <- p_result$post.hoc$lsmeans[[iv]][
1566816431340:p_result$post.hoc$lsmeans[[iv]]$Pairs %in% pair_names,]
1566816431341:##
1566816431341:filename <- paste0(iv, '_', names(tt_mods)[[i]], ".png")
1566816431341:filename <- gsub(':', '.', gsub('/', '', filename))
1566816431342:filename <- paste0(path, filename)
1566816431342:## sorting levels
1566816431343:pair_levels <- NULL
1566816431343:if (!is.null(levels)) {
1566816431344:pair_levels <- c()
1566816431344:for (lvl in levels) {
1566816431344:pair_levels <- c(pair_levels, pair_names[grepl(lvl, pair_names)])
1566816431345:}
1566816431345:}
1566816431346:if (!file.exists(filename) || override) {
1566816431347:png(filename = filename, width = 640, height = 640)
1566816431348:plot_t.test(tt_mod$two.sided, title = title, ylab = ylab, lsmean = lsmean
1566816431349:, ylim = ylim, levels = pair_levels, inv.col = inv.col)
1566816431350:dev.off()
1566816431350:}
1566816431352:}
1566816431353:}
1566816431353:}
1566816431354:#############################################################################
1566816431355:## Functions to write reports                                              ##
1566816431355:#############################################################################
1566816431355:## Function to write anova summary
1566816431356:write_anova_summary_in_wb <- function(p_result, wb, title = "") {
1566816431356:library(r2excel)
1566816431357:sheet <- xlsx::createSheet(wb, sheetName = "Summary")
1566816431357:xlsx.addHeader(wb, sheet, paste0("Summary of ANOVA for ", title), startCol = 1)
1566816431357:xlsx.addLineBreak(sheet, 2)
1566816431358:xlsx.addHeader(wb, sheet, paste0("Anova Table (Type ", p_result$anova.type, " tests) for ", p_result$formula.str), level = 2, startCol = 1)
1566816431358:xlsx.addTable(wb, sheet, as.data.frame(p_result$ezAov$anova_table), startCol = 1, row.names = T)
1566816431358:xlsx.addLineBreak(sheet, 2)
1566816431359:xlsx.addHeader(wb, sheet, paste0("Anova Table (Type ", p_result$anova.type, " tests) for ", p_result$formula.str), level = 2, startCol = 1)
1566816431359:xlsx.addTable(wb, sheet, as.data.frame(p_result$ezAov$Anova), startCol = 1, row.names = T)
1566816431360:xlsx.addLineBreak(sheet, 2)
1566816431360:xlsx.addHeader(wb, sheet, paste0("Fail and warnings in Anova for ", title), level = 2, startCol = 1)
1566816431360:if (nrow(p_result$fails.warnings) > 0) {
1566816431361:xlsx.addTable(wb, sheet, p_result$fails.warnings, startCol = 1, row.names = T)
1566816431361:}
1566816431361:if (length(p_result$error.warning.list) > 0) {
1566816431362:xlsx.addParagraph(wb, sheet, paste0(p_result$error.warning.list, collapse = "\n"), startCol = 1)
1566816431363:}
1566816431375:}
1566816431377:## Function to write anova assumptions
1566816431378:write_assumptions_for_parametric_test_in_wb <- function(p_result, wb, title = "") {
1566816431379:library(r2excel)
1566816431380:sheet <- xlsx::createSheet(wb, sheetName = "Assumptions")
1566816431381:xlsx.addHeader(wb, sheet, paste0("ANOVA assumptions for ", title), startCol = 1)
1566816431382:xlsx.addLineBreak(sheet, 2)
1566816431382:xlsx.addHeader(wb, sheet, paste0(p_result$shapiro$method," for ", title), level = 2, startCol = 1)
1566816431383:xlsx.addTable(wb, sheet, data.frame(W = p_result$shapiro$statistic, p.value = p_result$shapiro$p.value), startCol = 1, row.names = F)
1566816431385:xlsx.addLineBreak(sheet, 2)
1566816431385:xlsx.addHeader(wb, sheet, "Plots for normality test", level = 2, startCol = 1)
1566816431386:plotNormality <- function() {
1566816431386:plot(p_result$plotAov, 2, sub = p_result$formula.str, main = paste0('Normality for ', title))
1566816431387:}
1566816431388:xlsx.addPlot(wb, sheet, plotNormality, width = 640, height = 640, startCol = 1)
1566816431388:xlsx.addLineBreak(sheet, 2)
1566816431389:xlsx.addHeader(wb, sheet, paste0("Levene's Test for Homogeneity of Variance in ", title), level = 2, startCol = 1)
1566816431389:xlsx.addTable(wb, sheet, as.data.frame(p_result$levene), startCol = 1, row.names = F)
1566816431390:xlsx.addLineBreak(sheet, 2)
1566816431391:xlsx.addHeader(wb, sheet, "Plots for homogeneity of variance", level = 2, startCol = 1)
1566816431392:plotHomogeneity <- function() {
1566816431392:plot(p_result$plotAov, 1, sub = p_result$formula.str, main = paste0('Homogeneity for ', title))
1566816431392:}
1566816431393:xlsx.addPlot(wb, sheet, plotHomogeneity, width = 640, height = 640, startCol = 1)
1566816431394:plotHomogeneity <- function() {
1566816431394:plot(p_result$plotAov, 3, sub = p_result$formula.str, main = paste0('Homogeneity for ', title))
1566816431395:}
1566816431395:xlsx.addPlot(wb, sheet, plotHomogeneity, width = 640, height = 640, startCol = 1)
1566816431396:plotHomogeneity <- function() {
1566816431397:plot(p_result$plotAov, 5, sub = p_result$formula.str, main = paste0('Homogeneity for ', title))
1566816431397:}
1566816431398:xlsx.addPlot(wb, sheet, plotHomogeneity, width = 640, height = 640, startCol = 1)
1566816431399:plotHomogeneity <- function() {
1566816431400:plot(p_result$plotAov, 4, sub = p_result$formula.str, main = paste0('Homogeneity for ', title))
1566816431401:}
1566816431402:xlsx.addPlot(wb, sheet, plotHomogeneity, width = 640, height = 640, startCol = 1)
1566816431403:plotHomogeneity <- function() {
1566816431403:plot(p_result$plotAov, 6, sub = p_result$formula.str, main = paste0('Homogeneity for ', title))
1566816431404:}
1566816431405:xlsx.addPlot(wb, sheet, plotHomogeneity, width = 640, height = 640, startCol = 1)
1566816431406:xlsx.addLineBreak(sheet, 2)
1566816431406:xlsx.addHeader(wb, sheet, paste0("Minimum Sample Size Test for ", title), level = 2, startCol = 1)
1566816431407:xlsx.addTable(wb, sheet, p_result$test.min.size$table.frequency, startCol = 1, row.names = F)
1566816431408:xlsx.addLineBreak(sheet, 2)
1566816431409:xlsx.addHeader(wb, sheet, paste0("Errors and Warnings in Sample Size Test for ANOVA in ", title), level = 2, startCol = 1)
1566816431409:if (nrow(p_result$test.min.size$fails.warnings) > 0) {
1566816431410:xlsx.addTable(wb, sheet, p_result$test.min.size$fails.warnings, startCol = 1, row.names = F)
1566816431410:}
1566816431411:if (length(p_result$test.min.size$error.warning.list) > 0) {
1566816431412:xlsx.addLineBreak(sheet, 1)
1566816431412:xlsx.addParagraph(wb, sheet, paste0(p_result$test.min.size$error.warning.list, collapse = "\n"), startCol = 1)
1566816431413:}
1566816431415:if (!p_result$test.min.size$fail) {
1566816431416:xlsx.addLineBreak(sheet, 1)
1566816431417:xlsx.addParagraph(wb, sheet, paste0(
1566816431417:c("If you don't want to remove non-normal data, you must cite the following references:\n"
1566816431418:, "... (1) Lix, L.M., J.C. Keselman, and H.J. Keselman. 1996. "
1566816431419:, "Consequences of assumption violations revisited: A quantitative review"
1566816431420:, " of alternatives to the one-way analysis of variance F test. Rev. Educ."
1566816431420:, " Res. 66: 579-619.\n"
1566816431421:, "... (2) Harwell, M.R., E.N. Rubinstein, W.S. Hayes, and C.C. Olds. 1992. "
1566816431422:, "Summarizing Monte Carlo results in methodological research: the one- and two-factor "
1566816431422:, "fixed effects ANOVA cases. J. Educ. Stat. 17: 315-339."), collapse = ""), startCol = 1)
1566816431423:}
1566816431424:}
1566816431425:## Function to write post_hoc information
1566816431426:write_post_hoc_in_wb <- function(p_result, wb, title = "") {
1566816431426:library(r2excel)
1566816431426:sheet <- xlsx::createSheet(wb, sheetName = "Post-hoc")
1566816431426:xlsx.addHeader(wb, sheet, paste0("Post-hoc Tukey Honestly Significant Difference (HSD) Test for ", title), startCol = 1)
1566816431427:for (name in names(p_result$post.hoc$tukey)) {
1566816431427:dframe <- p_result$post.hoc$tukey[[name]]
1566816431428:xlsx.addLineBreak(sheet, 2)
1566816431428:xlsx.addHeader(wb, sheet, paste0("Comparisons of means for ", name), level = 2, startCol = 1)
1566816431428:xlsx.addTable(wb, sheet, as.data.frame(dframe), startCol = 1, row.names = T)
1566816431428:}
1566816431429:for (iv in names(p_result$post.hoc$contrasts)) {
1566816431429:df_contrast <- p_result$post.hoc$contrasts[[iv]]
1566816431430:xlsx.addLineBreak(sheet, 2)
1566816431430:xlsx.addHeader(wb, sheet, paste0("Contrast Matrices for ", title, ' - ', iv), level = 2, startCol = 1)
1566816431430:xlsx.addTable(wb, sheet, df_contrast, startCol = 1, row.names = F)
1566816431431:}
1566816431432:for (iv in names(p_result$post.hoc$lsmeans)) {
1566816431432:lsmean <- p_result$post.hoc$lsmeans[[iv]]
1566816431433:xlsx.addLineBreak(sheet, 2)
1566816431434:xlsx.addHeader(wb, sheet, paste0("Least Squares Means and Confidence Intervals for ", iv), level = 2, startCol = 1)
1566816431434:xlsx.addTable(wb, sheet, lsmean, startCol = 1, row.names = F)
1566816431435:}
1566816431436:xlsx.addLineBreak(sheet, 2)
1566816431436:xlsx.addHeader(wb, sheet, "Plots", level = 2, startCol = 1)
1566816431436:plotTukey <- function() {
1566816431437:plot(p_result$post.hoc$tukey, sub = p_result$formula.str, cex.axis = 0.5, cex.lab = 0.5, cex.main=0.5)
1566816431437:}
1566816431438:xlsx.addPlot(wb, sheet, plotTukey, width = 1024, height = 1024, startCol = 1)
1566816431438:plotMeans <- function() {
1566816431439:plot.design(as.formula(p_result$formula.str), ask = F, fun=mean,
1566816431439:sub = p_result$formula.str, data = p_result$ezAov$aov$model, main = paste0('Group means for ', title))
1566816431440:}
1566816431440:xlsx.addPlot(wb, sheet, plotMeans, width = 640, height = 640, startCol = 1)
1566816431440:}
1566816431441:## Function to write summary of set wt mods
1566816431442:write_anova_pair_ttest_summary_in_wb <- function(set_tt_mods, wb, title = "") {
1566816431442:library(r2excel)
1566816431443:sheet <- xlsx::createSheet(wb, sheetName = "Summary t-Test")
1566816431443:xlsx.addHeader(wb, sheet, paste0("Summary of Student's t-Test for ", title), startCol = 1)
1566816431443:for (iv in names(set_tt_mods)) {
1566816431444:tt_mods <- set_tt_mods[[iv]]
1566816431444:for (i in 1:length(tt_mods)) {
1566816431444:tt_mod <- tt_mods[[i]]
1566816431445:if (max(tt_mod$less$result$p.value) <= 0.05) {
1566816431445:xlsx.addLineBreak(sheet, 2)
1566816431445:xlsx.addHeader(wb, sheet, paste0("Student's t-Test results for ", iv, " - Alternative hypothesis: less"), level = 2, startCol = 1)
1566816431446:xlsx.addTable(wb, sheet, tt_mod$less$result, startCol = 1, row.names = F)
1566816431446:}
1566816431446:if (max(tt_mod$greater$result$p.value) <= 0.05) {
1566816431447:xlsx.addLineBreak(sheet, 2)
1566816431447:xlsx.addHeader(wb, sheet, paste0("Student's t-Test results for ", iv, " - Alternative hypothesis: greater"), level = 2, startCol = 1)
1566816431448:xlsx.addTable(wb, sheet, tt_mod$greater$result, startCol = 1, row.names = F)
1566816431448:}
1566816431449:}
1566816431449:}
1566816431450:}
1566816431451:## Function to write t-test in sheet
1566816431451:write_tts_in_wb <- function(
1566816431451:tt_mods, wb, iv, i, title = "", ylab = "Score", ylim = NULL, levels = NULL) {
1566816431452:library(r2excel)
1566816431452:tt_mod <- tt_mods[[i]]
1566816431453:sheet <- xlsx::createSheet(wb, sheetName = paste0(sub(':', '_', iv),"_", i))
1566816431453:xlsx.addHeader(wb, sheet, paste0("Student's t-Test for ", title, " in ", iv, " between ", names(tt_mods)[[i]]), startCol = 1)
1566816431453:xlsx.addLineBreak(sheet, 2)
1566816431454:xlsx.addHeader(wb, sheet, "Student's t-Test results", level = 2, startCol = 1)
1566816431454:xlsx.addHeader(wb, sheet, "Alternative hypothesis: less", level = 3, startCol = 1)
1566816431454:xlsx.addTable(wb, sheet, tt_mod$less$result, startCol = 1, row.names = F)
1566816431455:xlsx.addHeader(wb, sheet, "Alternative hypothesis: greater", level = 3, startCol = 1)
1566816431455:xlsx.addTable(wb, sheet, tt_mod$greater$result, startCol = 1, row.names = F)
1566816431455:xlsx.addHeader(wb, sheet, "Alternative hypothesis: two.sided", level = 3, startCol = 1)
1566816431456:xlsx.addTable(wb, sheet, tt_mod$two.sided$result, startCol = 1, row.names = F)
1566816431456:xlsx.addLineBreak(sheet, 2)
1566816431457:xlsx.addHeader(wb, sheet, "Box plots for Student's t-Test", level = 2, startCol = 1)
1566816431457:plotTT <- function() {
1566816431457:plot_t.test(tt_mod$two.sided, title = title, ylab = ylab, ylim = ylim, levels = levels)
1566816431458:}
1566816431458:xlsx.addPlot(wb, sheet, plotTT, width = 640, height = 640, startCol = 1)
1566816431459:xlsx.addLineBreak(sheet, 2)
1566816431459:xlsx.addHeader(wb, sheet, "Student's t-Test data", level = 2, startCol = 1)
1566816431460:xlsx.addTable(wb, sheet, tt_mod$dat, startCol = 1, row.names = F)
1566816431460:}
1566816431461:## Function to write parametric analysis report
1566816431461:write_parametric_test_report <- function(
1566816431462:p_result, filename, title = "", ylab = "Score", override = T, ylim = NULL, levels = NULL) {
1566816431462:library(r2excel)
1566816431463:if (!file.exists(filename) || override) {
1566816431463:wb <- createWorkbook(type="xlsx")
1566816431463:write_anova_summary_in_wb(p_result, wb, title)
1566816431464:write_assumptions_for_parametric_test_in_wb(p_result, wb, title)
1566816431464:write_post_hoc_in_wb(p_result, wb, title)
1566816431465:set_tt_mods <- p_result$t.test.pairs
1566816431465:write_anova_pair_ttest_summary_in_wb(set_tt_mods, wb, title)
1566816431466:for (iv in names(set_tt_mods)) {
1566816431466:tt_mods <- set_tt_mods[[iv]]
1566816431467:for (i in 1:length(tt_mods)) {
1566816431467:##
1566816431468:pair_names <- strsplit(names(tt_mods)[[i]], ':')[[1]]
1566816431468:lsmean <- p_result$post.hoc$lsmeans[[iv]][
1566816431468:p_result$post.hoc$lsmeans[[iv]]$Pairs %in% pair_names,]
1566816431469:## sorting levels
1566816431469:pair_levels <- NULL
1566816431470:if (!is.null(levels)) {
1566816431470:pair_levels <- c()
1566816431471:for (lvl in levels) {
1566816431471:pair_levels <- c(pair_levels, pair_names[grepl(lvl, pair_names)])
1566816431471:}
1566816431472:}
1566816431472:write_tts_in_wb(tt_mods, wb, iv, i, title = title
1566816431473:, ylab = ylab, ylim = ylim, levels = pair_levels)
1566816431473:}
1566816431473:}
1566816431474:sheet <- xlsx::createSheet(wb, sheetName = "data")
1566816431475:xlsx.addTable(wb, sheet, p_result$data, startCol = 1, row.names = F)
1566816431475:##
1566816431476:saveWorkbook(wb, filename)
1566816431476:}
1566816431476:}
1566816431477:##
1566816431478:winsorize_two_by_two_design <- function(
1566816431478:participants, sdat_map, list_dvs, wid = "UserID", ivs_list = list(
1566816431478:iv1 = list(iv = "Type", values = c("non-gamified", "ont-gamified"))
1566816431478:, iv2 = list(iv = "CLRole", values = c("Master", "Apprentice")))) {
1566816431479:library(MVN)
1566816431479:library(daff)
1566816431479:library(robustHD)
1566816431480:library(readr)
1566816431480:library(dplyr)
1566816431481:wdat_map <- lapply(list_dvs, FUN = function(dv) {
1566816431481:wdat <- sdat_map[[dv]]
1566816431481:winsorize_dv <- robustHD::winsorize(wdat[[dv]])
1566816431482:if (all(!is.na(winsorize_dv))) {
1566816431482:wdat[[dv]] <- winsorize_dv
1566816431483:}
1566816431483:wdat$theta <- wdat[[dv]]
1566816431484:return(wdat)
1566816431484:})
1566816431484:wdat_map <- lapply(list_dvs, FUN = function(dv) {
1566816431485:return(do.call(rbind, lapply(
1566816431485:list(
1566816431485:"iv1_1" = list(
1566816431486:p1 = list(iv = ivs_list$iv1$iv, value = ivs_list$iv1$values[[1]])),
1566816431486:"iv1_2" = list(
1566816431486:p1 = list(iv = ivs_list$iv1$iv, value = ivs_list$iv1$values[[2]]))
1566816431487:)
1566816431487:, FUN = function(params) {
1566816431488:wdat <- wdat_map[[dv]]
1566816431488:idx <- (wdat[[params$p1$iv]] == params$p1$value)
1566816431488:wdat <- wdat[idx,]
1566816431489:winsorize_dv <- robustHD::winsorize(wdat[[dv]])
1566816431489:if (all(!is.na(winsorize_dv))) {
1566816431489:wdat[[dv]] <- winsorize_dv
1566816431490:}
1566816431490:wdat$theta <- wdat[[dv]]
1566816431490:return(wdat)
1566816431491:}
1566816431491:)))
1566816431492:})
1566816431492:wdat_map <- lapply(list_dvs, FUN = function(dv) {
1566816431493:return(do.call(rbind, lapply(
1566816431493:list(
1566816431493:"iv1_1_iv2_1" = list(
1566816431494:p1 = list(iv = ivs_list$iv1$iv, value = ivs_list$iv1$values[[1]]),
1566816431494:p2 = list(iv = ivs_list$iv2$iv, value = ivs_list$iv2$values[[1]])),
1566816431495:"iv1_1_iv2_2" = list(
1566816431495:p1 = list(iv = ivs_list$iv1$iv, value = ivs_list$iv1$values[[1]]),
1566816431496:p2 = list(iv = ivs_list$iv2$iv, value = ivs_list$iv2$values[[2]])),
1566816431496:"iv1_2_iv2_1" = list(
1566816431503:p1 = list(iv = ivs_list$iv1$iv, value = ivs_list$iv1$values[[2]]),
1566816431503:p2 = list(iv = ivs_list$iv2$iv, value = ivs_list$iv2$values[[1]])),
1566816431504:"iv2_2_iv2_2" = list(
1566816431504:p1 = list(iv = ivs_list$iv1$iv, value = ivs_list$iv1$values[[2]]),
1566816431505:p2 = list(iv = ivs_list$iv2$iv, value = ivs_list$iv2$values[[2]]))
1566816431505:)
1566816431506:, FUN = function(params) {
1566816431506:wdat <- wdat_map[[dv]]
1566816431507:idx <- (wdat[[params$p1$iv]] == params$p1$value
1566816431507:& wdat[[params$p2$iv]] == params$p2$value)
1566816431508:wdat <- wdat[idx,]
1566816431509:winsorize_dv <- robustHD::winsorize(wdat[[dv]])
1566816431509:if (all(!is.na(winsorize_dv))) {
1566816431510:wdat[[dv]] <- winsorize_dv
1566816431510:}
1566816431511:wdat$theta <- wdat[[dv]]
1566816431511:return(wdat)
1566816431512:}
1566816431512:)))
1566816431513:})
1566816431514:##
1566816431515:sdat <- participants
1566816431516:wdat <- participants
1566816431517:for (dv in names(list_dvs)) {
1566816431518:sdat <- merge(sdat, sdat_map[[dv]][,c(wid, dv)], by = wid)
1566816431518:wdat <- merge(wdat, wdat_map[[dv]][,c(wid, dv)], by = wid)
1566816431519:}
1566816431520:rownames(sdat) <- sdat[[wid]]
1566816431520:rownames(wdat) <- wdat[[wid]]
1566816431522:return(list(sdat = sdat, wdat = wdat, diff_dat = diff_data(sdat, wdat)))
1566816431522:}
1566816442867:## Function to obtain a dataframe with the summary of descriptive and post-hoc
1566816442867:## information from a parametric statistic result
1566816442868:get_descritive_and_post_hoc_dataframe <- function(parametric_result) {
1566816442868:library(Hmisc)
1566816442869:t_test_pairs <- parametric_result$t.test.pairs
1566816442869:constrasts_set <- parametric_result$post.hoc$contrasts
1566816442869:lsmeans_set <- parametric_result$post.hoc$lsmeans
1566816442869:tukey_set <- parametric_result$post.hoc$tukey
1566816442870:return (do.call(
1566816442870:rbind,
1566816442871:lapply(names(constrasts_set), FUN = function(src) {
1566816442871:constrasts <- constrasts_set[[src]]
1566816442872:lsmeans <- lsmeans_set[[src]]
1566816442872:tukeys <- tukey_set[[src]]
1566816442873:t_test_pair <- t_test_pairs[[src]]
1566816442873:#for (i in 1:nrow(constrasts)) {
1566816442874:to_return <- do.call(rbind, lapply(c(1:nrow(constrasts)), FUN = function (i) {
1566816442874:constr_info <- as.list(constrasts[i,])
1566816442875:constr_keys <- strsplit(as.character(constr_info$contrast), ' - ')[[1]]
1566816442876:pairs <- as.vector(sapply(constr_keys, FUN = function(x) {
1566816442876:columns_to_pair <- colnames(constrasts)[
1566816442877:!colnames(constrasts) %in% c('contrast','estimate','SE','df','t.ratio','p.value')]
1566816442877:if (!is.null(columns_to_pair) && !is.na(columns_to_pair) && length(columns_to_pair) > 0) {
1566816442878:return(paste(na.omit(
1566816442878:c(x, as.character(constrasts[i, columns_to_pair]))), collapse = '.'))
1566816442879:} else return(x)
1566816442879:}))
1566816442880:## get tukey info
1566816442881:tukey_inv <- F
1566816442881:tukey_key <- gsub("\\.",":", paste0(pairs, collapse = "-"))
1566816442882:if (!any(rownames(tukeys) %in% tukey_key)) {
1566816442882:tukey_inv <- T
1566816442882:tukey_key <- gsub("\\.",":", paste0(rev(pairs), collapse = "-"))
1566816442883:}
1566816442884:tukey_info <- as.list(tukeys[tukey_key,])
1566816442885:if (tukey_inv) {
1566816442899:tukey_info$diff <- -1*tukey_info$diff
1566816442901:tukey_info_lwr <- tukey_info$lwr
1566816442902:tukey_info$lwr <- -1*tukey_info$upr
1566816442904:tukey_info$upr <- -1*tukey_info_lwr
1566816442906:}
1566816442909:## get t.test info
1566816442911:t_test_key <- paste0(pairs, collapse = ':')
1566816442913:if (!any(names(t_test_pair) %in% t_test_key)) {
1566816442914:t_test_key <- paste0(rev(pairs), collapse = ':')
1566816442916:}
1566816442917:t_test_info <- t_test_pair[[t_test_key]]$two.sided$result
1566816442921:## get descriptive part from lsmeans
1566816442922:to_add <- lsmeans[lsmeans$Pairs %in% as.vector(pairs),]
1566816442923:to_add <- dplyr::mutate(to_add, t.ratio = NA, p.value = NA, p.ajd = NA, g = NA)
1566816442924:to_add <- merge(to_add, t_test_info, by.x = "Pairs", by.y = "Group")
1566816442925:to_add <- to_add[,c('Pairs','N','Mean','lsmean','SE','df.x','lower.CL','upper.CL')]
1566816442926:colnames(to_add) <- c('Group','N','mean','lsmean','SE', 'df','lwr.CI','upr.CI')
1566816442928:## obtaining the data result
1566816442928:result_df <- plyr::rbind.fill(to_add, data.frame(
1566816442929:"Group" = paste0(pairs, collapse = " - ")
1566816442930:, "N" = sum(to_add$N)
1566816442931:, "mean" = tukey_info$diff
1566816442932:, "lsmean" = constr_info$estimate
1566816442932:, "SE" = constr_info$SE
1566816442933:, "df" = NA
1566816442934:, "lwr.CI" = tukey_info$lwr
1566816442934:, "upr.CI" = tukey_info$upr
1566816442935:, "t.ratio" = constr_info$t.ratio
1566816442936:, "p.value" = constr_info$p.value
1566816442937:, "p.ajd" = tukey_info$`p adj`
1566816442937:, "g" = t_test_info$g[[1]]
1566816442938:))
1566816442938:row_names <- result_df$Group
1566816442940:result_df <- dplyr::mutate(
1566816442940:round(result_df[,-1], 3)
1566816442941:, sig=ifelse(result_df$p.ajd > 0.05, NA
1566816442942:, ifelse(result_df$p.ajd > 0.01, '*', '**'))
1566816442942:, mag=ifelse((!is.null(result_df$p.ajd)
1566816442943:& !is.na(result_df$p.ajd)
1566816442943:& result_df$p.ajd <= 0.05)
1566816442944:, as.character(t_test_info$magnitude[[1]]), NA))
1566816442945:rownames(result_df) <- row_names
1566816442945:return(result_df)
1566816442946:}
1566816442947:))
1566816442948:return(to_return)
1566816442948:})
1566816442949:)
1566816442950:)
1566816442950:}
1566816442952:write_kruskal_statistics_analysis_in_latex <- function(
1566816442952:nonparametric_results, info, filename, in_title = NULL, append = F) {
1566816442953:library(Hmisc)
1566816442953:write("", file = filename, append = append)
1566816442953:if (!append) {
1566816442953:write(paste("\\documentclass[6pt]{article}"
1566816442954:,"\\usepackage{longtable}"
1566816442954:,"\\usepackage{rotating}"
1566816442954:,"\\usepackage{lscape}"
1566816442954:,"\\usepackage{ctable}"
1566816442955:, "\\date{}"
1566816442955:,"\\begin{document}", sep = "\n")
1566816442955:, file = filename, append = T)
1566816442955:}
1566816442956:write(paste0("\\section{Summaries of Nonparametric Statistics Analysis"
1566816442956:, in_title, "}"), file = filename, append = T)
1566816442957:write("", file = filename, append = T)
1566816442957:##
1566816442958:list_info <- as.list(names(info))
1566816442958:names(list_info) <- names(info)
1566816442958:result_df <- do.call(rbind, lapply(list_info, FUN = function(name) {
1566816442959:n_result <- nonparametric_results[[name]]
1566816442959:mod_df <- round(n_result$mod.df, 3)
1566816442960:Sig <- sapply(mod_df$p.value, FUN = function(x) {
1566816442960:return(ifelse(x > 0.05, NA, ifelse(x >0.01, '*', '**')))
1566816442960:})
1566816442961:mod_df <- cbind(mod_df, Sig)
1566816442961:#mod_df <- rbind(c(NA), mod_df)
1566816442962:return(mod_df)
1566816442962:}))
1566816442963:##
1566816442963:latex(result_df
1566816442963:, caption = paste("Summary of Kruskal-Wallis rank test results", in_title)
1566816442964:#, insert.bottom =
1566816442964:, size = "small", longtable = T, ctable=F, landscape = F
1566816442964:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816442965:write(paste0(
1566816442965:c("\\raggedleft{", "\\scriptsize{"
1566816442965:, "Signif. codes: ", "0 ``**'' 0.01 ``*'' 0.05"
1566816442966:, "}}", "\n"), collapse = " "), file = filename, append = T)
1566816442966:write("", file = filename, append = T)
1566816442967:## wilcoxon dataframe test
1566816442967:result_wilcoxon_df <- do.call(rbind, lapply(list_info, FUN = function(name) {
1566816442968:n_result <- nonparametric_results[[name]]
1566816442968:set_wilcox_mods_df <- do.call(rbind, lapply(
1566816442969:n_result$wilcox.pairs, FUN = function(wilcox_mods){
1566816442969:wilcox_mods_df <- do.call(rbind, lapply(
1566816442970:wilcox_mods, FUN = function(mods) {
1566816442970:mods$dat <- NULL
1566816442970:mods_df <- do.call(rbind, lapply(
1566816442971:mods, FUN = function(mod) {
1566816442971:if (any(mod$result$p.value <= 0.05)) {
1566816442972:return(mod$result)
1566816442972:} else {
1566816442973:return(NULL)
1566816442973:}
1566816442973:}))
1566816442974:return(mods_df)
1566816442974:}))
1566816442975:return(wilcox_mods_df)
1566816442975:}))
1566816442975:return(set_wilcox_mods_df)
1566816442976:}))
1566816442977:result_wilcoxon_df$Median <- round(result_wilcoxon_df$Median, 2)
1566816442977:result_wilcoxon_df$Mean.Ranks <- round(result_wilcoxon_df$Mean.Ranks, 2)
1566816442977:result_wilcoxon_df$Sum.Ranks <- round(result_wilcoxon_df$Sum.Ranks, 2)
1566816442978:result_wilcoxon_df$Z <- round(result_wilcoxon_df$Z, 2)
1566816442978:result_wilcoxon_df$p.value <- round(result_wilcoxon_df$p.value, 3)
1566816442979:result_wilcoxon_df$r <- round(result_wilcoxon_df$r,3)
1566816442979:write(paste0("\\section{Wilcoxon Pairs Statistics Analysis"
1566816442980:, in_title, "}"), file = filename, append = T)
1566816442980:write("", file = filename, append = T)
1566816442981:##
1566816442981:latex(result_wilcoxon_df
1566816442982:, caption = paste("Descriptive statistic of the pair wilcoxon analysis", in_title)
1566816442982:#, insert.bottom =
1566816442983:, size = "small", longtable = T, ctable=F, landscape = T
1566816442983:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816442984:write(paste0(
1566816442984:c("\\raggedleft{", "\\scriptsize{"
1566816442985:, "Signif. codes: ", "0 ``**'' 0.01 ``*'' 0.05"
1566816442985:, "}}", "\n"), collapse = " "), file = filename, append = T)
1566816442985:write("", file = filename, append = T)
1566816442986:if (!append) {
1566816442987:write("\\end{document}", file = filename, append = T)
1566816442987:}
1566816442988:}
1566816442989:##################################################################
1566816442989:## Function to write rel_analysis as latex
1566816442989:write_rel_analysis_in_latex <- function(
1566816442990:fa_mod, cfa_mod, alpha_mods, in_title = "none", filename = "RelAnalysis.tex", key_labels = list(), robust = F, append = F) {
1566816442990:library(Hmisc)
1566816442990:write("", file = filename, append = append)
1566816442990:if (!append) {
1566816442991:write(paste("\\documentclass[6pt]{article}"
1566816442991:,"\\usepackage{longtable}"
1566816442991:,"\\usepackage{rotating}"
1566816442991:,"\\usepackage{lscape}"
1566816442991:,"\\usepackage{ctable}"
1566816442992:, "\\date{}"
1566816442992:,"\\begin{document}", sep = "\n")
1566816442992:, file = filename, append = T)
1566816442992:write("\\section{Summaries of Reliability Analysis}", file = filename, append = T)
1566816442993:}
1566816442993:# summary of exploratory/confirmatory factor anlaysis
1566816442993:write("\\subsection{Exploratory and Confirmatory Factor Analysis}", file = filename, append = T)
1566816442993:write("", file = filename, append = T)
1566816442994:fa_summary_df <- round(data.frame(unclass(fa_mod$loadings)), 3)
1566816442994:fa_aux_df <- round(data.frame(print(fa_mod))[c(1,3,4),], 3)
1566816442994:colnames(fa_aux_df) <- colnames(fa_summary_df)
1566816442995:fa_summary_df <- rbind(fa_summary_df, fa_aux_df)
1566816442995:fit_measures <- as.list(round(fitMeasures(cfa_mod, fit.measures = "all"), 3))
1566816442995:cfa_summary <- paste0(
1566816442996:c("\\begin{flushright}{", "\\scriptsize{"
1566816442996:, paste0(c(paste0("CFI: ", if(robust) fit_measures$cfi.scaled else fit_measures$cfi)
1566816442996:, paste0("TLI: ", if(robust) fit_measures$tli.scaled else fit_measures$tli)
1566816442996:, paste0("df: ", if(robust) fit_measures$df.scaled else fit_measures$df)
1566816442997:, paste0("$chi^2$: ", if(robust) fit_measures$chisq.scaled else fit_measures$chisq)
1566816442997:, paste0("p-value: ", if(robust) fit_measures$pvalue.scaled else fit_measures$pvalue)
1566816442997:, paste0("RMSEA: ", paste0(if(robust) fit_measures$rmsea.scaled else fit_measures$rmsea, " "
1566816442998:, "[", if(robust) fit_measures$rmsea.ci.lower.scaled else fit_measures$rmsea.ci.lower
1566816442998:, ", ", if(robust) fit_measures$rmsea.ci.upper.scaled else fit_measures$rmsea.ci.upper, "]"))
1566816442998:, paste0("p-value(RMSEA): ", fit_measures$rmsea.pvalue))
1566816442999:, collapse = "; ")
1566816442999:, "}}\\end{flushright}", "\n"), collapse = " ")
1566816443000:latex(fa_summary_df
1566816443000:, caption = paste("Summary of exploratory and confirmatory factor analysis for the", in_title)
1566816443000:, size = "small", longtable = T, ctable=F, landscape = F
1566816443001:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443001:write(cfa_summary, file = filename, append = T)
1566816443001:write("", file = filename, append = T)
1566816443002:# summary of reliability analysis
1566816443002:write("\\subsection{Reliability Analysis}", file = filename, append = T)
1566816443003:write("", file = filename, append = T)
1566816443004:rel_summary_df <- data.frame(lapply(key_labels, FUN = function(k) {
1566816443004:return(round(unname(sapply(alpha_mods, FUN = function(x) {
1566816443004:return(x[[k]]$total$std.alpha)
1566816443005:})), 3))
1566816443005:}))
1566816443006:row.names(rel_summary_df) <- unname(sapply(alpha_mods, FUN = function(x) {
1566816443006:return(x$lbl)
1566816443006:}))
1566816443007:latex(rel_summary_df
1566816443008:, caption = paste("Result of reliability analysis for the", in_title)
1566816443008:, size = "small", longtable = T, ctable=F, landscape = F
1566816443009:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443009:write("", file = filename, append = T)
1566816443010:if (!append) {
1566816443010:write("\\end{document}", file = filename, append = T)
1566816443011:}
1566816443011:}
1566816443012:## Function to write in latex a param statistic analysis
1566816443013:write_param_statistics_analysis_in_latex <- function(
1566816443013:parametric_results, ivs, filename, in_title = NULL, append = F) {
1566816443013:library(Hmisc)
1566816443013:write("", file = filename, append = append)
1566816443013:if (!append) {
1566816443014:write(paste("\\documentclass[6pt,a4paper]{article}"
1566816443014:,"\\usepackage[a4paper,margin=0.54cm]{geometry}"
1566816443014:,"\\usepackage{longtable}"
1566816443014:,"\\usepackage{rotating}"
1566816443015:,"\\usepackage{pdflscape}"
1566816443015:,"\\usepackage{ctable}"
1566816443015:,paste("\\title{Summary of parametric statistics analysis",in_title,"}")
1566816443015:, "\\date{}"
1566816443015:,"\\begin{document}", sep = "\n")
1566816443016:, file = filename, append = T)
1566816443016:write("", file = filename, append = T)
1566816443016:write("\\maketitle", file = filename, append = T)
1566816443017:write("", file = filename, append = T)
1566816443018:}
1566816443038:list_ivs <- as.list(ivs)
1566816443040:names(list_ivs) <- ivs
1566816443041:##
1566816443042:result_df <- do.call(rbind, lapply(list_ivs, FUN = function(iv) {
1566816443044:p_result <- parametric_results[[iv]]
1566816443045:aov_df <- round(p_result$ezAov$Anova, 3)
1566816443047:Sig <- sapply(aov_df$`Pr(>F)`, FUN = function(x) {
1566816443048:return(ifelse(x > 0.05, NA, ifelse(x >0.01, '*', '**')))
1566816443049:})
1566816443050:Sig[[1]] <- NA
1566816443052:aov_df <- cbind(aov_df, Sig)
1566816443053:return(aov_df)
1566816443054:}))
1566816443056:##
1566816443057:write("", file = filename, append = T)
1566816443057:latex(result_df
1566816443058:, caption = paste("Summary of two-way ANOVA results", in_title)
1566816443059:#, insert.bottom =
1566816443060:, size = "small", longtable = T, ctable=F, landscape = F
1566816443061:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443062:write(paste0("\\begin{flushright}{"
1566816443062:,"\\scriptsize{Signif. codes: 0 ``**'' 0.01 ``*'' 0.05}"
1566816443063:,"}\\end{flushright}", "", sep = "\n"), file = filename, append = T)
1566816443064:##
1566816443065:post_hoc_df <- do.call(rbind, lapply(list_ivs, FUN = function(iv) {
1566816443066:parametric_result <- parametric_results[[iv]]
1566816443067:result_df <- get_descritive_and_post_hoc_dataframe(parametric_result)
1566816443067:return(result_df)
1566816443068:}))
1566816443069:write("", file = filename, append = T)
1566816443070:write("\\begin{landscape}", file = filename, append = T)
1566816443074:write("", file = filename, append = T)
1566816443076:latex(post_hoc_df
1566816443076:, caption = paste("Descriptive statistics and Tukey post-hoc test results", in_title)
1566816443077:, size = "small", longtable = T, ctable=F, landscape = F
1566816443078:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443079:write("", file = filename, append = T)
1566816443080:write("\\end{landscape}", file = filename, append = T)
1566816443081:if (!append) {
1566816443081:write("", file = filename, append = T)
1566816443082:write("\\end{document}", file = filename, append = T)
1566816443082:}
1566816443083:}
1566816443084:get_wilcoxon_pairs_df <- function(list_ivs, nonparametric_results, all.pairs = F) {
1566816443084:result_wilcoxon_df <- do.call(rbind, lapply(names(list_ivs), FUN = function(iv) {
1566816443085:n_result <- nonparametric_results[[iv]]
1566816443085:set_wilcox_mods_df <- do.call(rbind, lapply(
1566816443085:n_result$wilcox.pairs, FUN = function(wilcox_mods){
1566816443086:wilcox_mods_df <- do.call(rbind, lapply(
1566816443086:names(wilcox_mods), FUN = function(wname) {
1566816443086:mods <- wilcox_mods[[wname]]
1566816443087:mods$dat <- NULL
1566816443087:mods_df <- do.call(rbind, lapply(
1566816443087:mods, FUN = function(mod) {
1566816443088:if (all.pairs) {
1566816443088:return(mod$result)
1566816443089:} else {
1566816443091:if (any(mod$result$p.value <= 0.05)) {
1566816443091:return(mod$result)
1566816443092:} else {
1566816443092:return(NULL)
1566816443093:}
1566816443093:}
1566816443094:}))
1566816443094:return(mods_df)
1566816443094:}))
1566816443095:return(wilcox_mods_df)
1566816443095:}))
1566816443095:return(set_wilcox_mods_df)
1566816443096:}))
1566816443096:if(!is.null(result_wilcoxon_df) && nrow(result_wilcoxon_df) > 0) {
1566816443097:result_wilcoxon_df$Median <- round(result_wilcoxon_df$Median, 2)
1566816443097:result_wilcoxon_df$Mean.Ranks <- round(result_wilcoxon_df$Mean.Ranks, 2)
1566816443098:result_wilcoxon_df$Sum.Ranks <- round(result_wilcoxon_df$Sum.Ranks, 2)
1566816443098:result_wilcoxon_df$Z <- round(result_wilcoxon_df$Z, 2)
1566816443098:result_wilcoxon_df$p.value <- round(result_wilcoxon_df$p.value, 3)
1566816443099:result_wilcoxon_df$r <- round(result_wilcoxon_df$r,3)
1566816443099:}
1566816443100:return(result_wilcoxon_df)
1566816443100:}
1566816443101:write_nonparam_statistics_analysis_in_latex <- function(
1566816443101:nonparametric_results, dvs, filename, in_title = NULL, append = F) {
1566816443102:library(Hmisc)
1566816443102:write("", file = filename, append = append)
1566816443102:if (!append) {
1566816443103:write(paste("\\documentclass[6pt,a4paper]{article}"
1566816443103:,"\\usepackage[a4paper,margin=0.54cm]{geometry}"
1566816443103:,"\\usepackage{longtable}"
1566816443103:,"\\usepackage{rotating}"
1566816443104:,"\\usepackage{pdflscape}"
1566816443104:,"\\usepackage{ctable}"
1566816443104:,paste("\\title{Summary of nonparametric statistics analysis",in_title,"}")
1566816443105:, "\\date{}"
1566816443105:,"\\begin{document}", sep = "\n")
1566816443105:, file = filename, append = T)
1566816443105:write("", file = filename, append = T)
1566816443106:write("\\maketitle", file = filename, append = T)
1566816443106:write("", file = filename, append = T)
1566816443106:}
1566816443107:##
1566816443107:result_df <- do.call(rbind, lapply(dvs, FUN = function(dv) {
1566816443108:n_result <- nonparametric_results[[dv]]
1566816443108:sch_df <- round(n_result$mod.df, 3)
1566816443109:Sig <- sapply(sch_df$p.value, FUN = function(x) {
1566816443109:return(ifelse(x > 0.05, NA, ifelse(x >0.01, '*', '**')))
1566816443109:})
1566816443110:sch_df <- cbind(sch_df, Sig)
1566816443110:sch_df <- rbind(c(NA), sch_df)
1566816443111:return(sch_df)
1566816443111:}))
1566816443111:rownames(result_df) <- NULL
1566816443112:rownames(result_df) <- c(unlist(lapply(dvs, FUN = function(dv) {
1566816443113:n_result <- nonparametric_results[[dv]]
1566816443113:return(c(dv, paste(dv, rownames(n_result$mod), sep = ":")))
1566816443113:})))
1566816443114:##
1566816443114:write("", file = filename, append = T)
1566816443115:latex(result_df
1566816443115:, caption = paste("Summary of Scheirer-Ray-Hare results", in_title)
1566816443116:, size = "small", longtable = T, ctable=F, landscape = F
1566816443116:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443116:write(paste0("\\begin{flushright}{"
1566816443117:,"\\scriptsize{Signif. codes: 0 ``**'' 0.01 ``*'' 0.05}"
1566816443118:,"}\\end{flushright}", "", sep = "\n"), file = filename, append = T)
1566816443136:## wilcoxon dataframe test
1566816443137:list_dvs <- as.list(dvs)
1566816443137:names(list_dvs) <- dvs
1566816443138:result_wilcoxon_df <- get_wilcoxon_pairs_df(list_dvs, nonparametric_results, all.pairs = F)
1566816443139:if (length(result_wilcoxon_df) > 0 && nrow(result_wilcoxon_df) > 0){
1566816443139:write("", file = filename, append = T)
1566816443140:latex(result_wilcoxon_df
1566816443140:, caption = paste("Descriptive statistic of the pair wilcoxon analysis", in_title)
1566816443141:, size = "scriptsize", longtable = T, ctable=F, landscape = F
1566816443142:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443142:}
1566816443144:result_wilcoxon_df <- get_wilcoxon_pairs_df(list_dvs, nonparametric_results, all.pairs = T)
1566816443144:if (length(result_wilcoxon_df) > 0 && nrow(result_wilcoxon_df) > 0) {
1566816443145:write("", file = filename, append = T)
1566816443145:latex(result_wilcoxon_df
1566816443146:, caption = paste("Full descriptive statistic of the pair wilcoxon analysis", in_title)
1566816443147:, size = "scriptsize", longtable = T, ctable=F, landscape = F
1566816443147:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443148:}
1566816443149:##
1566816443150:if (!append) {
1566816443150:write("", file = filename, append = T)
1566816443151:write("\\end{document}", file = filename, append = T)
1566816443151:}
1566816443152:}
1566816443153:write_param_and_nonparam_statistics_analysis_in_latex  <- function(
1566816443154:all_parametric_results, all_nonparametric_results, list_info, filename, in_title = NULL, append = F, mvn_mod = NULL, min_size_tests = F) {
1566816443154:library(Hmisc)
1566816443154:write("", file = filename, append = append)
1566816443155:if (!append) {
1566816443155:write(paste("\\documentclass[6pt,a4paper]{article}"
1566816443155:,"\\usepackage[a4paper,margin=0.54cm]{geometry}"
1566816443156:,"\\usepackage{longtable}"
1566816443156:,"\\usepackage{rotating}"
1566816443156:,"\\usepackage{pdflscape}"
1566816443156:,"\\usepackage{ctable}"
1566816443157:,paste("\\title{Statistical Analysis",in_title,"}")
1566816443157:, "\\date{}"
1566816443157:,"\\begin{document}", sep = "\n")
1566816443158:, file = filename, append = T)
1566816443158:write("", file = filename, append = T)
1566816443158:write("\\maketitle", file = filename, append = T)
1566816443158:write("", file = filename, append = T)
1566816443159:}
1566816443159:##
1566816443160:result_df <- do.call(rbind, lapply(list_info, FUN = function(info) {
1566816443160:parametric_results <- all_parametric_results[[info$dv]]
1566816443160:nonparametric_results <- all_nonparametric_results[[info$dv]]
1566816443161:result_df <- do.call(rbind, lapply(names(info$info), FUN = function(iv) {
1566816443161:p_result <- parametric_results[[iv]]
1566816443162:n_result <- nonparametric_results[[iv]]
1566816443162:aov_df <- round(p_result$ezAov$Anova, 3)
1566816443163:sch_df <- rbind(c(NA), round(n_result$mod.df, 3))
1566816443163:Sig <- sapply(aov_df$`Pr(>F)`, FUN = function(x) {
1566816443164:return(ifelse(x > 0.05, NA, ifelse(x >0.01, '*', '**')))
1566816443164:})
1566816443164:Sig[[1]] <- NA
1566816443165:aov_sch_df <- cbind(aov_df, Sig)
1566816443165:Sig <- sapply(sch_df$p.value, FUN = function(x) {
1566816443166:return(ifelse(x > 0.05, NA, ifelse(x >0.01, '*', '**')))
1566816443166:})
1566816443167:Sig[[1]] <- NA
1566816443167:aov_sch_df <- cbind(aov_sch_df, sch_df)
1566816443167:aov_sch_df <- cbind(aov_sch_df, Sig)
1566816443168:return(aov_sch_df)
1566816443169:}))
1566816443169:return(result_df)
1566816443170:}))
1566816443171:write("", file = filename, append = T)
1566816443171:latex(result_df
1566816443171:, caption = paste("Two-way ANOVA and Scheirer-Ray-Hare", in_title)
1566816443172:, size = "small", longtable = T, ctable=F, landscape = F
1566816443172:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443173:write(paste0("\\begin{flushright}{"
1566816443173:,"\\scriptsize{Signif. codes: 0 ``**'' 0.01 ``*'' 0.05}"
1566816443173:,"}\\end{flushright}", "", sep = "\n"), file = filename, append = T)
1566816443174:write("", file = filename, append = T)
1566816443175:write("\\begin{landscape}", file = filename, append = T)
1566816443176:##
1566816443176:result_df <- do.call(rbind, lapply(list_info, FUN = function(info) {
1566816443176:parametric_results <- all_parametric_results[[info$dv]]
1566816443177:result_df <- do.call(rbind, lapply(names(info$info), FUN = function(iv) {
1566816443177:p_result <- parametric_results[[iv]]
1566816443178:ph_df <- get_descritive_and_post_hoc_dataframe(p_result)
1566816443178:ph_df <- ph_df[!is.na(ph_df$p.ajd) & ph_df$p.ajd <= 0.05,]
1566816443179:return(ph_df)
1566816443179:}))
1566816443180:result_df <- cbind(result_df, tname = rownames(result_df))
1566816443180:return(result_df)
1566816443181:}))
1566816443181:if (length(result_df) > 0 && nrow(result_df) > 0) {
1566816443182:rownames(result_df) <- paste0(rownames(result_df), ':',result_df$tname)
1566816443182:result_df <- result_df[,!names(result_df) %in% c("tname")]
1566816443183:write("", file = filename, append = T)
1566816443184:latex(result_df
1566816443184:, caption = paste("Summary of Tukey post-hoc", in_title)
1566816443185:, size = "small", longtable = T, ctable=F, landscape = F
1566816443185:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443186:}
1566816443186:##
1566816443187:result_df <- do.call(rbind, lapply(list_info, FUN = function(info) {
1566816443188:nonparametric_results <- all_nonparametric_results[[info$dv]]
1566816443189:list_ivs <- as.list(names(info$info))
1566816443189:names(list_ivs) <- names(info$info)
1566816443190:result_df <- get_wilcoxon_pairs_df(list_ivs, nonparametric_results, all.pairs = F)
1566816443190:return(result_df)
1566816443191:}))
1566816443192:write("", file = filename, append = T)
1566816443192:latex(result_df
1566816443193:, caption = paste("Summary of Pair wilcoxon", in_title)
1566816443193:, size = "small", longtable = T, ctable=F, landscape = F
1566816443194:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443195:write("", file = filename, append = T)
1566816443195:write("\\end{landscape}", file = filename, append = T)
1566816443197:##
1566816443197:if (!is.null(mvn_mod)) {
1566816443198:write("", file = filename, append = T)
1566816443198:write("\\section{Descriptive Statistics and Assumptions for Parametric Tests}", file = filename, append = T)
1566816443199:latex(round_df(mvn_mod$Descriptives, 3)
1566816443200:, caption = paste("Descriptive statistics", in_title)
1566816443201:, size = "small", longtable = T, ctable=F, landscape = F
1566816443201:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443202:if (is.data.frame(mvn_mod$multivariateNormality)) {
1566816443203:latex(round_df(mvn_mod$multivariateNormality, 3)
1566816443203:, caption = paste("Multivariate normality test", in_title)
1566816443204:, size = "small", longtable = T, ctable=F, landscape = F
1566816443205:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443205:}
1566816443206:latex(round_df(mvn_mod$univariateNormality, 3)
1566816443207:, caption = paste("Univariate normality test", in_title)
1566816443208:, size = "small", longtable = T, ctable=F, landscape = F
1566816443208:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443209:} else {
1566816443209:write("", file = filename, append = T)
1566816443210:write("\\section{Assumptions for Parametric Tests}", file = filename, append = T)
1566816443212:latex(round_df(do.call(rbind, lapply(all_parametric_results, function(p_results) {
1566816443213:return(do.call(rbind, lapply(p_results, function(p_result) {
1566816443213:return(data.frame(normality.fail = p_result$normality.fail, W = p_result$shapiro$statistic, p.value = p_result$shapiro$p.value))
1566816443214:})))
1566816443214:})), 3)
1566816443215:, caption = paste("Univariate normality test", in_title)
1566816443216:, size = "scriptsize", longtable = T, ctable=F, landscape = F
1566816443216:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443217:}
1566816443218:##
1566816443219:if (min_size_tests) {
1566816443220:write("", file = filename, append = T)
1566816443221:test_min_size_summary <- do.call(rbind, lapply(list_info, FUN = function(info) {
1566816443221:p_results <- all_parametric_results[[info$dv]]
1566816443222:do.call(rbind, lapply(p_results, function(p_result) {
1566816443223:return(p_result$test.min.size$fails.warnings)
1566816443223:}))
1566816443224:}))
1566816443225:latex(test_min_size_summary
1566816443225:, caption = paste("Notes to be taken into account about sample size", in_title)
1566816443226:, size = "scriptsize", longtable = T, ctable=F, landscape = F
1566816443227:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443228:write("", file = filename, append = T)
1566816443228:write("Recent studies carried out through simulations have indicated that ANOVA is reliable even when the data are non-normally distributed and the sample size is greater thatn 15 observations for each group.", file = filename, append = T)
1566816443229:write("This size value is based on the Reference:", file = filename, append = T)
1566816443230:write("Rana, R. K., Singhal, R., \\& Dua, P. (2016). Deciphering the dilemma of parametric and nonparametric tests. Journal of the Practice of Cardiovascular Sciences, 2(2), 95.", file = filename, append = T)
1566816443231:write("", file = filename, append = T)
1566816443231:write("The sample size to carried out any parametric and non-parametric analysis is 5, and it was established using common sense.", file = filename, append = T)
1566816443232:write("The warning and fails indicated in this section should be taking into account when a paper or report will be elaborated.", file = filename, append = T)
1566816443233:write("", file = filename, append = T)
1566816443234:write("", file = filename, append = T)
1566816443234:}
1566816443236:##
1566816443237:if (!append) {
1566816443238:write("", file = filename, append = T)
1566816443238:write("\\end{document}", file = filename, append = T)
1566816443239:}
1566816443240:}
1566816443242:## Summary of careless responses
1566816443242:write_careless_in_latex <- function(dd, filename, in_title = NULL, append = F) {
1566816443242:library(Hmisc)
1566816443242:write("", file = filename, append = append)
1566816443243:if (!append) {
1566816443243:write(paste("\\documentclass[6pt,a4paper]{article}"
1566816443243:,"\\usepackage[a4paper,margin=0.54cm]{geometry}"
1566816443243:,"\\usepackage{longtable}"
1566816443243:,"\\usepackage{rotating}"
1566816443244:,"\\usepackage{pdflscape}"
1566816443244:,"\\usepackage{ctable}"
1566816443244:,paste("\\title{Summary of carless responses",in_title,"}")
1566816443244:, "\\date{}"
1566816443244:,"\\begin{document}", sep = "\n")
1566816443245:, file = filename, append = T)
1566816443245:write("", file = filename, append = T)
1566816443245:write("\\maketitle", file = filename, append = T)
1566816443245:write("", file = filename, append = T)
1566816443246:}
1566816443246:write("", file = filename, append = T)
1566816443246:write("\\begin{landscape}", file = filename, append = T)
1566816443247:if (!is.null(dd$get_data()) && length(dd$get_data()) > 0) {
1566816443247:latex(
1566816443247:as.data.frame(dd$get_data())
1566816443247:, rowname = NULL
1566816443248:, caption = paste("Summary of careless responses", in_title)
1566816443248:, size = "scriptsize", longtable = T, ctable=F, landscape = F
1566816443248:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443249:}
1566816443249:write("", file = filename, append = T)
1566816443249:write("\\end{landscape}", file = filename, append = T)
1566816443250:if (!append) {
1566816443250:write("", file = filename, append = T)
1566816443250:write("\\end{document}", file = filename, append = T)
1566816443251:}
1566816443251:}
1566816443252:## Summary of careless responses
1566816443252:write_winsorized_in_latex <- function(dd, filename, in_title = NULL, append = F) {
1566816443252:library(Hmisc)
1566816443252:write("", file = filename, append = append)
1566816443253:if (!append) {
1566816443253:write(paste("\\documentclass[6pt,a4paper]{article}"
1566816443253:,"\\usepackage[a4paper,margin=0.54cm]{geometry}"
1566816443253:,"\\usepackage{longtable}"
1566816443253:,"\\usepackage{rotating}"
1566816443254:,"\\usepackage{pdflscape}"
1566816443254:,"\\usepackage{ctable}"
1566816443254:, paste("\\title{Summary of winsorized responses",in_title,"}")
1566816443254:, "\\date{}"
1566816443254:,"\\begin{document}", sep = "\n")
1566816443255:, file = filename, append = T)
1566816443255:write("", file = filename, append = T)
1566816443255:write("\\maketitle", file = filename, append = T)
1566816443255:write("", file = filename, append = T)
1566816443256:}
1566816443256:write("", file = filename, append = T)
1566816443256:write("\\begin{landscape}", file = filename, append = T)
1566816443257:if (!is.null(dd$get_data()) && length(dd$get_data()) > 0) {
1566816443257:write("", file = filename, append = T)
1566816443257:latex(
1566816443258:as.data.frame(dd$get_data())
1566816443258:, rowname = NULL
1566816443258:, caption = paste("Summary of Winsorized responses", in_title)
1566816443258:, size = "scriptsize", longtable = T, ctable=F, landscape = F
1566816443259:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443259:}
1566816443259:write("", file = filename, append = T)
1566816443260:write("\\end{landscape}", file = filename, append = T)
1566816443260:if (!append) {
1566816443260:write("", file = filename, append = T)
1566816443261:write("\\end{document}", file = filename, append = T)
1566816443261:}
1566816443261:}
1566816443262:## Write goodness of fit statistic fo the models
1566816443262:write_cfa_model_fits_in_latex <- function(fitMeasures_df, filename, in_title = NULL, append = F) {
1566816443262:library(Hmisc)
1566816443263:write("", file = filename, append = append)
1566816443263:if (!append) {
1566816443263:write(paste("\\documentclass[6pt]{article}"
1566816443263:,"\\usepackage{longtable}"
1566816443263:,"\\usepackage{rotating}"
1566816443264:,"\\usepackage{lscape}"
1566816443264:,"\\usepackage{ctable}"
1566816443264:, "\\date{}"
1566816443264:,"\\begin{document}", sep = "\n")
1566816443265:, file = filename, append = T)
1566816443265:write("\\section{Goodness of Fit Statistics}", file = filename, append = T)
1566816443265:}
1566816443266:latex(
1566816443266:round(fitMeasures_df, 2)
1566816443266:, caption = paste("Goodness of fit statistics", in_title)
1566816443266:, size = "scriptsize", longtable = T, ctable=F, landscape = F
1566816443266:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443267:write(paste(
1566816443267:"\\begin{flushright}{\\tiny"
1566816443267:, "df: degree of freedom; AGFI: Adjusted Goodness of Fit Index;"
1566816443268:, "CFI: Comparative Fit Index; TLI: Tucker-Lewis Index;"
1566816443268:, "RMSEA: Root Mean Square Error of Approximation"
1566816443268:, "}\\end{flushright}\n"), file = filename, append = T)
1566816443269:if (!append) {
1566816443269:write("\\end{document}", file = filename, append = T)
1566816443269:}
1566816443269:}
1566816443270:## Write rating scale model as latex
1566816443270:write_rsm_in_latex <- function(rsm_summaries, filename, in_title = NULL, append = F
1566816443270:, irt.name = "Rating Scale Model", irt.short.name = "RSM") {
1566816443271:library(Hmisc)
1566816443271:write("", file = filename, append = append)
1566816443271:if (!append) {
1566816443271:write(paste("\\documentclass[6pt]{article}"
1566816443271:,"\\usepackage{longtable}"
1566816443272:,"\\usepackage{rotating}"
1566816443272:,"\\usepackage{lscape}"
1566816443272:,"\\usepackage{ctable}"
1566816443272:, "\\date{}"
1566816443273:,"\\begin{document}", sep = "\n")
1566816443273:, file = filename, append = T)
1566816443273:write(paste0("\\title{Summary of ",irt.name,"}"), file = filename, append = T)
1566816443273:write("\\maketitle", file = filename, append = T)
1566816443273:}
1566816443274:##
1566816443274:write("\\section{Checking Assumptions}", file = filename, append = T)
1566816443274:write("", file = filename, append = T)
1566816443275:##
1566816443275:data_df <- round(rsm_summaries$test_unidimensionality, 3)
1566816443275:colnames(data_df) <- sub("_", ".", colnames(data_df))
1566816443276:latex(
1566816443276:data_df
1566816443276:, caption = paste0("Goodness of fit statistics related to the test of unidimensionality"
1566816443276:, "in the ",irt.short.name,"-based instrument ", in_title)
1566816443277:, size = "small", longtable = T, ctable=F, landscape = F
1566816443277:, where='!htbp', file = filename, append = T)
1566816443277:write(paste(
1566816443277:"\\begin{flushright}{\\tiny"
1566816443278:, "df: degree of freedom; AGFI: Adjusted Goodness of Fit Index;"
1566816443278:, "CFI: Comparative Fit Index; TLI: Tucker-Lewis Index;"
1566816443279:#, "p.RMSEA: p-value of Root Mean Square Error of Approximation"
1566816443279:, "}\\end{flushright}\n"), file = filename, append = T)
1566816443279:write("", file = filename, append = T)
1566816443280:##
1566816443280:data_df <- round(rsm_summaries$test_local_independence, 3)
1566816443281:colnames(data_df) <- sub("_", ".", colnames(data_df))
1566816443281:latex(
1566816443281:data_df
1566816443282:, caption = paste0("Item residual correlation statistics"
1566816443282:,"related to the test of local independence"
1566816443282:, "in the ",irt.short.name,"-based instrument " , in_title)
1566816443282:, size = "small", longtable = T, ctable=F, landscape = F
1566816443283:, where='!htbp', file = filename, append = T)
1566816443283:write(paste(
1566816443283:"\\begin{flushright}{\\tiny"
1566816443284:, "aQ3: adjusted correlation of item residuals;"
1566816443284:, "maxaQ3: maximum aQ3;"
1566816443285:, "MADaQ3: Median Absolute Deviation of aQ3;"
1566816443285:, "}\\end{flushright}\n"), file = filename, append = T)
1566816443286:write("", file = filename, append = T)
1566816443286:##
1566816443286:data_df <- round(rsm_summaries$test_monotonicity, 2)
1566816443287:colnames(data_df) <- sub("_", ".", colnames(data_df))
1566816443287:colnames(data_df) <- gsub("#", "", colnames(data_df))
1566816443288:latex(
1566816443288:data_df
1566816443288:, caption = paste0("Test of monotonicity in the ",irt.short.name,"-based instrument ", in_title)
1566816443289:, size = "scriptsize", longtable = T, ctable=F, landscape = F
1566816443289:, where='!htbp', file = filename, append = T)
1566816443289:write(paste(
1566816443290:"\\begin{flushright}{\\tiny"
1566816443290:, "vi: numer of violations;"
1566816443291:, "vi/ac: proportion of active pairs;"
1566816443291:, "maxvi: maximum violations; sum: sum of all violations;"
1566816443292:, "zmax: maximum z-value;"
1566816443293:, "zsig: number of significant z-values; crit: Critical value"
1566816443293:, "}\\end{flushright}\n"), file = filename, append = T)
1566816443294:write("", file = filename, append = T)
1566816443294:##
1566816443295:write("\\section{Estimating Item Parameters}", file = filename, append = T)
1566816443295:write("", file = filename, append = T)
1566816443296:for (lname in names(rsm_summaries$estimated_params)) {
1566816443296:estimated_params_df <- round(rsm_summaries$estimated_params[[lname]],3)
1566816443297:latex(
1566816443297:estimated_params_df
1566816443298:, caption = paste0("Estimated parameters in the ",irt.short.name,"-based instrument"
1566816443298:, " for measuring the ", lname)
1566816443299:, size = "scriptsize", longtable = T, ctable=F, landscape = F
1566816443299:, where='!htbp', file = filename, append = T)
1566816443299:write("", file = filename, append = T)
1566816443300:}
1566816443301:##
1566816443301:write("\\section{Latent Trait Estimates}", file = filename, append = T)
1566816443302:write("", file = filename, append = T)
1566816443302:##
1566816443303:data_df <- round(rsm_summaries$person_ability, 3)
1566816443303:colnames(data_df) <- sub("_", ".", colnames(data_df))
1566816443304:latex(
1566816443304:data_df
1566816443305:, caption = paste0("Latent trait estimates and person model fit of the ",irt.short.name,"-based instrument ", in_title)
1566816443305:, size = "scriptsize", longtable = T, ctable=F, landscape = T
1566816443306:, rowlabel = "", where='!htbp', file = filename, append = T)
1566816443306:write("", file = filename, append = T)
1566816443307:if (!append) {
1566816443308:write("\\end{document}", file = filename, append = T)
1566816443308:}
1566816443309:}
1566816443310:## Write rating scale model as latex
1566816443310:write_gpcm_in_latex <- function(gpcm_summaries, filename, in_title = NULL, append = F) {
1566816443310:write_rsm_in_latex(gpcm_summaries, filename, in_title = in_title, append = append
1566816443310:, irt.name = "Generalized Partial Credit Model", irt.short.name = "GPCM")
1566816443310:}
1566816443311:## Write summary of correlation matrix_mods
1566816443311:write_summary_corr_matrix_mods_in_latex <- function(corr_matrix_mods, filename, in_title = NULL, append = F) {
1566816443311:library(Hmisc)
1566816443312:write("", file = filename, append = append)
1566816443312:if (!append) {
1566816443312:write(paste("\\documentclass[6pt,a4paper]{article}"
1566816443312:,"\\usepackage[a4paper,margin=0.54cm]{geometry}"
1566816443313:,"\\usepackage{longtable}"
1566816443313:,"\\usepackage{rotating}"
1566816443313:,"\\usepackage{pdflscape}"
1566816443313:,"\\usepackage{ctable}"
1566816443314:,paste("\\title{Summary of correlation analysis",in_title,"}")
1566816443314:, "\\date{}"
1566816443314:,"\\begin{document}", sep = "\n")
1566816443314:, file = filename, append = T)
1566816443315:write("", file = filename, append = T)
1566816443315:write("\\maketitle", file = filename, append = T)
1566816443315:write("", file = filename, append = T)
1566816443315:}
1566816443316:##
1566816443316:write("", file = filename, append = T)
1566816443316:lapply(corr_matrix_mods, FUN = function(mod) {
1566816443317:write(paste0("\\section{",mod$title,"}"), file = filename, append = T)
1566816443317:write("", file = filename, append = T)
1566816443317:M <- cor(mod$data, method = mod$method)
1566816443318:p_mat <- cor.mtest(mod$data, method = mod$method)
1566816443318:latex(
1566816443318:round(M, 4)
1566816443319:, caption = paste("Correlation matrix", "of", mod$title, in_title)
1566816443319:, size = "scriptsize", longtable = T, ctable=F, landscape = F
1566816443319:, insert.bottom = paste("method: ", mod$method)
1566816443320:, where='!htbp', file = filename, append = T)
1566816443320:write("", file = filename, append = T)
1566816443320:latex(
1566816443321:round(p_mat, 4)
1566816443321:, caption = paste("Correlation matrix with p-values", "of", mod$title, in_title)
1566816443321:, size = "scriptsize", longtable = T, ctable=F, landscape = F
1566816443322:, insert.bottom = paste("method: ", mod$method)
1566816443322:, where='!htbp', file = filename, append = T)
1566816443322:write("", file = filename, append = T)
1566816443323:})
1566816443323:if (!append) {
1566816443324:write("\\end{document}", file = filename, append = T)
1566816443324:}
1566816443324:}
1566816452961:wants <- c('reshape', 'ggplot2', 'dplyr', 'readr', 'readxl', 'psych', 'corrplot', 'PerformanceAnalytics')
1566816452962:has   <- wants %in% rownames(installed.packages())
1566816452967:if(any(!has)) install.packages(wants[!has])
1566816452968:###############################################################################
1566816452968:## Functions to get modules                                                  ##
1566816452969:###############################################################################
1566816452970:## Function to get correlation magnitude
1566816452970:get_corr_magnitude <- function(mod) {
1566816452970:r1 <- mod$r
1566816452971:diag(r1) <- NA
1566816452971:r_val <- max(abs(r1), na.rm=T)
1566816452972:mag1 <- 'non-linear'
1566816452972:if (r_val > 0.3 & r_val <= 0.5) mag1 <- 'weak'
1566816452972:if (r_val > 0.5 & r_val <= 0.7) mag1 <- 'moderate'
1566816452973:if (r_val > 0.7 & r_val <= 1.0) mag1 <- 'strong'
1566816452974:return(mag1)
1566816452975:}
1566816452976:## Function computing the p-value of correlations
1566816452976:cor.mtest <- function(mat, ...) {
1566816452976:mat <- as.matrix(mat)
1566816452977:n <- ncol(mat)
1566816452977:p.mat<- matrix(NA, n, n)
1566816452978:diag(p.mat) <- 0
1566816452978:for (i in 1:(n - 1)) {
1566816452978:for (j in (i + 1):n) {
1566816452979:tmp <- cor.test(mat[, i], mat[, j], ...)
1566816452979:p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
1566816452980:}
1566816452980:}
1566816452980:colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
1566816452981:return(p.mat)
1566816452981:}
1566816452982:## Function to get global data
1566816452983:get_data_for_gobal_corr <- function(corr_mods, participants, wid) {
1566816452983:result <- list()
1566816452984:for (name_pair in names(corr_mods)) {
1566816452984:mods <- corr_mods[[name_pair]]
1566816452985:for (sub_name in names(mods)) {
1566816452985:dat <- result[[sub_name]]
1566816452985:if (is.null(dat)) {
1566816452986:dat <- participants[c(wid)]
1566816452986:}
1566816452986:rdat <- mods[[sub_name]]$data.full
1566816452987:result[[sub_name]] <- merge(dat, rdat)
1566816452987:}
1566816452988:}
1566816452988:return(result)
1566816452989:}
1566816452989:## Function to get correlation modules
1566816452990:get_corr_pair_mods <- function(participants, iv, wid, between, observed = NULL
1566816452990:, corr_var, info_src, include.subs = F, method = "pearson") {
1566816452990:library(psych)
1566816452991:grid_models <- expand.grid(corr_var)
1566816452991:name_models <- do.call(paste, c(grid_models , sep="_"))
1566816452992:name_models <- gsub("[_]NA", "", gsub("NA[_]","", name_models))
1566816452992:factor_columns <- base::unique(c(iv, between, observed))
1566816452993:factor_columns <- unique(c(iv, factor_columns[!factor_columns %in% iv]))
1566816452993:corr_result <- list()
1566816452994:# iterates in correlations
1566816452994:for (i in 1:length(name_models)) {
1566816452995:sub_corr_mods <- list()
1566816452996:dat <- NULL
1566816452996:columns <- c()
1566816452996:name_mod <- name_models[[i]]
1566816452997:for (j in 1:length(grid_models[i,])) {
1566816452998:info <- info_src[[as.character(grid_models[[j]][[i]])]]
1566816452998:rdat <- read_excel(info$filename, sheet = info$sheed)
1566816452999:dv <- info$dv
1566816452999:if (!is.null(info$dv.name) && (length(info$dv.name) > 0)) {
1566816453000:rdat[[info$dv.name]] <- rdat[[info$dv]]
1566816453000:dv <- info$dv.name
1566816453001:}
1566816453003:if (is.null(dat)) {
1566816453003:dat <- rdat[c(info$wid, dv)]
1566816453003:} else {
1566816453004:dat <- merge(dat, rdat[c(info$wid, dv)], by.x = by_x, by.y = info$wid)
1566816453004:}
1566816453005:columns <- c(columns, dv)
1566816453005:by_x = info$wid
1566816453006:}
1566816453006:sub_corr_mods[['main']] <- list(
1566816453007:data = dat[columns]
1566816453007:, wid = wid
1566816453008:, data.full = dat
1566816453008:, mod = corr.test(dat[columns], method = method)
1566816453009:, method = method)
1566816453010:## sub - modules
1566816453010:if (include.subs) {
1566816453010:wdat <- merge(participants, dat, by.x = wid, by.y = by_x)
1566816453011:for (m in 1:length(factor_columns)) {
1566816453011:comb_factor_columns <- combn(factor_columns, m, simplify = T)
1566816453013:for (i2 in 1:ncol(comb_factor_columns)) {
1566816453014:selected_factor_columns  <- comb_factor_columns[,i2]
1566816453015:cname <- paste0(selected_factor_columns, collapse = ':')
1566816453015:factors <- factor(apply(wdat[selected_factor_columns], 1, paste, collapse='.'))
1566816453016:for (nlevel in levels(factors)) {
1566816453016:sub_corr_mods[[nlevel]] <- list(
1566816453017:data = wdat[factors == nlevel,][columns]
1566816453017:, wid = wid
1566816453018:, data.full = wdat[factors == nlevel,]
1566816453018:, mod = corr.test(wdat[factors == nlevel,][columns], method = method)
1566816453019:, method = method)
1566816453020:}
1566816453020:}
1566816453021:}
1566816453021:}
1566816453022:corr_result[[name_mod]] <- sub_corr_mods
1566816453023:}
1566816453024:return(corr_result)
1566816453042:}
1566816453048:## Function get matrix mods
1566816453049:get_corr_matrix_mods <- function(participants, corr_pair_mods, dvs, wid = 'UserID', method = "pearson") {
1566816453050:library(psych)
1566816453051:corr_dat <- get_data_for_gobal_corr(corr_pair_mods, participants, wid)
1566816453053:i <- 1
1566816453054:result <- list()
1566816453055:for (part_of_title in names(dvs)) {
1566816453057:j <- 1
1566816453057:columns <- dvs[[part_of_title]]
1566816453058:for (sub_name in names(corr_dat)) {
1566816453060:sub_main <- ''
1566816453061:if (sub_name != 'main') {
1566816453062:sub_main <- paste0(' for the group ', sub_name)
1566816453063:}
1566816453064:cdat <- corr_dat[[sub_name]]
1566816453066:part_filename <- gsub(
1566816453067:':', '', gsub('/', '', gsub(' ', '', paste0(part_of_title, sub_main))))
1566816453068:filename <- paste0(part_filename, i, '.png')
1566816453071:result[[paste0('corr_',i,'_',j)]] <- list(
1566816453072:filename = filename
1566816453073:, title = paste0(part_of_title, sub_main)
1566816453074:, mod = corr.test(cdat[columns], method = method)
1566816453075:, data = cdat[columns]
1566816453076:, data.full = cdat
1566816453076:, method = method
1566816453077:)
1566816453079:j <- j+1
1566816453079:}
1566816453080:i <- i+1
1566816453081:}
1566816453083:return(result)
1566816453084:}
1566816453085:###############################################################################
1566816453085:## Functions to plots correlations results                                   ##
1566816453086:###############################################################################
1566816453086:## Function to write plots of pair charts
1566816453087:write_scatter_plots <- function(corr_mods, path, override = T) {
1566816453087:library(psych)
1566816453088:library(ggpubr)
1566816453088:for (model_name in names(corr_mods)) {
1566816453089:mods <- corr_mods[[model_name]]
1566816453089:for (sub_name in names(mods)) {
1566816453089:corr_mod <- mods[[sub_name]]
1566816453090:file_name <- gsub(':', '.', gsub('/', '', sub_name))
1566816453090:sub_title <- sub_name; if (sub_name == 'main') sub_title <- ''
1566816453091:cdat <- corr_mod$data.full
1566816453091:rownames(cdat) <- corr_mod$data.full[[corr_mod$wid]]
1566816453092:cdat <- cdat[,colnames(corr_mod$data)]
1566816453092:dvs <- colnames(cdat)
1566816453093:colnames(cdat) <- gsub(' ', '', gsub('/', '', colnames(cdat)))
1566816453093:filename <- paste0(path, model_name, file_name, '.png')
1566816453094:if (!file.exists(filename) || override) {
1566816453094:png(filename = filename, width = 640, height = 640)
1566816453094:p <- ggscatter(cdat, x = colnames(cdat)[[1]], y = colnames(cdat)[[2]]
1566816453095:, add = "reg.line", conf.int = T, cor.coef = T
1566816453095:, cor.method = corr_mod$method
1566816453095:, xlab = dvs[[1]]
1566816453096:, ylab = dvs[[2]]
1566816453096:, subtitle = sub_title
1566816453096:, cor.coef.size = 8
1566816453097:, font.label = c(14, "bold", "red")
1566816453097:)
1566816453097:print(p +
1566816453098:font("title", size = 22)+
1566816453098:font("subtitle", size = 20)+
1566816453099:font("caption", size = 20)+
1566816453099:font("xlab", size = 20)+
1566816453099:font("ylab", size = 20)+
1566816453100:font("xy.text", size = 20))
1566816453100:dev.off()
1566816453101:}
1566816453101:filename <- paste0(path, model_name, file_name, '_rev.png')
1566816453102:if (!file.exists(filename) || override) {
1566816453102:png(filename = filename, width = 640, height = 640)
1566816453103:p <- ggscatter(cdat, x = colnames(cdat)[[2]], y = colnames(cdat)[[1]]
1566816453103:, add = "reg.line", conf.int = T, cor.coef = T
1566816453104:, cor.method = corr_mod$method
1566816453104:, xlab = dvs[[2]]
1566816453104:, ylab = dvs[[1]]
1566816453105:, subtitle = sub_title
1566816453105:, cor.coef.size = 8
1566816453106:, font.label = c(14, "bold", "red")
1566816453106:)
1566816453107:print(p +
1566816453107:font("title", size = 22)+
1566816453107:font("subtitle", size = 20)+
1566816453108:font("caption", size = 20)+
1566816453108:font("xlab", size = 20)+
1566816453109:font("ylab", size = 20)+
1566816453109:font("xy.text", size = 20))
1566816453110:dev.off()
1566816453110:}
1566816453111:}
1566816453112:}
1566816453112:}
1566816453113:## Function to write plots of pair charts
1566816453114:write_corr_chart_plots <- function(corr_mods, path, override = T) {
1566816453114:library(psych)
1566816453114:library(ggpubr)
1566816453114:library(PerformanceAnalytics)
1566816453115:for (model_name in names(corr_mods)) {
1566816453115:mods <- corr_mods[[model_name]]
1566816453116:for (sub_name in names(mods)) {
1566816453116:corr_mod <- mods[[sub_name]]
1566816453116:file_name <- gsub(':', '.', gsub('/', '', sub_name))
1566816453117:sub_title <- sub_name; if (sub_name == 'main') sub_title <- ''
1566816453117:filename <- paste0(path, model_name, file_name, '.png')
1566816453117:if (!file.exists(filename) || override) {
1566816453118:png(filename = filename, width = 640, height = 640)
1566816453118:try(chart.Correlation(corr_mod$data, method = corr_mod$method, histogram = T, pch=16
1566816453118:, main=paste0('Correlation ', sub_title,' for '
1566816453118:, paste0(colnames(corr_mod$data), collapse = ' - '))), silent = T)
1566816453119:dev.off()
1566816453119:}
1566816453119:}
1566816453120:}
1566816453120:}
1566816453121:## Function to plots
1566816453121:write_corr_matrix_plots <- function(corr_matrix_mods, path, override = T) {
1566816453121:library(corrplot)
1566816453121:library(RColorBrewer)
1566816453122:lapply(corr_matrix_mods, FUN = function(mod) {
1566816453122:##
1566816453122:col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
1566816453123:M <- cor(mod$data, method = mod$method)
1566816453123:p_mat <- cor.mtest(mod$data, method = mod$method)
1566816453123:filename = paste0(path, mod$filename)
1566816453124:if (!file.exists(filename) || override) {
1566816453124:png(filename = filename, width = 640, height = 640)
1566816453124:corrplot(
1566816453124:M, method="circle", col=col(200),
1566816453125:type="upper", order="original",
1566816453125:addCoef.col="black", # Add coefficient of correlation
1566816453125:tl.col="black", tl.srt=45, #Text label color and rotation
1566816453125:# Combine with significance
1566816453126:p.mat = p_mat, sig.level = 0.05, insig = "blank", mar = c(0, 0, 1, 0),
1566816453126:# hide correlation coefficient on the principal diagonal
1566816453126:title = paste("Correlation of", mod$title), # rect.col = black, outline = TRUE,
1566816453127:tl.cex=0.75, number.cex = 0.75, cl.cex = 0.65,
1566816453127:diag=FALSE
1566816453127:)
1566816453127:dev.off()
1566816453128:}
1566816453128:})
1566816453129:}
1566816453129:###############################################################################
1566816453130:## Functions to write correlations reports                                   ##
1566816453130:###############################################################################
1566816453130:write_corr_matrix_report <- function(corr_matrix_mods, filename, override = T) {
1566816453130:library(r2excel)
1566816453131:if (!file.exists(filename) || override) {
1566816453131:wb <- createWorkbook(type="xlsx")
1566816453131:for (sheetName in names(corr_matrix_mods)) {
1566816453132:corr_info <- corr_matrix_mods[[sheetName]]
1566816453132:write_corr_in_wb(
1566816453132:corr_info$mod, wb, title=corr_info$title, method = corr_info$method
1566816453132:, data = corr_info$data, data.full = corr_info$data.full
1566816453133:, sheetName = paste0(sheetName, '_', corr_info$method))
1566816453133:}
1566816453133:saveWorkbook(wb, filename)
1566816453133:}
1566816453134:}
1566816453134:write_corr_in_wb <- function(mod, wb, title="", magnitude = 'non-linear', i = 0
1566816453134:, method = "pearson", data = NULL, data.full = NULL, sheetName = NULL) {
1566816453134:library(r2excel)
1566816453135:if (is.null(sheetName)) {
1566816453135:sheetName <- paste0(magnitude, '_', method, '_', i)
1566816453135:}
1566816453136:sheet <- xlsx::createSheet(wb, sheetName = sheetName)
1566816453136:xlsx.addHeader(wb, sheet, paste0("Correlation information for ", title, " using the method: ", method), startCol = 1)
1566816453136:xlsx.addLineBreak(sheet, 2)
1566816453136:xlsx.addHeader(wb, sheet, "Correlation matrix", level = 2, startCol = 1)
1566816453137:xlsx.addTable(wb, sheet, as.data.frame(mod$r), startCol = 1, row.names = T)
1566816453137:xlsx.addLineBreak(sheet, 2)
1566816453137:xlsx.addHeader(wb, sheet, "Matrix of t-test value", level = 2, startCol = 1)
1566816453138:xlsx.addTable(wb, sheet, as.data.frame(mod$t), startCol = 1, row.names = T)
1566816453138:xlsx.addLineBreak(sheet, 2)
1566816453138:xlsx.addHeader(wb, sheet, "Probability of values (p-values)", level = 2, startCol = 1)
1566816453139:xlsx.addTable(wb, sheet, as.data.frame(mod$p), startCol = 1, row.names = T)
1566816453139:xlsx.addLineBreak(sheet, 2)
1566816453140:xlsx.addHeader(wb, sheet, "Confidence intervals", level = 2, startCol = 1)
1566816453140:xlsx.addTable(wb, sheet, as.data.frame(mod$ci), startCol = 1, row.names = T)
1566816453141:if (!is.null(data) && nrow(data) > 0) {
1566816453141:xlsx.addLineBreak(sheet, 2)
1566816453141:xlsx.addHeader(wb, sheet, paste0("Data source for ", title), level = 2, startCol = 1)
1566816453142:xlsx.addTable(wb, sheet, data, startCol = 1, row.names = F)
1566816453142:}
1566816453142:if (!is.null(data.full) && nrow(data.full) > 0) {
1566816453143:xlsx.addLineBreak(sheet, 2)
1566816453143:xlsx.addHeader(wb, sheet, paste0("Data full source for ", title), level = 2, startCol = 1)
1566816453143:xlsx.addTable(wb, sheet, data.full, startCol = 1, row.names = F)
1566816453144:}
1566816453145:}
1566816453146:write_corr_mods_in_wb <- function(corr_mods, wb, magnitude = 'non-linear') {
1566816453146:i <- 1
1566816453146:for (pair_factor_name in names(corr_mods)) {
1566816453147:mods <- corr_mods[[pair_factor_name]]
1566816453147:for (sub_set_name in names(mods)) {
1566816453147:cat('\n ... processing ', pair_factor_name, ' in ', sub_set_name, ' for ', magnitude, '\n')
1566816453148:corr_mod <- mods[[sub_set_name]]
1566816453148:mtitle <- paste0(paste0(colnames(corr_mod$data), collapse = " - "), " in ", sub_set_name)
1566816453148:mag <- get_corr_magnitude(corr_mod$mod)
1566816453149:if (mag == magnitude) {
1566816453149:write_corr_in_wb(corr_mod$mod, wb, mtitle, magnitude, i, corr_mod$method
1566816453149:, data = corr_mod$data, data.full = corr_mod$data.full)
1566816453149:}
1566816453150:i <- i+1
1566816453150:}
1566816453151:}
1566816453151:}
1566816453152:## Function to write anova analysis report
1566816453152:write_corr_pair_report <- function(corr_mods, path, override = T, magnitudes = c('strong', 'moderate', 'weak')) {
1566816453152:library(r2excel)
1566816453153:for (magnitude in magnitudes) {
1566816453153:filename = paste0(path, "SimpleCorrPairAnalysis-", magnitude,".xlsx")
1566816453153:if (!file.exists(filename) || override) {
1566816453154:wb <- createWorkbook(type="xlsx")
1566816453154:write_corr_mods_in_wb(corr_mods, wb, magnitude)
1566816453154:saveWorkbook(wb, filename)
1566816453154:}
1566816453155:}
1566816453155:}
1566816457837:install.packages("ggpubr")
1566816498491:wants <- c('RcppAlgos', 'MVN', 'robustHD', 'daff', 'plyr', 'dplyr', 'readr')
1566816499328:has <- wants %in% rownames(installed.packages())
1566816499624:if (any(!has)) install.packages(wants[!has])
1566816500094:library(MVN)
1566816501669:library(daff)
1566816501700:library(plyr)
1566816501713:library(robustHD)
1566816501788:library(readr)
1566816501788:library(dplyr)
1566816501789:library(car)
1566816501811:library(afex)
1566816501812:library(dplyr)
1566816501812:library(stats)
1566816501813:library(ez)
1566816502410:library(parallel)
1566816502816:participants <- read_csv('data/SignedUpParticipants.csv')
1566816504165:sources <- list(
1566816504167:"Attention" = list(
1566816504168:filename = "data/IMMS.csv", name = "Attention"
1566816504168:, extra_rmids = c(), folder = "attention"
1566816504168:)
1566816504169:, "Relevance" = list(
1566816504169:filename = "data/IMMS.csv", name = "Relevance"
1566816504169:, extra_rmids = c(), folder = "relevance"
1566816504170:)
1566816504170:, "Satisfaction" = list(
1566816504170:filename = "data/IMMS.csv", name = "Satisfaction"
1566816504171:, extra_rmids = c(), folder = "satisfaction"
1566816504171:)
1566816504172:, "Level of Motivation" = list(
1566816504172:filename = "data/IMMS.csv", name = "Level of Motivation"
1566816504172:, extra_rmids = c(), folder = "level-of-motivation"
1566816504173:)
1566816504173:)
1566816505660:##
1566816505670:sdat_map <- lapply(sources, FUN = function(src) {
1566816505670:if (!is.null(src$filename)) {
1566816505671:sdat <- read_csv(src$filename)
1566816505671:#sdat[[src$name]] <- sdat[[src$name]]
1566816505672:return(sdat)
1566816505672:}
1566816505672:})
1566816506391:##
1566816506398:dvs <- c("Attention", "Relevance", "Satisfaction", "Level of Motivation")
1566816507266:list_dvs <- as.list(dvs)
1566816509789:names(list_dvs) <- dvs
1566816510524:list_info <- lapply(list_dvs, FUN = function(dv) {
1566816510529:name <- gsub('\\W', '', dv)
1566816510529:ivs <- c("Type")
1566816510530:list_ivs <- as.list(ivs)
1566816510530:names(list_ivs) <- ivs
1566816510531:info <- lapply(list_ivs, function(iv) {
1566816510531:return(list(
1566816510532:title = paste0(dv, " by ", iv)
1566816510532:, path = paste0("report/motivation/scr-signedup-participants/", sources[[dv]]$folder,"/by-",iv,"/")
1566816510533:, iv = iv
1566816510533:))
1566816510533:})
1566816510534:return(list(dv=dv, name =name, info = info))
1566816510535:})
1566816511716:#############################################################################
1566816511716:## Non-Parametric Statistic Analysis                                       ##
1566816511717:#############################################################################
1566816511718:all_nonparametric_results <- lapply(list_dvs, function(dv) {
1566816511718:info <- list_info[[dv]]$info
1566816511719:sdat <- merge(participants, sdat_map[[dv]])
1566816511720:dir.create(paste0("report/motivation/scr-signedup-participants/", sources[[dv]]$folder), showWarnings = F)
1566816511721:nonparametric_results <- lapply(info, FUN = function(x) {
1566816511721:cat("\n .... processing: ", x$title, " ....\n")
1566816511722:dir.create(file.path(x$path), showWarnings = F)
1566816511723:dir.create(file.path(x$path, 'nonparametric-analysis-plots'), showWarnings = F)
1566816511724:path <- paste0(x$path, 'nonparametric-analysis-plots/')
1566816511724:filename <- paste0(x$path, 'NonParametricAnalysis.xlsx')
1566816511725:result <- do_nonparametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"))
1566816511726:write_plots_for_nonparametric_test(
1566816511727:result, ylab = "score", title = x$title
1566816511727:, path = path, override = T
1566816511728:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566816511729:)
1566816511729:write_nonparametric_test_report(
1566816511730:result, ylab = "score", title = x$title
1566816511730:, filename = filename, override = T
1566816511731:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566816511732:)
1566816511732:return(result)
1566816511733:})
1566816511734:})
1566816615879:#############################################################################
1566816615880:## Non-Parametric Statistic Analysis                                       ##
1566816615880:#############################################################################
1566816615881:all_nonparametric_results <- lapply(list_dvs, function(dv) {
1566816615881:info <- list_info[[dv]]$info
1566816615882:sdat <- merge(participants, sdat_map[[dv]])
1566816615882:dir.create(paste0("report/motivation/scr-signedup-participants/", sources[[dv]]$folder), showWarnings = F)
1566816615883:nonparametric_results <- lapply(info, FUN = function(x) {
1566816615883:cat("\n .... processing: ", x$title, " ....\n")
1566816615884:dir.create(file.path(x$path), showWarnings = F)
1566816615884:dir.create(file.path(x$path, 'nonparametric-analysis-plots'), showWarnings = F)
1566816615885:path <- paste0(x$path, 'nonparametric-analysis-plots/')
1566816615886:filename <- paste0(x$path, 'NonParametricAnalysis.xlsx')
1566816615886:result <- do_nonparametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"))
1566816615887:write_plots_for_nonparametric_test(
1566816615888:result, ylab = "score", title = x$title
1566816615888:, path = path, override = T
1566816615888:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566816615889:)
1566816615889:write_nonparametric_test_report(
1566816615889:result, ylab = "score", title = x$title
1566816615890:, filename = filename, override = T
1566816615890:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566816615891:)
1566816615891:return(result)
1566816615892:})
1566816615892:})
1566816666607:#############################################################################
1566816666607:## Non-Parametric Statistic Analysis                                       ##
1566816666608:#############################################################################
1566816666608:all_nonparametric_results <- lapply(list_dvs, function(dv) {
1566816666609:info <- list_info[[dv]]$info
1566816666609:sdat <- merge(participants, sdat_map[[dv]])
1566816666610:dir.create(paste0("report/motivation/scr-signedup-participants/", sources[[dv]]$folder), showWarnings = F)
1566816666611:nonparametric_results <- lapply(info, FUN = function(x) {
1566816666611:cat("\n .... processing: ", x$title, " ....\n")
1566816666612:dir.create(file.path(x$path), showWarnings = F)
1566816666613:dir.create(file.path(x$path, 'nonparametric-analysis-plots'), showWarnings = F)
1566816666614:path <- paste0(x$path, 'nonparametric-analysis-plots/')
1566816666614:filename <- paste0(x$path, 'NonParametricAnalysis.xlsx')
1566816666615:result <- do_nonparametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"))
1566816666616:write_plots_for_nonparametric_test(
1566816666616:result, ylab = "score", title = x$title
1566816666616:, path = path, override = T
1566816666617:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566816666617:)
1566816666618:write_nonparametric_test_report(
1566816666618:result, ylab = "score", title = x$title
1566816666619:, filename = filename, override = T
1566816666619:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566816666620:)
1566816666620:return(result)
1566816666621:})
1566816666621:})
1566816712419:#############################################################################
1566816712420:## Non-Parametric Statistic Analysis                                       ##
1566816712420:#############################################################################
1566816712420:all_nonparametric_results <- lapply(list_dvs, function(dv) {
1566816712421:info <- list_info[[dv]]$info
1566816712421:sdat <- merge(participants, sdat_map[[dv]])
1566816712422:dir.create(paste0("report/motivation/scr-signedup-participants/", sources[[dv]]$folder), showWarnings = F)
1566816712422:nonparametric_results <- lapply(info, FUN = function(x) {
1566816712423:cat("\n .... processing: ", x$title, " ....\n")
1566816712423:dir.create(file.path(x$path), showWarnings = F)
1566816712423:dir.create(file.path(x$path, 'nonparametric-analysis-plots'), showWarnings = F)
1566816712424:path <- paste0(x$path, 'nonparametric-analysis-plots/')
1566816712425:filename <- paste0(x$path, 'NonParametricAnalysis.xlsx')
1566816712425:result <- do_nonparametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"))
1566816712426:write_plots_for_nonparametric_test(
1566816712426:result, ylab = "score", title = x$title
1566816712427:, path = path, override = T
1566816712427:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566816712428:)
1566816712428:write_nonparametric_test_report(
1566816712429:result, ylab = "score", title = x$title
1566816712429:, filename = filename, override = T
1566816712429:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566816712430:)
1566816712430:return(result)
1566816712431:})
1566816712431:})
1566816732432:dv <- list_dvs$Attention
1566816735615:info <- list_info[[dv]]$info
1566816737219:sdat <- merge(participants, sdat_map[[dv]])
1566816739643:dir.create(paste0("report/motivation/scr-signedup-participants/", sources[[dv]]$folder), showWarnings = F)
1566816960576:#############################################################################
1566816960576:## Non-Parametric Statistic Analysis                                       ##
1566816960577:#############################################################################
1566816960577:all_nonparametric_results <- lapply(list_dvs, function(dv) {
1566816960578:info <- list_info[[dv]]$info
1566816960578:sdat <- merge(participants, sdat_map[[dv]])
1566816960579:dir.create(paste0("report/motivation/scr-signedup-participants/", sources[[dv]]$folder), showWarnings = F)
1566816960579:nonparametric_results <- lapply(info, FUN = function(x) {
1566816960580:cat("\n .... processing: ", x$title, " ....\n")
1566816960580:dir.create(file.path(x$path), showWarnings = F)
1566816960581:dir.create(file.path(x$path, 'nonparametric-analysis-plots'), showWarnings = F)
1566816960582:path <- paste0(x$path, 'nonparametric-analysis-plots/')
1566816960582:filename <- paste0(x$path, 'NonParametricAnalysis.xlsx')
1566816960582:result <- do_nonparametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"))
1566816960583:write_plots_for_nonparametric_test(
1566816960584:result, ylab = "score", title = x$title
1566816960584:, path = path, override = T
1566816960585:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566816960585:)
1566816960585:write_nonparametric_test_report(
1566816960586:result, ylab = "score", title = x$title
1566816960586:, filename = filename, override = T
1566816960587:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566816960587:)
1566816960588:return(result)
1566816960588:})
1566816960589:})
1566816985216:#############################################################################
1566816985217:## Non-Parametric Statistic Analysis                                       ##
1566816985218:#############################################################################
1566816985218:all_nonparametric_results <- lapply(list_dvs, function(dv) {
1566816985219:info <- list_info[[dv]]$info
1566816985219:sdat <- merge(participants, sdat_map[[dv]])
1566816985220:dir.create(paste0("report/motivation/scr-signedup-participants/", sources[[dv]]$folder), showWarnings = F)
1566816985221:nonparametric_results <- lapply(info, FUN = function(x) {
1566816985221:cat("\n .... processing: ", x$title, " ....\n")
1566816985222:dir.create(file.path(x$path), showWarnings = F)
1566816985222:dir.create(file.path(x$path, 'nonparametric-analysis-plots'), showWarnings = F)
1566816985223:path <- paste0(x$path, 'nonparametric-analysis-plots/')
1566816985224:filename <- paste0(x$path, 'NonParametricAnalysis.xlsx')
1566816985224:result <- do_nonparametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"))
1566816985225:write_plots_for_nonparametric_test(
1566816985226:result, ylab = "score", title = x$title
1566816985226:, path = path, override = T
1566816985227:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566816985227:)
1566816985228:write_nonparametric_test_report(
1566816985228:result, ylab = "score", title = x$title
1566816985228:, filename = filename, override = T
1566816985229:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566816985229:)
1566816985230:return(result)
1566816985230:})
1566816985231:})
1566817108156:## translate to latex
1566817108156:lapply(list_dvs, function(dv) {
1566817108157:info <- list_info[[dv]]$info
1566817108157:nonparametric_results <- all_nonparametric_results[[dv]]
1566817108158:##
1566817108158:write_nonparam_statistics_analysis_in_latex(
1566817108159:nonparametric_results, dvs = names(info)
1566817108159:, filename = paste0("report/latex/motivation-signedup/nonparametric-", sources[[dv]]$folder, "-scr-analysis.tex")
1566817108160:, in_title = paste0(" for the scores of ", dv, " in the second study for signed up students")
1566817108160:)
1566817108160:})
1566817528376:#############################################################################
1566817528376:## Parametric Statistic Analysis                                           ##
1566817528377:#############################################################################
1566817528377:winsor_mod <- winsorize_two_by_two_design(participants, sdat_map, list_dvs, ivs_list = list(
1566817528377:iv1 = list(iv = "Type", values = c("non-gamified", "ont-gamified"))
1566817528378:, iv2 = list(iv = "CLRole", values = c("Master", "Apprentice"))
1566817528378:))
1566817529779:render_diff(winsor_mod$diff_dat)
1566817530566:(mvn_mod <- mvn(winsor_mod$wdat[,dvs], univariatePlot = "box", univariateTest = "SW"))
1566817561143:#
1566817561144:skip_stop <- c()
1566817561936:extra_rmids <- list()
1566817571704:# Validate Assumptions - fail Pressure/Tension
1566817571786:lapply(list_dvs, function(dv) {
1566817571786:info <- list_info[[dv]]$info
1566817571787:lapply(info, FUN = function(x) {
1566817571787:sdat <- winsor_mod$wdat
1566817571788:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566817571788:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566817571789:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566817571789:}
1566817571790:result <- do_parametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566817571790:cat('\n... checking assumptions for: ', dv, ' by ', x$iv, '\n')
1566817571790:print(result$test.min.size$error.warning.list)
1566817571791:if (result$normality.fail) cat('\n... normality fail ...\n')
1566817571791:if (result$homogeneity.fail) cat('\n... homogeneity fail ...\n')
1566817571792:if (result$assumptions.fail) {
1566817571792:plot_assumptions_for_parametric_test(result, x$dv)
1566817571793:if (result$normality.fail) pnormPlot(result)
1566817571794:stopifnot(dv %in% skip_stop)
1566817571794:}
1566817571794:})
1566817571795:})
1566817683693:# Validate Assumptions - fail Pressure/Tension
1566817683832:lapply(list_dvs, function(dv) {
1566817683957:info <- list_info[[dv]]$info
1566817683958:lapply(info, FUN = function(x) {
1566817683959:sdat <- winsor_mod$wdat
1566817683960:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566817683961:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566817683962:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566817683964:}
1566817683966:result <- do_parametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566817683967:cat('\n... checking assumptions for: ', dv, ' by ', x$iv, '\n')
1566817683968:print(result$test.min.size$error.warning.list)
1566817683970:if (result$normality.fail) cat('\n... normality fail ...\n')
1566817683971:if (result$homogeneity.fail) cat('\n... homogeneity fail ...\n')
1566817683972:if (result$assumptions.fail) {
1566817683973:plot_assumptions_for_parametric_test(result, x$dv)
1566817683974:if (result$normality.fail) pnormPlot(result)
1566817683975:stopifnot(dv %in% skip_stop)
1566817683977:}
1566817683978:})
1566817683979:})
1566817705408:# Validate Assumptions - fail Pressure/Tension
1566817705408:lapply(list_dvs, function(dv) {
1566817705409:info <- list_info[[dv]]$info
1566817705410:lapply(info, FUN = function(x) {
1566817705411:sdat <- winsor_mod$wdat
1566817705411:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566817705412:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566817705412:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566817705413:}
1566817705413:result <- do_parametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566817705414:cat('\n... checking assumptions for: ', dv, ' by ', x$iv, '\n')
1566817705414:print(result$test.min.size$error.warning.list)
1566817705415:if (result$normality.fail) cat('\n... normality fail ...\n')
1566817705416:if (result$homogeneity.fail) cat('\n... homogeneity fail ...\n')
1566817705416:if (result$assumptions.fail) {
1566817705417:plot_assumptions_for_parametric_test(result, x$dv)
1566817705417:if (result$normality.fail) pnormPlot(result)
1566817705418:#stopifnot(dv %in% skip_stop)
1566817705419:}
1566817705419:})
1566817705420:})
1566817749109:#
1566817749110:skip_stop <- c()
1566817749403:extra_rmids <- list()
1566817750327:# Validate Assumptions - fail Pressure/Tension
1566817750328:lapply(list_dvs, function(dv) {
1566817750329:info <- list_info[[dv]]$info
1566817750329:lapply(info, FUN = function(x) {
1566817750330:sdat <- winsor_mod$wdat
1566817750330:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566817750331:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566817750331:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566817750332:}
1566817750332:result <- do_parametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566817750333:cat('\n... checking assumptions for: ', dv, ' by ', x$iv, '\n')
1566817750333:print(result$test.min.size$error.warning.list)
1566817750334:if (result$normality.fail) cat('\n... normality fail ...\n')
1566817750334:if (result$homogeneity.fail) cat('\n... homogeneity fail ...\n')
1566817750335:if (result$assumptions.fail) {
1566817750335:plot_assumptions_for_parametric_test(result, x$dv)
1566817750336:if (result$normality.fail) pnormPlot(result)
1566817750336:stopifnot(dv %in% skip_stop)
1566817750337:}
1566817750337:})
1566817750337:})
1566817950949:# Validate Assumptions - fail Pressure/Tension
1566817950957:lapply(list_dvs, function(dv) {
1566817950957:info <- list_info[[dv]]$info
1566817950957:lapply(info, FUN = function(x) {
1566817950958:sdat <- winsor_mod$wdat
1566817950958:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566817950958:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566817950959:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566817950959:}
1566817950960:result <- do_parametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566817950960:cat('\n... checking assumptions for: ', dv, ' by ', x$iv, '\n')
1566817950961:print(result$test.min.size$error.warning.list)
1566817950961:if (result$normality.fail) cat('\n... normality fail ...\n')
1566817950962:if (result$homogeneity.fail) cat('\n... homogeneity fail ...\n')
1566817950962:if (result$assumptions.fail) {
1566817950963:plot_assumptions_for_parametric_test(result, x$dv)
1566817950964:if (result$normality.fail) pnormPlot(result)
1566817950965:stopifnot(dv %in% skip_stop)
1566817950966:}
1566817951006:})
1566817951007:})
1566818281959:# Validate Assumptions - fail Pressure/Tension
1566818281960:lapply(list_dvs, function(dv) {
1566818281961:info <- list_info[[dv]]$info
1566818281961:lapply(info, FUN = function(x) {
1566818281962:sdat <- winsor_mod$wdat
1566818281962:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566818281963:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566818281963:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566818281963:}
1566818281964:result <- do_parametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566818281965:cat('\n... checking assumptions for: ', dv, ' by ', x$iv, '\n')
1566818281965:print(result$test.min.size$error.warning.list)
1566818281966:if (result$normality.fail) cat('\n... normality fail ...\n')
1566818281966:if (result$homogeneity.fail) cat('\n... homogeneity fail ...\n')
1566818281967:if (result$assumptions.fail) {
1566818281967:plot_assumptions_for_parametric_test(result, x$dv)
1566818281968:if (result$normality.fail) pnormPlot(result)
1566818281968:#stopifnot(dv %in% skip_stop)
1566818281969:}
1566818281969:})
1566818281970:})
1566818372182:# finding solution for Satisfaction
1566818372291:df_assumptions <- get_dataframe_assumptions(
1566818372293:dat = winsor_mod$wdat, from = 56
1566818372294:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566818372295:, path = "data/scr-signedup-satisfaction", generate = F)
1566818391518:(normality_df <- df_assumptions[df_assumptions$normality.fail != T,])
1566818531459:# finding solution for Satisfaction
1566818531460:df_assumptions <- get_dataframe_assumptions(
1566818531461:dat = winsor_mod$wdat, from = 56
1566818531461:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566818531462:, path = "data/scr-signedup-satisfaction", generate = F)
1566818532243:(normality_df <- df_assumptions[df_assumptions$normality.fail != T,])
1566818534806:df_assumptions <- get_dataframe_assumptions(
1566818534807:dat = dplyr::mutate(winsor_mod$wdat, "log.Satisfaction" = log(winsor_mod$wdat$`Satisfaction`))
1566818534807:, from = 57
1566818534808:, wid="UserID", dv="log.Satisfaction", iv="Type", between = c("Type","CLRole")
1566818534808:, path = "data/log-scr-signedup-satisfaction", generate = F)
1566818536018:(normality_df <- df_assumptions[df_assumptions$normality.fail != T,])
1566818603533:winsor_mod$wdat
1566818647103:nrow(winsor_mod$wdat)
1566818649985:nrow(winsor_mod$wdat)
1566818743714:# finding solution for Satisfaction
1566818743715:df_assumptions <- get_dataframe_assumptions(
1566818743716:dat = winsor_mod$wdat, from = 50
1566818743716:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566818743717:, path = "data/scr-signedup-satisfaction", generate = T
1566818743717:, mc.cores = 16)
1566845140479:nrow(winsor_mod$wdat)
1566845168471:# finding solution for Satisfaction
1566845168471:df_assumptions <- get_dataframe_assumptions(
1566845168472:dat = winsor_mod$wdat, from = 53
1566845168472:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566845168473:, path = "data/scr-signedup-satisfaction", generate = T
1566845168473:, mc.cores = 16)
1566894449689:# finding solution for Satisfaction
1566894449689:df_assumptions <- get_dataframe_assumptions(
1566894449690:dat = winsor_mod$wdat, from = 53
1566894449690:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566894449691:, path = "data/scr-signedup-satisfaction", generate = F
1566894449691:, mc.cores = 16)
1566894613300:(normality_df <- df_assumptions[df_assumptions$normality.fail != T,])
1566898791263:View(df_assumptions)
1566898919318:nrow(winsor_mod$wdat)
1566898936390:# finding solution for Satisfaction
1566898936390:df_assumptions <- get_dataframe_assumptions(
1566898936391:dat = winsor_mod$wdat, from = 55
1566898936391:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566898936391:, path = "data/scr-signedup-satisfaction", generate = F
1566898936392:, mc.cores = 16)
1566898950297:View(df_assumptions)
1566899152091:# finding solution for Satisfaction
1566899152116:df_assumptions <- get_dataframe_assumptions(
1566899152364:dat = winsor_mod$wdat, from = 57
1566899152591:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566899152706:, path = "data/scr-signedup-satisfaction", generate = F
1566899152943:, mc.cores = 16)
1566899159658:# finding solution for Satisfaction
1566899159670:df_assumptions <- get_dataframe_assumptions(
1566899159671:dat = winsor_mod$wdat, from = 57
1566899159671:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566899159672:, path = "data/scr-signedup-satisfaction", generate = F
1566899159672:, mc.cores = 16)
1566899176268:# finding solution for Satisfaction
1566899176268:df_assumptions <- get_dataframe_assumptions(
1566899176269:dat = winsor_mod$wdat, from = 57
1566899176269:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566899176270:, path = "data/scr-signedup-satisfaction", generate = F
1566899176270:, mc.cores = 16)
1566899178021:View(df_assumptions)
1566899199867:# finding solution for Satisfaction
1566899199867:df_assumptions <- get_dataframe_assumptions(
1566899199868:dat = winsor_mod$wdat, from = 56
1566899199868:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566899199869:, path = "data/scr-signedup-satisfaction", generate = F
1566899199869:, mc.cores = 16)
1566899201687:View(df_assumptions)
1566899212528:# finding solution for Satisfaction
1566899212528:df_assumptions <- get_dataframe_assumptions(
1566899212529:dat = winsor_mod$wdat, from = 56
1566899212529:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566899212529:, path = "data/scr-signedup-satisfaction", generate = F
1566899212530:, mc.cores = 16)
1566899214445:View(df_assumptions)
1566899228968:# finding solution for Satisfaction
1566899228969:df_assumptions <- get_dataframe_assumptions(
1566899228969:dat = winsor_mod$wdat, from = 56
1566899228970:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566899228970:, path = "data/scr-signedup-satisfaction", generate = F
1566899228971:, mc.cores = 16)
1566899230483:View(df_assumptions)
1566899247013:# finding solution for Satisfaction
1566899247014:df_assumptions <- get_dataframe_assumptions(
1566899247014:dat = winsor_mod$wdat, from = 56
1566899247015:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566899247015:, path = "data/scr-signedup-satisfaction", generate = T
1566899247016:, mc.cores = 16)
1566899301416:View(df_assumptions)
1566899570792:# finding solution for Satisfaction
1566899570792:df_assumptions <- get_dataframe_assumptions(
1566899570793:dat = winsor_mod$wdat, from = 57
1566899570793:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566899570794:, path = "data/scr-signedup-satisfaction", generate = T
1566899570794:, mc.cores = 16)
1566899571900:View(df_assumptions)
1566899640960:# finding solution for Satisfaction
1566899640960:df_assumptions <- get_dataframe_assumptions(
1566899640961:dat = winsor_mod$wdat, from = 57
1566899640961:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566899640962:, path = "data/scr-signedup-satisfaction", generate = T
1566899640963:, mc.cores = 16)
1566899702142:View(df_assumptions)
1566899792695:(normality_df <- df_assumptions[df_assumptions$normality.fail != T,])
1566899806542:# finding solution for Satisfaction
1566899806543:df_assumptions <- get_dataframe_assumptions(
1566899806543:dat = winsor_mod$wdat, from = 56
1566899806544:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566899806544:, path = "data/scr-signedup-satisfaction", generate = T
1566899806545:, mc.cores = 16)
1566899807655:(normality_df <- df_assumptions[df_assumptions$normality.fail != T,])
1566899825680:View(df_assumptions)
1566900135140:# non-normal data in dv=Pressure/Tension
1566900135141:skip_stop <- c()
1566900136055:extra_rmids <- list(
1566900136056:"Satisfaction" = c(48,52)
1566900136056:)
1566900138260:# Validating Normality again but skiping Pressure/Tension
1566900138409:lapply(list_dvs, function(dv) {
1566900138409:info <- list_info[[dv]]$info
1566900138410:lapply(info, FUN = function(x) {
1566900138410:sdat <- winsor_mod$wdat
1566900138410:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566900138411:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566900138411:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566900138411:}
1566900138412:result <- do_parametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566900138412:cat('\n... checking assumptions for: ', dv, ' by ', x$iv, '\n')
1566900138412:print(result$test.min.size$error.warning.list)
1566900138413:if (result$normality.fail) cat('\n... normality fail ...\n')
1566900138413:if (result$homogeneity.fail) cat('\n... homogeneity fail ...\n')
1566900138413:if (result$assumptions.fail) {
1566900138414:plot_assumptions_for_parametric_test(result, x$dv)
1566900138414:if (result$normality.fail) pnormPlot(result)
1566900138415:stopifnot(dv %in% skip_stop)
1566900138415:}
1566900138415:})
1566900138415:})
1566900167658:#############################################################################
1566900167659:## Parametric Statistic Analysis                                           ##
1566900167659:#############################################################################
1566900167659:winsor_mod <- winsorize_two_by_two_design(participants, sdat_map, list_dvs, ivs_list = list(
1566900167660:iv1 = list(iv = "Type", values = c("non-gamified", "ont-gamified"))
1566900167660:, iv2 = list(iv = "CLRole", values = c("Master", "Apprentice"))
1566900167661:))
1566900168039:render_diff(winsor_mod$diff_dat)
1566900168345:(mvn_mod <- mvn(winsor_mod$wdat[,dvs], univariatePlot = "box", univariateTest = "SW"))
1566900168762:#
1566900168763:skip_stop <- c()
1566900169785:extra_rmids <- list()
1566900192691:# Validate Assumptions
1566900192692:lapply(list_dvs, function(dv) {
1566900192693:info <- list_info[[dv]]$info
1566900192693:lapply(info, FUN = function(x) {
1566900192694:sdat <- winsor_mod$wdat
1566900192694:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566900192695:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566900192695:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566900192696:}
1566900192697:result <- do_parametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566900192697:cat('\n... checking assumptions for: ', dv, ' by ', x$iv, '\n')
1566900192698:print(result$test.min.size$error.warning.list)
1566900192698:if (result$normality.fail) cat('\n... normality fail ...\n')
1566900192699:if (result$homogeneity.fail) cat('\n... homogeneity fail ...\n')
1566900192699:if (result$assumptions.fail) {
1566900192700:plot_assumptions_for_parametric_test(result, x$dv)
1566900192779:if (result$normality.fail) pnormPlot(result)
1566900192779:#stopifnot(dv %in% skip_stop)
1566900192779:}
1566900192780:})
1566900192780:})
1566900232475:winsor_mod$wdat
1566900263491:winsor_mod$wdat[48,]
1566900275726:winsor_mod$wdat[c(48,52),]
1566900300767:(winsor_mod$wdat[c(48,52),])
1566900334368:# removing non-normal data
1566900334368:skip_stop <- c()
1566900334770:extra_rmids <- list(
1566900334771:"Satisfaction" = c(10227,10232)
1566900334771:)
1566900335954:# Validating Normality again but skiping Pressure/Tension
1566900335955:lapply(list_dvs, function(dv) {
1566900335956:info <- list_info[[dv]]$info
1566900335956:lapply(info, FUN = function(x) {
1566900335957:sdat <- winsor_mod$wdat
1566900335957:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566900335958:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566900335958:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566900335959:}
1566900335960:result <- do_parametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566900335960:cat('\n... checking assumptions for: ', dv, ' by ', x$iv, '\n')
1566900335961:print(result$test.min.size$error.warning.list)
1566900335961:if (result$normality.fail) cat('\n... normality fail ...\n')
1566900335962:if (result$homogeneity.fail) cat('\n... homogeneity fail ...\n')
1566900335962:if (result$assumptions.fail) {
1566900335963:plot_assumptions_for_parametric_test(result, x$dv)
1566900335963:if (result$normality.fail) pnormPlot(result)
1566900335964:stopifnot(dv %in% skip_stop)
1566900335964:}
1566900335965:})
1566900335966:})
1566900387880:#############################################################################
1566900388172:## Parametric Statistic Analysis                                           ##
1566900388197:#############################################################################
1566900388220:winsor_mod <- winsorize_two_by_two_design(participants, sdat_map, list_dvs, ivs_list = list(
1566900388269:iv1 = list(iv = "Type", values = c("non-gamified", "ont-gamified"))
1566900388294:, iv2 = list(iv = "CLRole", values = c("Master", "Apprentice"))
1566900388294:))
1566900389162:render_diff(winsor_mod$diff_dat)
1566900389772:(mvn_mod <- mvn(winsor_mod$wdat[,dvs], univariatePlot = "box", univariateTest = "SW"))
1566900390325:#
1566900390325:skip_stop <- c()
1566900390912:extra_rmids <- list()
1566900391289:# Validate Assumptions
1566900391290:lapply(list_dvs, function(dv) {
1566900391291:info <- list_info[[dv]]$info
1566900391291:lapply(info, FUN = function(x) {
1566900391292:sdat <- winsor_mod$wdat
1566900391292:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566900391293:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566900391293:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566900391294:}
1566900391294:result <- do_parametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566900391295:cat('\n... checking assumptions for: ', dv, ' by ', x$iv, '\n')
1566900391295:print(result$test.min.size$error.warning.list)
1566900391296:if (result$normality.fail) cat('\n... normality fail ...\n')
1566900391296:if (result$homogeneity.fail) cat('\n... homogeneity fail ...\n')
1566900391297:if (result$assumptions.fail) {
1566900391298:plot_assumptions_for_parametric_test(result, x$dv)
1566900391376:if (result$normality.fail) pnormPlot(result)
1566900391377:stopifnot(dv %in% skip_stop)
1566900391377:}
1566900391377:})
1566900391378:})
1566900395453:# finding solution for Satisfaction
1566900395454:df_assumptions <- get_dataframe_assumptions(
1566900395455:dat = winsor_mod$wdat, from = 56
1566900395455:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566900395456:, path = "data/scr-signedup-satisfaction", generate = T
1566900395457:, mc.cores = 16)
1566900396646:(normality_df <- df_assumptions[df_assumptions$normality.fail != T,])
1566900397199:(winsor_mod$wdat[c(48,52),])
1566900398661:View(df_assumptions)
1566900410960:# removing non-normal data
1566900410961:skip_stop <- c()
1566900411663:extra_rmids <- list(
1566900411664:"Satisfaction" = c(10227,10232)
1566900411665:)
1566900415583:# Validating Normality again but skiping Pressure/Tension
1566900415584:lapply(list_dvs, function(dv) {
1566900415584:info <- list_info[[dv]]$info
1566900415585:lapply(info, FUN = function(x) {
1566900415585:sdat <- winsor_mod$wdat
1566900415586:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566900415586:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566900415586:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566900415587:}
1566900415587:result <- do_parametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566900415588:cat('\n... checking assumptions for: ', dv, ' by ', x$iv, '\n')
1566900415588:print(result$test.min.size$error.warning.list)
1566900415589:if (result$normality.fail) cat('\n... normality fail ...\n')
1566900415589:if (result$homogeneity.fail) cat('\n... homogeneity fail ...\n')
1566900415590:if (result$assumptions.fail) {
1566900415590:plot_assumptions_for_parametric_test(result, x$dv)
1566900415591:if (result$normality.fail) pnormPlot(result)
1566900415592:stopifnot(dv %in% skip_stop)
1566900415592:}
1566900415592:})
1566900415593:})
1566900621176:# finding solution for Satisfaction
1566900621176:df_assumptions <- get_dataframe_assumptions(
1566900621176:dat = winsor_mod$wdat, from = 56
1566900621177:, wid="UserID", dv="Satisfaction", iv="Type", between = c("Type","CLRole")
1566900621177:, path = "data/scr-signedup-satisfaction", generate = T
1566900621177:, mc.cores = 16)
1566900623146:(normality_df <- df_assumptions[df_assumptions$normality.fail != T,])
1566900624625:(winsor_mod$wdat[c(48,52),])
1566900628068:# removing non-normal data
1566900628069:skip_stop <- c()
1566900628605:extra_rmids <- list(
1566900628606:"Satisfaction" = c(10227,10232)
1566900628606:)
1566900629707:# Validating Normality again but skiping Pressure/Tension
1566900629708:lapply(list_dvs, function(dv) {
1566900629708:info <- list_info[[dv]]$info
1566900629709:lapply(info, FUN = function(x) {
1566900629710:sdat <- winsor_mod$wdat
1566900629710:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566900629711:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566900629711:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566900629712:}
1566900629713:result <- do_parametric_test(sdat, wid = 'UserID', dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566900629714:cat('\n... checking assumptions for: ', dv, ' by ', x$iv, '\n')
1566900629714:print(result$test.min.size$error.warning.list)
1566900629715:if (result$normality.fail) cat('\n... normality fail ...\n')
1566900629715:if (result$homogeneity.fail) cat('\n... homogeneity fail ...\n')
1566900629716:if (result$assumptions.fail) {
1566900629716:plot_assumptions_for_parametric_test(result, x$dv)
1566900629717:if (result$normality.fail) pnormPlot(result)
1566900629717:stopifnot(dv %in% skip_stop)
1566900629718:}
1566900629718:})
1566900629719:})
1566900656874:## export reports and plots
1566900656885:all_parametric_results <- lapply(list_dvs, function(dv) {
1566900656886:info <- list_info[[dv]]$info
1566900656886:dir.create(paste0("report/motivation/scr-signedup-participants/", sources[[dv]]$folder), showWarnings = F)
1566900656887:parametric_results <- lapply(info, FUN = function(x) {
1566900656888:cat("\n .... processing: ", x$title, " ....\n")
1566900656888:dir.create(file.path(x$path), showWarnings = F)
1566900656888:dir.create(file.path(x$path, 'parametric-analysis-plots'), showWarnings = F)
1566900656889:path <- paste0(x$path, 'parametric-analysis-plots/')
1566900656890:filename <- paste0(x$path, 'ParametricAnalysis.xlsx')
1566900656891:sdat <- winsor_mod$wdat
1566900656891:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566900656891:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566900656892:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566900656893:}
1566900656894:result <- do_parametric_test(sdat, wid = "UserID", dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566900656894:write_plots_for_parametric_test(
1566900656895:result, ylab = "score", title = x$title
1566900656896:, path = path, override = T
1566900656897:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566900656898:)
1566900656898:write_parametric_test_report(
1566900656899:result, ylab = "score", title = x$title
1566900656899:, filename = filename, override = T
1566900656900:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566900656900:)
1566900656901:return(result)
1566900656901:})
1566900656902:})
1566903883658:## export reports and plots
1566903883660:all_parametric_results <- lapply(list_dvs, function(dv) {
1566903883661:info <- list_info[[dv]]$info
1566903883661:dir.create(paste0("report/motivation/scr-signedup-participants/", sources[[dv]]$folder), showWarnings = F)
1566903883662:parametric_results <- lapply(info, FUN = function(x) {
1566903883662:cat("\n .... processing: ", x$title, " ....\n")
1566903883663:dir.create(file.path(x$path), showWarnings = F)
1566903883663:dir.create(file.path(x$path, 'parametric-analysis-plots'), showWarnings = F)
1566903883664:path <- paste0(x$path, 'parametric-analysis-plots/')
1566903883664:filename <- paste0(x$path, 'ParametricAnalysis.xlsx')
1566903883665:sdat <- winsor_mod$wdat
1566903883665:if (!is.null(extra_rmids[[dv]]) && length(extra_rmids[[dv]]) > 0) {
1566903883666:cat('\n... removing ids c(', extra_rmids[[dv]], ') from: ', dv, ' by ', x$iv, '\n')
1566903883799:sdat <- sdat[!sdat$UserID %in% extra_rmids[[dv]],]
1566903883800:}
1566903883802:result <- do_parametric_test(sdat, wid = "UserID", dv = dv, iv = x$iv, between = c(x$iv, "CLRole"), cstratify = c("CLRole"))
1566903883803:write_plots_for_parametric_test(
1566903883804:result, ylab = "score", title = x$title
1566903883805:, path = path, override = T
1566903883806:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566903883807:)
1566903883808:write_parametric_test_report(
1566903883808:result, ylab = "score", title = x$title
1566903883809:, filename = filename, override = T
1566903883810:, ylim = c(1,7), levels = c('non-gamified','ont-gamified')
1566903883811:)
1566903883812:return(result)
1566903883814:})
1566903883856:})
1566904053281:## translate to latex
1566904053281:write_winsorized_in_latex(
1566904053282:winsor_mod$diff_dat
1566904053282:, filename = "report/latex/motivation-signedup/wisorized-scr-level-of-motivation.tex"
1566904053283:, in_title = paste("for level of motivation scores in the second study for signed-up students")
1566904053283:)
1566904058908:lapply(list_dvs, function(dv) {
1566904058909:info <- list_info[[dv]]$info
1566904058909:parametric_results <- all_parametric_results[[dv]]
1566904058910:##
1566904058910:write_param_statistics_analysis_in_latex(
1566904058911:parametric_results, ivs = names(info)
1566904058911:, filename = paste0("report/latex/motivation-signedup/parametric-", sources[[dv]]$folder, "-scr-analysis.tex")
1566904058912:, in_title = paste0(" for ", dv, " score in the second study for signed-up students")
1566904058912:)
1566904058912:})
1566904084087:#############################################################################
1566904084087:## Global summary                                                          ##
1566904084088:#############################################################################
1566904084089:write_param_and_nonparam_statistics_analysis_in_latex(
1566904084089:all_parametric_results, all_nonparametric_results, list_info
1566904084090:, filename = "report/latex/motivation-signedup/summary-scr-analysis.tex"
1566904084090:, in_title = "in the second study for signed up students"
1566904084091:, min_size_tests = T)
1566904102820:## total score from guttman table
1566904102821:total_score_from_guttman <- function(dat, col_id="UserID", col_score = "score", from_cols = NULL) {
1566904102822:if (is.null(from_cols)) {
1566904102822:from_cols <- colnames(dat)[!colnames(dat) %in% c(col_id)]
1566904102823:}
1566904102823:dat <- dat[, c(col_id, from_cols)]
1566904102823:result <- dat[!complete.cases(dat),]
1566904102824:to_add <- c()
1566904102824:for (i in 1:nrow(result)) {
1566904102825:for (j in 1:ncol(result)) {
1566904102825:if (is.na(result[[i,j]]) && !is.na(result[[i,j-1]])) {
1566904102826:if (all(is.na(result[i,j:ncol(result)]))) {
1566904102826:to_add <- c(to_add, i)
1566904102827:}
1566904102827:break;
1566904102828:}
1566904102828:}
1566904102828:}
1566904102829:result <- rbind(dat[complete.cases(dat),], result[to_add,])
1566904102829:result[is.na(result)] <- 0
1566904102830:result[[col_score]] <- rowSums(result[,c(-1)])
1566904102830:return(result)
1566904102831:}
1566904102832:## functions to calculate greatest common divisor and least common multiple
1566904102833:GCD <- function(u, v) {
1566904102834:if (u %% v != 0) {
1566904102835:return(GCD(v, (u%%v)))
1566904102836:} else {
1566904102836:return(v)
1566904102836:}
1566904102837:}
1566904102837:LCM <- function(u, v) {
1566904102837:return(abs(u*v)/GCD(u, v))
1566904102838:}
1566904102838:## function to round only numeric values in dataframe
1566904102839:round_df <- function(df, digits) {
1566904102839:nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
1566904102840:df[,nums] <- round(df[,nums], digits = digits)
1566904102840:(df)
1566904102841:}
1566904102842:## function to get simplified score test
1566904102843:get_simplified_score_test <- function(dat, col_names = NULL) {
1566904102843:s_dat <- dat
1566904102843:if (is.null(col_names)) {
1566904102844:col_names <- colnames(s_dat)
1566904102844:}
1566904102844:n_lcm <- 1
1566904102844:for (c_name in col_names) {
1566904102845:n_lcm <- LCM(n_lcm, max(s_dat[c_name], na.rm = T))
1566904102845:}
1566904102845:for (c_name in col_names) {
1566904102846:#s_dat[,c_name] <- s_dat[,c_name]*(n_lcm/max(s_dat[c_name], na.rm = T))
1566904102846:s_dat[,c_name] <- s_dat[,c_name]/max(s_dat[c_name], na.rm = T)
1566904102846:}
1566904102847:return(s_dat)
1566904102847:}
1566904102848:## score programming tasks
1566904102848:score_programming_tasks = function(dat, keys, corr_str = 'corr', nview_str = 'nview', apxt_str = 'apxt', def_non_view_score = -1) {
1566904102848:library(dplyr)
1566904102849:for (k in keys) {
1566904102849:apxt<-paste0(apxt_str, k)
1566904102849:corr<-paste0(corr_str, k)
1566904102850:nview<-paste0(nview_str, k)
1566904102850:dat<-mutate(dat, score=if_else(dat[[nview]]>0, if_else(dat[[corr]]>7.5, 1, 0), def_non_view_score))
1566904102850:colnames(dat)[which(names(dat) == "score")]<-paste0(k, "s0")
1566904102851:dat_time <- dat[[apxt]][!is.na(dat[[apxt]]) & dat[[nview]]>0 & dat[[corr]]>7.5 & dat[[apxt]]>0]
1566904102851:dat_time <- dat_time[!dat_time %in% boxplot.stats(dat_time)$out]
1566904102852:T1<-median(dat_time, na.rm = T)
1566904102852:dat<-mutate(dat, score=if_else(dat[[nview]]>0, if_else(dat[[corr]]>7.5, if_else(dat[[apxt]]<T1, 2, 1), 0), def_non_view_score))
1566904102852:colnames(dat)[which(names(dat) == "score")]<-paste0(k, "s1")
1566904102853:T2<-quantile(dat_time, probs=.67, names=FALSE, na.rm = T)
1566904102853:T1<-quantile(dat_time, probs=.33, names=FALSE, na.rm = T)
1566904102854:dat<-mutate(dat, score=if_else(dat[[nview]]>0, if_else(dat[[corr]]>7.5, if_else(dat[[apxt]]<T2, if_else(dat[[apxt]]<T1, 3, 2), 1), 0), def_non_view_score))
1566904102854:colnames(dat)[which(names(dat) == "score")]<-paste0(k, "s2")
1566904102855:T3<-quantile(dat_time, probs=.75, names=FALSE, na.rm = T)
1566904102855:T2<-quantile(dat_time, probs=.5, names=FALSE, na.rm = T)
1566904102856:T1<-quantile(dat_time, probs=.25, names=FALSE, na.rm = T)
1566904102856:dat<-mutate(dat, score=if_else(dat[[nview]]>0, if_else(dat[[corr]]>7.5, if_else(dat[[apxt]]<T3, if_else(dat[[apxt]]<T2, if_else(dat[[apxt]]<T1, 4, 3), 2), 1), 0), def_non_view_score))
1566904102857:colnames(dat)[which(names(dat) == "score")]<-paste0(k, "s3")
1566904102857:}
1566904102858:dat[dat==-1] <- NA # replace -1 values for NA
1566904102858:return(dat)
1566904102858:}
1566904102859:## function to get information from a programming test based on AMC
1566904102860:get_amc_test_info <- function(participants, source, sheet, type = 'pre', other_sheet = NULL) {
1566904102860:acm_test <- read_excel(source, sheet = sheet, col_types = "numeric")
1566904102860:if (is.null(other_sheet)) {
1566904102861:acm_test <- select(
1566904102861:acm_test, starts_with('NUSP')
1566904102861:, starts_with('remember'), starts_with('understand')
1566904102861:, starts_with('apply'), starts_with('analyse'), starts_with('evaluate'))
1566904102862:} else {
1566904102862:acm_test <- select(
1566904102862:acm_test, starts_with('NUSP')
1566904102863:, starts_with('remember'), starts_with('understand')
1566904102863:, starts_with('apply'), starts_with('evaluate'))
1566904102863:}
1566904102863:acm_test <- acm_test[complete.cases(acm_test),]
1566904102864:if (!is.null(other_sheet)) {
1566904102864:rsheet <- read_excel(source, sheet = other_sheet, col_types = "numeric")
1566904102865:rsheet <- select(rsheet, starts_with('NUSP'), starts_with('analyse'))
1566904102865:acm_test <- merge(acm_test, rsheet, by='NUSP')
1566904102865:}
1566904102866:colnames(acm_test) <- sub('remember', 'Re', colnames(acm_test))
1566904102866:colnames(acm_test) <- sub('understand', 'Un', colnames(acm_test))
1566904102867:colnames(acm_test) <- sub('apply', 'Ap', colnames(acm_test))
1566904102867:colnames(acm_test) <- sub('analyse', 'An', colnames(acm_test))
1566904102867:colnames(acm_test) <- sub('evaluate', 'Ev', colnames(acm_test))
1566904102868:if (type == 'pre') {
1566904102868:colnames(acm_test) <- sub('-unistructural', '1', colnames(acm_test))
1566904102869:colnames(acm_test) <- sub('-multistructural', '2', colnames(acm_test))
1566904102869:colnames(acm_test) <- sub('-relational', '3', colnames(acm_test))
1566904102869:colnames(acm_test) <- sub('-1', 'a', colnames(acm_test))
1566904102870:colnames(acm_test) <- sub('-2', 'b', colnames(acm_test))
1566904102870:colnames(acm_test) <- sub('-3', 'c', colnames(acm_test))
1566904102871:} else {
1566904102871:colnames(acm_test) <- sub('-unistructural', 'A', colnames(acm_test))
1566904102872:colnames(acm_test) <- sub('-multistructural', 'B', colnames(acm_test))
1566904102906:colnames(acm_test) <- sub('-relational', 'C', colnames(acm_test))
1566904102907:colnames(acm_test) <- sub('-1', '1', colnames(acm_test))
1566904102909:colnames(acm_test) <- sub('-2', '2', colnames(acm_test))
1566904102910:colnames(acm_test) <- sub('-3', '3', colnames(acm_test))
1566904102911:}
1566904102913:acm_test <- select(
1566904102914:acm_test, starts_with('NUSP'), starts_with('Re'), starts_with('Un')
1566904102915:, starts_with('Ap'), starts_with('An'), starts_with('Ev'))
1566904102916:acm_test <- merge(participants, acm_test, by.x = 'NroUSP', by.y = 'NUSP')
1566904102918:rownames(acm_test) <- acm_test$UserID
1566904102922:return(acm_test)
1566904102924:}
1566904107026:#############################################################################
1566904107027:## Global summary                                                          ##
1566904107027:#############################################################################
1566904107028:write_param_and_nonparam_statistics_analysis_in_latex(
1566904107028:all_parametric_results, all_nonparametric_results, list_info
1566904107029:, filename = "report/latex/motivation-signedup/summary-scr-analysis.tex"
1566904107029:, in_title = "in the second study for signed up students"
1566904107030:, min_size_tests = T)
